@model EDR.Models.ViewModels.EventCreateViewModel
@using EDR.Enums
@using MvcCheckBoxList.Model

@{
    ViewBag.Title = "Create";
}

<h2>New Event</h2>

@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/foolproof")
@Scripts.Render("~/bundles/jqueryUI")
<link rel="stylesheet" href="https://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css" />
@Scripts.Render("~/bundles/GeoComplete")
<script src="https://maps.googleapis.com/maps/api/js?sensor=false&amp;libraries=places"></script>
@Scripts.Render("~/bundles/TimePicker")
@Styles.Render("~/Content/TimePickercss")


<script type="text/javascript">
    $.validator.setDefaults({
        ignore: ""
    })
    
    $(function () {
        $('.start').timepicker({
            'timeFormat': 'h:i A',
            'step': function (i) {
                return 15;
            }
        });
        $('.end').timepicker({
            'timeFormat': 'h:i A',
            'step': function (i) {
                return 15;
            }
        });
        $('.start').timepicker('setTime', new Date($('.timeelement.begintime').val()));
        $('.end').timepicker('setTime', new Date($('.timeelement.endtime').val()));
    });

    $('.timepicker').change(function () {
        var start = $('.timeelement.begintime');
        var end = $('.timeelement.endtime');

        var time = new Date();
        var startdt = new Date(time.getMonth().toString() + "/" + time.getDate().toString() + "/" + time.getFullYear().toString() + " " + $('.timepicker.start').val());
        var enddt = new Date(time.getMonth().toString() + "/" + time.getDate().toString() + "/" + time.getFullYear().toString() + " " + $('.timepicker.end').val());
        start.prop('value', startdt.toLocaleDateString() + " " + startdt.toLocaleTimeString());
        end.prop('value', enddt.toLocaleDateString() + " " + enddt.toLocaleTimeString());
        var val = $('#createform.main').valid();
    });

    //  New Place AutoComplete
    $(function () {
        $("#newplace").geocomplete({
            details: "form",
            types: ["geocode", "establishment"],
        })
        .bind("geocode:result", function (event, result) {
            $('#Event_Place_Latitude').prop("value", result.geometry.location.lat());
            $('#Event_Place_Longitude').prop("value", result.geometry.location.lng());

            $('#Event_Place_Name').prop("value", result.name);
            $('#Event_Place_GooglePlaceId').prop("value", result.place_id);
            $('#Event_Place_GoogleUrl').prop("value", result.url);
            $('#Event_Place_Website').prop("value", result.website);
            $('#Event_Place_GoogleRating').prop("value", result.rating);
            //$.each(result.reviews, function (i, review) {
            //    alert(review.text);
            //});
            var street_num;
            var street_name;
            $.each(result.address_components, function (i, address_component) {

                //alert(address_component.types[0]);
                //alert(address_component.long_name);
                if (address_component.types[0] == "street_number") {
                    street_num = address_component.long_name;
                }
                else if (address_component.types[0] == "route") {
                    street_name = address_component.long_name;
                }
                else if (address_component.types[0] == "locality") {
                    $('#Event_Place_City').prop("value", address_component.long_name);
                }
                else if (address_component.types[0] == "administrative_area_level_1") {
                    $('#Event_Place_StateName').prop("value", address_component.long_name);
                }
                else if (address_component.types[0] == "postal_code") {
                    $('#Event_Place_Zip').prop("value", address_component.long_name);
                }
                else if (address_component.types[0] == "country") {
                    $('#Event_Place_Country').prop("value", address_component.long_name);
                }
            });
            //alert(street_num + " " + street_name);
            $('#Event_Place_Address').prop("value", street_num + " " + street_name);
            //  console.log(result);
            $('#Event_Place_Name').valid();
        });
    });
    //  New Place AutoComplete

    $(function () {
        function SetFirstScreen(action) {
            if (action == "New")
            {
                $('#CreateAction').prop("value", "New");
                var createevent = $('#createevent');
                $('.step.active', createevent).hide();
                var wizard = $('#wizard');
                wizard.addClass('active');
                wizard.show();
                createevent.hide();
                $('.next', wizard).show();
            }
            else
            {
                $('#CreateAction').prop("value", "Facebook");
                var createevent = $('#createevent');
                $('.pickfacebook', createevent).addClass('active');
                $('.pickfacebook', createevent).show();
                $('.newevent', createevent).hide();
            }
        }
        if ('@Model.CreateAction' == "New") {
            SetFirstScreen("New");
        }
        else if ('@Model.CreateAction' == "Facebook") {
            SetFirstScreen("Facebook");
        }

        $('#createevent .newbtn').click(function () {
            SetFirstScreen("New");
        });

        $('#createevent .facebookbtn').click(function () {
            SetFirstScreen("Facebook");
        });

        //$('.wizard .prev').click(function () {
        //    $('#finish').hide();
        //    var wizard = $(this).parent('.wizard');

        //    $('.step.active', wizard).hide();

        //    var currentStep = $('.step.active', wizard);
        //    currentStep.hide();
        //    currentStep.removeClass('active');

        //    var newStep = currentStep.prev('.step', wizard);
        //    newStep.addClass('active');
        //    newStep.show();

        //    if ($('.step:first', wizard)[0] == newStep[0]) {
        //        $(this).hide();
        //    }

        //    $('.next', wizard).show();
        //});

        //$('.wizard .next').click(function () {
        //    var wizard = $(this).parent('.wizard');

        //    $('.step.active', wizard).hide();

        //    var currentStep = $('.step.active', wizard);
        //    currentStep.hide();
        //    currentStep.removeClass('active');

        //    var newStep = currentStep.next('.step', wizard);
        //    newStep.addClass('active');
        //    newStep.show();

        //    if ($('.step:last', wizard)[0] == newStep[0]) {
        //        $(this).hide();
        //        $('#finish').show();
        //    }

        //    $('.prev', wizard).show();
        //});
        //var form = $('#createform.main');
        //alert(form.prop('id'));
        $('#btneventtypenext').click(function () {
            $('#wizeventtypediv').hide();
            $('#wizdatetimediv').show();
        });
        $('#btndatetimeprev').click(function () {
            $('#wizeventtypediv').show();
            $('#wizdatetimediv').hide();
        });
        $('#btndatetimenext').click(function () {
            if ($('.timeelement.begintime').valid() && $('.timeelement.endtime').valid() && $('#Event_StartDate').valid() && $('#Event_EndDate').valid())
            {
                $('#wizdatetimediv').hide();
                $('#wizdetaildiv').show();
            }
            else {
                var val = $('#createform.main').validate();
                for (var i = 0; i < val.errorList.length; i++) {
                    alert(val.errorList[i].message);
                }
            }

            //var form = $('#createform.main');
            //var val = form.validate();
            //alert($('.timeelement.endtime').valid());
            //if (form.valid()) {
            //    $('#wizdatetimediv').hide();
            //    $('#wizdetaildiv').show();
            //}
        });
        $('#btndetailprev').click(function () {
            $('#wizdatetimediv').show();
            $('#wizdetaildiv').hide();
        });
        $('#btndetailnext').click(function () {
            var form = $('#createform.main');
            var count = $('input[name="StylesCheckboxList.PostedItems"]:checked').length;
            var valid = true;

            if (count == 0)
            {
                $('#validationMessage').show();
                valid = false;
            }
            else
            {
                $('#validationMessage').hide();
            }

            if (valid) {
                if ($('#Event_Name').valid() && $('#SkillLevel').valid()) {
                    $('#validationMessage').hide();
                    $('#wizlocationdiv').show();
                    $('#wizdetaildiv').hide();
                }
                else {
                    var val = $('#createform.main').validate();
                    for (var i = 0; i < val.errorList.length; i++) {
                        alert(val.errorList[i].message);
                    }
                }
            }
        });
        $('#btnlocationprev').click(function () {
            $('#wizdetaildiv').show();
            $('#wizlocationdiv').hide();
        });
        $('#btnlocationnext').click(function () {
            if ($('#Event_Place_Name').valid()) {
                $('#wizlocationdiv').hide();
                $('#wizticketsdiv').show();
            }
        });
        $('#btnticketsprev').click(function () {
            $('#wizlocationdiv').show();
            $('#wizticketsdiv').hide();
        });

        @*$('.time').change(function () {
            CheckDates();
        });

        function CheckDates() {
            var shour = $('#StartHour option:selected').val();
            var smin = $('#StartMinute option:selected').val();
            var sampm = $('#StartAMPM option:selected').val();
            var ehour = $('#EndHour option:selected').val();
            var emin = $('#EndMinute option:selected').val();
            var eampm = $('#EndAMPM option:selected').val();

            var start = new Date("@Model.Event.StartDate.ToShortDateString() " + shour + ":" + smin + " " + sampm);
            $('#StartTime').prop("value", start)
            var end = new Date("@Model.Event.StartDate.ToShortDateString() " + ehour + ":" + emin + " " + eampm);

            $('#Event_StartTime').prop("value", "@Model.Event.StartDate.ToShortDateString() " + shour + ":" + smin + " " + sampm);
            $('#Event_EndTime').prop("value", "@Model.Event.StartDate.ToShortDateString() " + ehour + ":" + emin + " " + eampm);

            if (start > end) {
                $('#EndTimevalidationMessage').show();
                return false;
            }
            else {
                $('#EndTimevalidationMessage').hide();
                return true;
            }
        }*@
    });

    $(function () {
        $("input[type='checkbox'][name='ProductCode']")
        $('#EventTypeDD').change(function () {
            var eventtype = $("#EventTypeDD option:selected").val();
            SetEventType(eventType);
        });
    });
    $(function () {
        $('#ClassType').change(function () {
            var classtype = $("#ClassType option:selected").val();
            var btn = $('.wizard .next');
            if (classtype != "") {
                btn.prop('disabled', false);
            }
            else {
                btn.prop('disabled', true);
            }
        });
    });
    $(function () {
        $('#SocialType').change(function () {
            var classtype = $("#SocialType option:selected").val();
            var btn = $('.wizard .next');
            if (classtype != "") {
                btn.prop('disabled', false);
            }
            else {
                btn.prop('disabled', true);
            }
        });
    });

    //$(function () {
    //    $('#ExistingPlace').change(function () {
    //        var placeid = $("#ExistingPlace option:selected").val();
    //        if (placeid > 0) {
    //            $('#newlocationdiv').hide();
    //            $('#ordiv').hide();
    //        }
    //        else {
    //            $('#newlocationdiv').show();
    //            $('#ordiv').show();
    //        }
    //    });
    //});

    //$(function () {
    //    $('#UseSchoolTickets').change(function () {
    //        var form = $('#createform.main');
    //        var valid = form.valid();
    //        alert(valid);
    //    });
    //});

    $(function () {
        $('#checkall').click(function () {
            var status = $('#checkall').prop('checked');
            $('input[name="TicketId"]').each(function () {
                $(this).prop('checked', status);
            });
        });
    });

    $(function () {
        $('#UseSchoolTickets').change(function () {
            var use = $("#UseSchoolTickets option:selected").val();
            if (use == "true")
            {
                $('#newticketdiv').hide();
            }
            else
            {
                $('#newticketdiv').show();
            }

            //var classtype = $("#ClassType option:selected").val();
            //var btn = $('.wizard .next');
            //if (classtype != "") {
            //    btn.prop('disabled', false);
            //}
            //else {
            //    btn.prop('disabled', true);
            //}
        });
    });
    $(document).ready(function () {
        function SetEventType(eventtype)
        {
            //  Class Type
            if (eventtype == "1") {
                $('#classtype').show();
                $('#socialtype').hide();

                var classtype = $("#ClassType option:selected").val();
                var btn = $('.wizard .next');
                if (classtype != "") {
                    btn.prop('disabled', false);
                }
                else {
                    btn.prop('disabled', true);
                }

                //  Show Skill Level
                $('#skilllevel').show();
            }
            else if (eventtype == "0") {
                $('#classtype').hide();
                $('#socialtype').show();

                var socialtype = $("#SocialType option:selected").val();
                var btn = $('.wizard .next');
                if (socialtype != "") {
                    btn.prop('disabled', false);
                }
                else {
                    btn.prop('disabled', true);
                }
                $('#skilllevel').hide();
            }
            else {
                $('#classtype').hide();
                $('#socialtype').hide();
                $('#skilllevel').hide();
            }
        }

        if ('@Model.Event.FacebookId' != "")
        {
            var createevent = $('#createevent');
            $('.step.active', createevent).hide();

            var wizard = $('#wizard');
            wizard.addClass('active');
            wizard.show();

            createevent.hide();

            $('.next', wizard).show();

            $('#existinglocationdiv').hide();
            $('#ordiv').hide();
        }

        var eventtype = $("#EventTypeDD option:selected").val();
        //  Class Type
        if (eventtype == "1") {
            $('#classtype').show();
            $('#socialtype').hide();
            $('#skilllevel').show();

            var classtype = $("#ClassType option:selected").val();
            var btn = $('.wizard .next');
            if (classtype != "") {
                btn.prop('disabled', false);
            }
            else {
                btn.prop('disabled', true);
            }
        }
        else if (eventtype == "0") {
            $('#classtype').hide();
            $('#socialtype').show();
            $('#skilllevel').hide();

            var socialtype = $("#SocialType option:selected").val();
            var btn = $('.wizard .next');
            if (socialtype != "") {
                btn.prop('disabled', false);
            }
            else {
                btn.prop('disabled', true);
            }
        }
        else {
            $('#classtype').hide();
            $('#socialtype').hide();
            $('#skilllevel').hide();
        }

        if ('@Model.EventType' != "")
        {
            var dd = $('#EventTypeDD');
            var eventType = '@Model.EventType' == "Social" ? "0" : "1";
            dd.prop("disabled", true);
            if ('@Model.EventType' == "Social")
            {
                dd.prop('selectedIndex', 1);
                $('#UseSchoolTickets').prop('disabled', true);
                $('#UseSchoolTickets').prop('selectedIndex', 1);
                $('#newticketdiv').show();
            }
            else
            {
                dd.prop('selectedIndex', 2);
            }
            SetEventType(eventType);
        }
    });
</script>
<script type="text/javascript">

    $(document).ready(function () {
        var date = '@Model.Event.StartDate';
        if (date != "")
        {
            setDate(date);
        }

        function setDate(date) {
            var res = date.split("-");
            date = new Date(res[1] + "/" + res[2] + "/" + res[0]);
            setMonthDay(date);
        };

        function setMonthDay(date) {
            var weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
            var daysofmonth = ["blank", "1st", "2nd", "3rd", "4th", "5th", "6th", "7th", "8th", "9th", "10th", "11th", "12th", "13th", "14th", "15th", "16th", "17th", "18th", "19th", "20th", "21st", "22nd", "23rd", "24th", "25th", "26th", "27th", "28th", "29th", "30th", "31st"];
            $("#dayofweek").text(weekdays[date.getDay()]);
            //  $("#eventday").text(daysofmonth[date.getDate()] + " of the Month");
            //var nth = parseInt(date.getDate() / 7) + 1;
            //alert(nth);
            setMonthDaysCheck(date);
            //var cb = $('input[type=checkbox][name="MonthDays.PostedItems"][value="' + nth.toString() + '"]');
            ////  var test = $('input[type=checkbox][name="cbtest"]');
            ////  alert(cb.attr("value").valueOf());
            ////  alert(test.attr("value").valueOf());
            //cb.prop("disabled", true);
            //cb.prop("checked", "checked");
            //var hcb = $('input[type=hidden][id="HiddenMonthDay"]');
            //hcb.prop("value", cb.prop("value"));
        }

        function setMonthDaysCheck(date)
        {
            var nth = Math.ceil(date.getDate() / 7);
            $('input[type=checkbox][name="MonthDays.PostedItems"]').prop('checked', "");
            $('input[type=checkbox][name="MonthDays.PostedItems"]').prop('disabled', false);
            var cb = $('input[type=checkbox][name="MonthDays.PostedItems"][value="' + nth.toString() + '"]');
            cb.prop("disabled", true);
            cb.prop("checked", "checked");
            var hcb = $('input[type=hidden][id="HiddenMonthDay"]');
            hcb.prop("value", cb.prop("value"));
        }

        //function setMonthDay(date) {
        //    var weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
        //    var daysofmonth = ["blank", "1st", "2nd", "3rd", "4th", "5th", "6th", "7th", "8th", "9th", "10th", "11th", "12th", "13th", "14th", "15th", "16th", "17th", "18th", "19th", "20th", "21st", "22nd", "23rd", "24th", "25th", "26th", "27th", "28th", "29th", "30th", "31st"];
        //    $("#dayofweek").text(weekdays[date.getDay()]);
        //    //  $("#eventday").text(daysofmonth[date.getDate()] + " of the Month");
        //    var nth = parseInt(date.getDate() / 7) + 1;
        //    var cb1 = $('input[type=checkbox][name="MonthDays.PostedItems"][value="1"]');
        //    cb1.prop("disabled", false);
        //    var cb2 = $('input[type=checkbox][name="MonthDays.PostedItems"][value="2"]');
        //    cb2.prop("disabled", false);
        //    var cb3 = $('input[type=checkbox][name="MonthDays.PostedItems"][value="3"]');
        //    cb3.prop("disabled", false);
        //    var cb4 = $('input[type=checkbox][name="MonthDays.PostedItems"][value="4"]');
        //    cb4.prop("disabled", false);
        //    cb1.prop("checked", "");
        //    cb2.prop("checked", "");
        //    cb3.prop("checked", "");
        //    cb4.prop("checked", "");

        //    var cb = $('input[type=checkbox][name="MonthDays.PostedItems"][value="' + nth.toString() + '"]');
        //    //  var test = $('input[type=checkbox][name="cbtest"]');
        //    //  alert(cb.attr("value").valueOf());
        //    //  alert(test.attr("value").valueOf());
        //    cb.prop("checked", "checked");
        //    cb.prop("disabled", true);
        //    var hcb = $('input[type=hidden][id="HiddenMonthDay"]');
        //    //  alert(cb.attr("value"));
        //    hcb.prop("value", cb.prop("value"));

        //    //  cb.prop("readonly", "readonly");
        //    //  alert(cb.attr("readonly").valueOf());
        //    //  alert(cb.promise("readonly").valueOf());

        //    //  test.prop("checked", "checked");
        //    //  .prop("checked",true);
        //}

        $('input[name="Event.StartDate"]').change(function () {
            setDate($('input[name="Event.StartDate"]').val());
        });

        $('input[name="Event.Recurring"]').click(function () {
            if ($(this).attr("value") == "True") {
                $("#recurring").show();
            }
            if ($(this).attr("value") == "False") {
                $("#recurring").hide();
            }
        });

        $('select[id="Event_Frequency"]').change(function () {
            if ($('option:selected', $(this)).text() == "Daily") {
                $('#frequency').text('Day(s)');
                $("#monthly").hide();
            }
            if ($('option:selected', $(this)).text() == "Weekly") {
                $('#frequency').text('Week(s)');
                $("#monthly").hide();
            }
            if ($('option:selected', $(this)).text() == "Monthly") {
                $('#frequency').text('Month(s)');
                $("#monthly").show();
                var date = $('#Event_StartDate').val();
                var res = date.split("-");
                date = new Date(res[1] + "/" + res[2] + "/" + res[0]);
                //  setMonthDay(date);
            }
            if ($('option:selected', $(this)).text() == "Yearly") {
                $('#frequency').text('Year(s)');
                $("#monthly").hide();
            }
        });
    });
</script>
}
<div class="row" style="margin: 10px;">
    <div class="col-lg-6 col-md-6">
        @Html.ValidationSummary("", new { @class = "text-danger" })
        <div id="createevent">
            <div class="newevent">
                <input type="button" class="newbtn btn btn-primary" value="Create a New Event" />
                <br />or<br />
                <input type="button" class="facebookbtn btn btn-primary" value="Import from Facebook" />
            </div>
            <div class="pickfacebook" style="display: none;">
            @using (Html.BeginForm())
            { 
                <h2>Pick a Facebook Event</h2>
                <div class="row" style="margin-bottom: 5px;">
                    <div class="col-md-10 col-lg-9">
                        @if (Model.FacebookEvents != null)
                        {
                            @Html.DropDownListFor(model => model.FacebookId, Model.FacebookEvents.Select(e => new SelectListItem() { Text = e.Name, Value = e.Id }), null, new { @class = "form-control" })
                        }
                    </div>
                </div>
                <input type="submit" id="submit" value="Pick Event" class="btn btn-primary" />
            }
            </div>
        </div>
        @using (Html.BeginForm("Create", "Event", FormMethod.Post, new { @id = "createform", @class = "main" }))
        {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => m.CreateAction)
        @Html.HiddenFor(m => m.Role)
        @Html.HiddenFor(m => m.EventType)
        @Html.HiddenFor(m => m.SchoolId)
        @Html.HiddenFor(x => x.Event.PhotoUrl)
        @Html.HiddenFor(x => x.Event.FacebookLink)
        @Html.HiddenFor(x => x.Event.FacebookId)
        @Html.HiddenFor(x => x.Event.Interval)
        @Html.HiddenFor(x => x.Event.IsAvailable)
        @Html.HiddenFor(x => x.Event.UpdatedDate)
        @*@Html.HiddenFor(m => m.Event.Place.FacebookId)
        @Html.HiddenFor(m => m.Event.Place.Public)
        @Html.HiddenFor(m => m.Event.Place.Country)
        @Html.HiddenFor(m => m.Event.Place.Longitude)
        @Html.HiddenFor(m => m.Event.Place.Latitude)
        @Html.HiddenFor(m => m.Event.Place.Filename)
        @Html.HiddenFor(m => m.Event.Place.ThumbnailFilename)*@
        <div id="wizard" class="wizard" style="display: none;">
            <div id="wizeventtypediv" class="step active" title="New Event">
                <h2>Step: Type of Event</h2>
                <div class="row" style="margin-bottom: 5px;">
                    <div class="col-md-10 col-lg-9">
                        @Html.EnumDropDownListFor(model => model.EventType, "-- Select a Event Type --", htmlAttributes: new { @class = "form-control", @id = "EventTypeDD" })
                    </div>
                    <div class="col-md-10 col-lg-9">
                        <div class="row" style="margin-top: 5px;">
                            <div id="classtype" hidden="hidden">
                                <div class="col-md-10 col-lg-9">
                                    @Html.EnumDropDownListFor(model => model.ClassType, "-- Select a Class Type --", htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.ClassType, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div id="socialtype" hidden="hidden">
                                <div class="col-md-10 col-lg-9">
                                    @Html.EnumDropDownListFor(model => model.SocialType, "-- Select a Social Type --", htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.SocialType, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-10 col-lg-9" style="margin-top: 5px;">
                        <input id="btneventtypenext" type="button" class="next btn btn-primary" style="display: none" value="Next" disabled="disabled" />
                    </div>
                </div>
            </div>
            <div id="wizdatetimediv" class="step" style="display:none">
                <h2>Step: Date & Time</h2>
                <div class="row" style="margin-bottom: 5px;">
                    @if (Model.Event.FacebookId != null)
                    {
                        @Html.HiddenFor(m => m.Event.StartDate)
                        @Html.LabelFor(model => model.Event.StartDate, htmlAttributes: new { @class = "control-label col-lg-3 col-md-2" })
                        <div class="col-md-10 col-lg-9">
                            @Model.Event.StartDate.ToLongDateString()
                            @Html.ValidationMessageFor(model => model.Event.StartDate, "", new { @class = "text-danger" })
                        </div>
                    }
                    else
                    {
                        @Html.LabelFor(model => model.Event.StartDate, htmlAttributes: new { @class = "control-label col-lg-3 col-md-2" })
                        <div class="col-md-10 col-lg-9">
                            @Html.TextBoxFor(m => m.Event.StartDate, "{0:yyyy-MM-dd}", htmlAttributes: new { @type = "date", @class = "form-control" })
                            @*@Html.EditorFor(model => model.Event.StartDate, new { htmlAttributes = new { @class = "form-control" } })*@
                            @Html.ValidationMessageFor(model => model.Event.StartDate, "", new { @class = "text-danger" })
                        </div>
                    }
                </div>
                <div class="row" style="margin-bottom: 5px;">
                    @Html.LabelFor(model => model.Event.EndDate, htmlAttributes: new { @class = "control-label col-lg-3 col-md-2" })
                    <div class="col-md-10 col-lg-9">
                        @Html.TextBoxFor(m => m.Event.EndDate, "{0:yyyy-MM-dd}", htmlAttributes: new { @type = "date", @class = "form-control" })
                        @*@Html.EditorFor(model => model.Event.EndDate, new { htmlAttributes = new { @class = "form-control" } })*@
                        @Html.ValidationMessageFor(model => model.Event.EndDate, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row" style="margin-bottom: 5px;">
                    @Html.LabelFor(model => model.Event.StartTime, htmlAttributes: new { @class = "control-label col-lg-3 col-md-2" })
                    <div class="col-md-10 col-lg-9">
                        <p><input id="start" type="text" class="start timepicker form-control" /></p>
                        @Html.HiddenFor(m => m.Event.StartTime, new { @class = "timeelement begintime" })
                        @Html.ValidationMessageFor(model => model.Event.StartTime, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row" style="margin-bottom: 5px;">
                    @Html.LabelFor(model => model.Event.EndTime, htmlAttributes: new { @class = "control-label col-lg-3 col-md-2" })
                    <div class="col-md-10 col-lg-9">
                        <p><input id="end" type="text" class="end timepicker form-control" /></p>
                        @Html.HiddenFor(m => m.Event.EndTime, new { @class = "timeelement endtime" })
                        @Html.ValidationMessageFor(model => model.Event.EndTime, "", new { @class = "text-danger" })
                    </div>
                </div>

                @*<div class="row" style="margin-bottom: 5px;">
                    <label class="control-label col-lg-3 col-md-2">From</label>
                    <div class="col-lg-9 col-md-10">
                        @Html.HiddenFor(m => m.Event.StartTime)
                        @Html.DropDownListFor(m => m.StartHour, new SelectList(new List<SelectListItem>
                                                {
                                                    new SelectListItem { Text = "01", Value = "1" },
                                                    new SelectListItem { Text = "02", Value = "2" },
                                                    new SelectListItem { Text = "03", Value = "3" },
                                                    new SelectListItem { Text = "04", Value = "4" },
                                                    new SelectListItem { Text = "05", Value = "5" },
                                                    new SelectListItem { Text = "06", Value = "6" },
                                                    new SelectListItem { Text = "07", Value = "7" },
                                                    new SelectListItem { Text = "08", Value = "8" },
                                                    new SelectListItem { Text = "09", Value = "9" },
                                                    new SelectListItem { Text = "10", Value = "10" },
                                                    new SelectListItem { Text = "11", Value = "11" },
                                                    new SelectListItem { Text = "12", Value = "12" }
                                                    }, "Value", "Text", null), new { @class = "form-control time", style = "width: 70px; display: inline;" })
                        @Html.DropDownListFor(m => m.StartMinute, new SelectList(new List<string> { "00", "15", "30", "45" }), new { @class = "form-control time", style = "width: 70px; display: inline;" })
                        @Html.DropDownListFor(m => m.StartAMPM, new SelectList(new List<string>() { "AM", "PM" }), new { @class = "form-control time", style = "width: 70px; display: inline;" })
                        @Html.ValidationMessageFor(model => model.Event.StartTime, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row" style="margin-bottom: 5px;">
                    <label class="control-label col-lg-3 col-md-2">To</label>
                    <div class="col-lg-9 col-md-10">
                        @Html.HiddenFor(m => m.Event.EndTime)
                        @Html.DropDownListFor(m => m.EndHour, new SelectList(new List<SelectListItem>
                                                {
                                                    new SelectListItem { Text = "01", Value = "1" },
                                                    new SelectListItem { Text = "02", Value = "2" },
                                                    new SelectListItem { Text = "03", Value = "3" },
                                                    new SelectListItem { Text = "04", Value = "4" },
                                                    new SelectListItem { Text = "05", Value = "5" },
                                                    new SelectListItem { Text = "06", Value = "6" },
                                                    new SelectListItem { Text = "07", Value = "7" },
                                                    new SelectListItem { Text = "08", Value = "8" },
                                                    new SelectListItem { Text = "09", Value = "9" },
                                                    new SelectListItem { Text = "10", Value = "10" },
                                                    new SelectListItem { Text = "11", Value = "11" },
                                                    new SelectListItem { Text = "12", Value = "12" }
                                                    }, "Value", "Text", null), new { @class = "form-control time", style = "width: 70px; display: inline;" })
                        @Html.DropDownListFor(m => m.EndMinute, new SelectList(new List<string> { "00", "15", "30", "45" }), new { @class = "form-control time", style = "width: 70px; display: inline;" })
                        @Html.DropDownListFor(m => m.EndAMPM, new SelectList(new List<string>() { "AM", "PM" }), new { @class = "form-control time", style = "width: 70px; display: inline;" })
                        @Html.ValidationMessageFor(model => model.Event.EndTime, "", new { @class = "text-danger" })
                        <p>
                            <span id="EndTimevalidationMessage" class="text-danger" style="display: none;">End Time Must Be After Start Time</span>
                        </p>
                    </div>
                </div>*@
                <div class="row" style="margin-bottom: 5px;">
                    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                        @Html.LabelFor(model => model.Event.Recurring, htmlAttributes: new { @class = "control-label text-danger text-uppercase" })
                        <span>
                            @if (!Model.Event.Recurring)
                            {
                                @Html.RadioButtonFor(model => model.Event.Recurring, false, new { @checked = "checked", id = "recurring_no" })
                            }
                            else
                            {
                                @Html.RadioButtonFor(model => model.Event.Recurring, false, new { id = "recurring_no" })
                            }
                            <label for="recurring_no">NO</label>
                        </span>
                        <span>
                            @if (Model.Event.Recurring)
                            {
                                @Html.RadioButtonFor(model => model.Event.Recurring, true, new { @checked = "checked", id = "recurring_yes" })
                            }
                            else
                            {
                                @Html.RadioButtonFor(model => model.Event.Recurring, true, new { id = "recurring_yes" })
                            }
                            <label for="recurring_yes">YES</label>
                        </span>
                    </div>
                    <div class="row col-lg-12 col-md-12">
                        <div class="col-lg-3 col-md-3"></div>
                        <div class="col-md-9 col-lg-9">
                            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12" id="recurring" style="margin-top: 5px;" @(Model.Event.Recurring ? "" : "hidden")>
                                <div class="row">
                                    <span class="control-label col-lg-3 col-md-3 text-warning">Repeats</span>
                                    <div class="col-md-9 col-lg-9">
                                        @Html.EnumDropDownListFor(model => model.Event.Frequency, htmlAttributes: new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.Event.Frequency, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="row" style="margin-top: 5px;">
                                    <span class="control-label col-lg-3 col-md-3 text-warning">Every</span>
                                    <div class="col-md-4 col-lg-4">
                                        @Html.TextBoxFor(model => model.Event.Interval, htmlAttributes: new { @class = "form-control", @type = "number", @min = "1", @max = "200" })
                                        @Html.ValidationMessageFor(model => model.Event.Interval, "", new { @class = "text-danger" })
                                    </div>
                                    <label class="text-warning" id="frequency" style="font-weight: normal; height: 30px; vertical-align: bottom;">
                                        @if (Model.Event.Frequency == Frequency.Daily)
                                        {
                                            @: Day(s)
                                        }
                                        else if (Model.Event.Frequency == Frequency.Weekly)
                                        {
                                            @: Week(s)
                                        }
                                        else if (Model.Event.Frequency == Frequency.Monthly)
                                        {
                                            @: Month(s)
                                        }
                                        else if (Model.Event.Frequency == Frequency.Yearly)
                                        {
                                            @: Year(s)
                                        }
                                    </label>
                                </div>
                                <div class="row col-lg-12 col-md-12" id="monthly" style="padding-top: 5px; margin-top: 5px;" @(Model.Event.Frequency == Frequency.Monthly ? "" : "hidden='hidden'")>
                                    <div class="panel panel-info">
                                        <div class="panel-body">
                                            <div class="row">
                                                <span class="control-label col-lg-3 col-md-3 text-warning">On the </span>
                                                <span class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
                                                    @Html.CheckBoxListFor(model => model.MonthDays.PostedItems,
                                                                model => model.MonthDays.AvailableItems,
                                                                item => item.Value,
                                                                item => item.Text,
                                                                model => model.MonthDays.SelectedItems,
                                                                new HtmlListInfo(HtmlTag.table, 2, new { @class = "checkboxlist text-warning" }, TextLayout.Default))
                                                </span>
                                                <label class="col-lg-1 col-md-1 text-warning" id="dayofweek">@Model.Event.StartDate.DayOfWeek</label>
                                                @Html.HiddenFor(x => x.HiddenMonthDay)
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-10 col-lg-9" style="margin-top: 5px;">
                    <input id="btndatetimeprev" type="button" class="prev btn btn-primary" value="Previous" />
                    <input id="btndatetimenext" type="button" class="next btn btn-primary" style="display: none" value="Next" disabled="disabled" />
                </div>
            </div>
            <div id="wizdetaildiv" class="step" style="display:none">
                <h2>Step: Details</h2>
                <div class="row" style="margin-bottom: 5px;">
                    @Html.LabelFor(model => model.Event.Name, htmlAttributes: new { @class = "control-label col-lg-3 col-md-2" })
                    <div class="col-md-10 col-lg-9">
                        @Html.EditorFor(model => model.Event.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Event.Name, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div id="skilllevel" class="row" style="margin-bottom: 5px;" hidden="hidden">
                    @Html.LabelFor(m => m.SkillLevel, htmlAttributes: new { @class = "control-label col-lg-3 col-md-2" })
                    <div class="col-md-10 col-lg-9">
                        @Html.DropDownListFor(m => m.SkillLevel, new SelectList(new List<int> { 1, 2, 3, 4, 5 }), "-- Select a Skill Level --", new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.SkillLevel, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row" style="margin-bottom: 5px;">
                    @Html.LabelFor(model => model.Event.Name, "Dance Styles", htmlAttributes: new { @class = "control-label col-lg-3 col-md-2" })
                    <div class="col-md-10 col-lg-9">
                        @Html.CheckBoxListFor(model => model.StylesCheckboxList.PostedItems,
                                    model => model.StylesCheckboxList.AvailableItems,
                                    style => style.Value,
                                    style => style.Text,
                                    model => model.StylesCheckboxList.SelectedItems,
                                    new HtmlListInfo(HtmlTag.table, 2, new { @class = "checkboxlist" }, TextLayout.Default))
                        <span id="validationMessage" class="text-danger" style="display: none;" >Please choose at least one style</span>
                        @*@Html.ValidationMessageFor(model => model.StylesCheckboxList.PostedItems, "Please choose at least one style", new { @class = "text-danger" })*@
                    </div>
                </div>
                <div class="row" style="margin-bottom: 5px;">
                    @Html.LabelFor(model => model.Event.Description, htmlAttributes: new { @class = "control-label col-lg-3 col-md-2" })
                    <div class="col-md-10 col-lg-9">
                        @Html.EditorFor(model => model.Event.Description, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Event.Description, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-10 col-lg-9" style="margin-top: 5px;">
                    <input id="btndetailprev" type="button" class="prev btn btn-primary" value="Previous" />
                    <input id="btndetailnext" type="button" class="next btn btn-primary" style="display: none" value="Next" disabled="disabled" />
                </div>
            </div>
            <div id="wizlocationdiv" class="step" style="display:none">
                <h2>Step: Location</h2>
                <div class="col-lg-12 col-md-12" style="margin-bottom: 5px;">
                    @Html.HiddenFor(model => model.Event.Place.Name)
                    @Html.HiddenFor(model => model.Event.Place.Address)
                    @Html.HiddenFor(model => model.Event.Place.Address2)
                    @Html.HiddenFor(model => model.Event.Place.City)
                    @Html.HiddenFor(model => model.Event.Place.StateName)
                    @Html.HiddenFor(model => model.Event.Place.Zip)
                    @Html.HiddenFor(model => model.Event.Place.Country)
                    @Html.HiddenFor(model => model.Event.Place.Latitude)
                    @Html.HiddenFor(model => model.Event.Place.Longitude)
                    @Html.HiddenFor(model => model.Event.Place.GooglePlaceId)
                    @Html.HiddenFor(model => model.Event.Place.GoogleUrl)
                    @Html.HiddenFor(model => model.Event.Place.Website)
                    @Html.HiddenFor(model => model.Event.Place.GoogleRating)
                    @Html.HiddenFor(m => m.Event.Place.FacebookId)
                    @Html.HiddenFor(m => m.Event.Place.Public)
                    @Html.HiddenFor(m => m.Event.Place.Website)
                    @Html.HiddenFor(m => m.Event.Place.FacebookLink)
                    @Html.HiddenFor(m => m.Event.Place.Filename)
                    @Html.HiddenFor(m => m.Event.Place.ThumbnailFilename)
                    @*@Html.TextBoxFor(model => model.NewPlace.PlaceType, new { @Value = EDR.Enums.PlaceType.OtherPlace })*@
                    <div class="row" style="margin-bottom: 5px;">
                        @Html.Label("New Location", htmlAttributes: new { @class = "control-label col-lg-3 col-md-2" })
                        <div class="col-md-10 col-lg-9">
                            <input id="newplace" type="text" placeholder="Search for a new Location" class="form-control" />
                            @Html.ValidationMessageFor(model => model.Event.Place.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row" style="margin-bottom: 5px;">
                        @Html.Label("Type of Location", htmlAttributes: new { @class = "control-label col-lg-3 col-md-2" })
                        <div class="col-md-10 col-lg-9">
                            @Html.EnumDropDownListFor(model => model.Event.Place.PlaceType, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Event.Place.PlaceType, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row" style="margin-bottom: 5px;">
                        @Html.Label("Location", htmlAttributes: new { @class = "control-label col-lg-3 col-md-2" })
                        <div class="col-md-10 col-lg-9">
                            @Html.TextArea("Location", Model.Event.Place.Address + "\n" + Model.Event.Place.City + ", " + Model.Event.Place.StateName + " " + Model.Event.Place.Zip + "\n" + Model.Event.Place.Country, 4, 50, new { @class = "form-control", Name = "formatted_address", @readonly = true })
                        </div>
                    </div>

                    @*@Html.HiddenFor(m => m.Event.Place.FacebookId)
                    @Html.HiddenFor(m => m.Event.Place.Public)
                    @Html.HiddenFor(m => m.Event.Place.Country)
                    @Html.HiddenFor(m => m.Event.Place.Longitude)
                    @Html.HiddenFor(m => m.Event.Place.Latitude)
                    @Html.HiddenFor(m => m.Event.Place.Filename)
                    @Html.HiddenFor(m => m.Event.Place.ThumbnailFilename)
                    <div class="col-md-10 col-lg-9">
                        <div id="existinglocationdiv">
                            <div class="row">
                                <h3>Pick an Existing Location</h3><br />
                                @if (Model.Places != null)
                                {
                                    @Html.DropDownListFor(model => model.Event.PlaceId, Model.Places.Select(p => new SelectListItem() { Text = p.Name, Value = p.Id.ToString() }), null, new { @class = "form-control", @id = "ExistingPlace" })
                                }
                            </div>
                        </div>
                        <div id="ordiv" class="row">
                            <h3>Or</h3>
                        </div>
                        <div id="newlocationdiv">
                            <div class="row">
                                <h3>Create a New Location</h3>
                            </div>
                            <div class="row" id="newplace">
                                @Html.HiddenFor(m => m.Event.Place.Id)
                                @Html.HiddenFor(m => m.Event.Place.Website)
                                @Html.HiddenFor(m => m.Event.Place.FacebookLink)
                                <div style="margin-bottom: 2px;">
                                    @if (Model.Event.Place.Name == null)
                                    {
                                        @Html.EditorFor(model => model.Event.Place.Name, new { htmlAttributes = new { @class = "form-control", @placeholder = "Place Name" } })
                                        @Html.ValidationMessageFor(model => model.Event.Place.Name, "", new { @class = "text-danger" })
                                    }
                                    else
                                    {
                                        @Html.HiddenFor(m => m.Event.Place.Name)
                                        @Html.DisplayFor(m => m.Event.Place.Name)
                                    }
                                </div>
                                <div style="margin-bottom: 2px;">
                                    @if (Model.Event.Place.FacebookId == null)
                                    {
                                        @Html.EnumDropDownListFor(model => model.Event.Place.PlaceType, "- Select a Place Type-", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.Event.Place.PlaceType, "", new { @class = "text-danger" })
                                    }
                                    else
                                    {
                                        @Html.HiddenFor(m => m.Event.Place.PlaceType)
                                        @Html.DisplayFor(m => m.Event.Place.PlaceType)
                                    }
                                </div>
                                <div style="margin-bottom: 2px;">
                                    @if (Model.Event.Place.Address == null)
                                    {
                                        @Html.EditorFor(model => model.Event.Place.Address, new { htmlAttributes = new { @class = "form-control", @placeholder = "Address" } })
                                        @Html.ValidationMessageFor(model => model.Event.Place.Address, "", new { @class = "text-danger" })
                                    }
                                    else
                                    {
                                        @Html.HiddenFor(m => m.Event.Place.Address)
                                        @Html.DisplayFor(m => m.Event.Place.Address)
                                    }
                                </div>
                                <div style="margin-bottom: 2px;">
                                    @if (Model.Event.Place.City == null)
                                    {
                                        @Html.EditorFor(model => model.Event.Place.City, new { htmlAttributes = new { @class = "form-control", @placeholder = "City" } })
                                        @Html.ValidationMessageFor(model => model.Event.Place.City, "", new { @class = "text-danger" })
                                    }
                                    else
                                    {
                                        @Html.HiddenFor(m => m.Event.Place.City)
                                        @Html.DisplayFor(m => m.Event.Place.City)
                                    }
                                </div>
                                <div style="margin-bottom: 2px;">
                                    @if (Model.Event.Place.State == null)
                                    {
                                        @Html.EnumDropDownListFor(model => model.Event.Place.State, "- Select a State-", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.Event.Place.State, "", new { @class = "text-danger" })
                                    }
                                    else
                                    {
                                        @Html.HiddenFor(m => m.Event.Place.State)
                                        @Html.DisplayFor(m => m.Event.Place.State)
                                    }
                                </div>
                                <div style="margin-bottom: 2px;">
                                    @if (Model.Event.Place.Zip == null)
                                    {
                                        @Html.EditorFor(model => model.Event.Place.Zip, new { htmlAttributes = new { @class = "form-control", @placeholder = "Zipcode" } })
                                        @Html.ValidationMessageFor(model => model.Event.Place.Zip, "", new { @class = "text-danger" })
                                    }
                                    else
                                    {
                                        @Html.HiddenFor(m => m.Event.Place.Zip)
                                        @Html.DisplayFor(m => m.Event.Place.Zip)
                                    }
                                </div>
                            </div>
                            @if (Model.Event.FacebookId != null)
                            {
                                <div class="row">
                                    <img src="https://maps.googleapis.com/maps/api/staticmap?center=@Model.Event.Place.Latitude,@Model.Event.Place.Longitude&zoom=10&size=200x100&maptype=roadmap&markers=color:red%7Clabel:A%7C @Model.Event.Place.Latitude, @Model.Event.Place.Longitude">
                                </div>
                            }
                        </div>
                    </div>*@
                </div>
                <div class="col-md-10 col-lg-9" style="margin-top: 5px;">
                <input id="btnlocationprev" type="button" class="prev btn btn-primary" value="Previous" />
                <input id="btnlocationnext" type="button" class="next btn btn-primary" style="display: none" value="Next" disabled="disabled" />
        </div>
    </div>
            <div id="wizticketsdiv" class="step" style="display:none">
                <h2>Step: Tickets</h2>
                <div class="col-lg-12 col-md-12" style="margin-bottom: 5px;">
                    <div class="form-horizontal">
                        <div class="form-group">
                            @Html.DropDownListFor(m => m.UseSchoolTickets, new SelectList(new List<SelectListItem>() { new SelectListItem() { Text = "Use Existing School Tickets", Value = "true" }, new SelectListItem() { Text = "Set up New Ticket for this Event", Value = "false" } }, "Value", "Text").AsEnumerable(), null, new { @class = "form-control" })
                        </div>
                        <div id="newticketdiv" class="panel" style="display: none;">
                            <h4>New Event Ticket</h4>
                            <hr />
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="form-group">
                                @Html.LabelFor(model => model.TicketQuantity, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.TicketQuantity, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.TicketQuantity, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.TicketPrice, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.TicketPrice, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.TicketPrice, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-10 col-lg-9" style="margin-top: 5px;">
                    <input id="btnticketsprev" type="button" class="prev btn btn-primary" value="Previous" />
                    <input type="submit" id="finish" value="Save Event" class="btn btn-primary" />
                </div>
            </div>

    @*<input type="button" class="prev btn btn-primary" style="display: none" value="Previous" />
    <input type="button" class="next btn btn-primary" style="display: none" value="Next" disabled="disabled" />*@
            @*<input type="submit" id="finish" value="Save Event" class="btn btn-primary" style="display: none;" />*@
        </div>
        }
        <a class="btn btn-warning" href="@Url.Action("Home", Session["CurrentRole"] != null ? Session["CurrentRole"].ToString() : "Dancer", new { username = User.Identity.Name })" style="float: right;">Cancel</a>


    </div>
</div>