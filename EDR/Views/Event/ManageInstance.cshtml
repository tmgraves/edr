@model EDR.Models.ViewModels.EventInstanceManageViewModel

@{
    ViewBag.Title = "ManageInstance";

    var eventType = Model.Instance.Event is EDR.Models.Class ? EDR.Enums.EventType.Class : EDR.Enums.EventType.Social;
}
@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/foolproof")
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css" />
    @Scripts.Render("~/bundles/jqueryUI")
    @Scripts.Render("~/bundles/GeoComplete")
    <script src="https://maps.googleapis.com/maps/api/js?sensor=false&amp;libraries=places&key=@System.Configuration.ConfigurationManager.AppSettings["GoogleAPIKey"]"></script>
    @Scripts.Render("~/bundles/TimePicker")
    @Styles.Render("~/Content/TimePickercss")

<script>
    $.validator.setDefaults({
        ignore: ""
    })
    $(function () {
        $('#saveform.main').valid();

        $('#btnEdit').click(function () {
            $('#viewdiv').hide();
            $('#editdiv').show();
            try {
                var valid = $('#saveform.main').valid();
            }
            catch (err) {
                document.getElementById("demo").innerHTML = err.message;
            }
        });
        $('#btncanceledit').click(function () {
            $('#viewdiv').show();
            $('#editdiv').hide();
        });
    });

    //$('.time').change(function () {
    //    var start = $('.timeelement.begintime');
    //    var end = $('.timeelement.endtime');
    //    var shour = $('.time.hour.start option:selected').val();
    //    var smin = $('.time.minute.start option:selected').val();
    //    var sampm = $('.time.ampm.start option:selected').val();
    //    var ehour = $('.time.hour.end option:selected').val();
    //    var emin = $('.time.minute.end option:selected').val();
    //    var eampm = $('.time.ampm.end option:selected').val();

    //    var time = new Date();
    //    start.prop('value', new Date(time.getDate().toString() + "/" + time.getMonth().toString() + "/" + time.getYear().toString() + " " + shour.toString() + ":" + smin.toString() + " " + sampm));
    //    end.prop('value', new Date(time.getDate().toString() + "/" + time.getMonth().toString() + "/" + time.getYear().toString() + " " + ehour.toString() + ":" + emin.toString() + " " + eampm));

    //    CheckDates();
    //    var valid = $('#saveform.main').valid();
    //});

    //function CheckDates() {
    //    var start = $('.timeelement.begintime').val();
    //    var end = $('.timeelement.endtime').val();

    //    if (new Date(start) > new Date(end)) {
    //        $('#EndTimevalidationMessage').show();
    //        return false;
    //    }
    //    else {
    //        $('#EndTimevalidationMessage').hide();
    //        return true;
    //    }
    //}
    $(function () {
        $('.start').timepicker({
            'timeFormat': 'h:i A',
            'step': function (i) {
                return 15;
            }
        });
        $('.end').timepicker({
            'timeFormat': 'h:i A',
            'step': function (i) {
                return 15;
            }
        });
        $('.start').timepicker('setTime', new Date($('.timeelement.begintime').val()));
        $('.end').timepicker('setTime', new Date($('.timeelement.endtime').val()));
    });

    $('.timepicker').change(function () {
        var start = new Date($('#Instance_DateTime').val());
        var end = new Date($('#Instance_EndDate').val());
        var startdt = new Date((start.getUTCMonth() + 1).toString() + "/" + start.getUTCDate().toString() + "/" + start.getUTCFullYear().toString() + " " + $('.timepicker.start').val());
        var enddt = new Date((end.getUTCMonth() + 1).toString() + "/" + end.getUTCDate().toString() + "/" + end.getUTCFullYear().toString() + " " + $('.timepicker.end').val());
        $('.timeelement.begintime').prop('value', startdt.toLocaleDateString() + " " + startdt.toLocaleTimeString());
        $('.timeelement.endtime').prop('value', enddt.toLocaleDateString() + " " + enddt.toLocaleTimeString());

        var val = $('#saveform.main').valid();
    });

    $(function () {
        $("#newplace").geocomplete({
            details: "form",
            types: ["geocode", "establishment"],
        })
        .bind("geocode:result", function (event, result) {
            $('#NewPlace_Latitude').prop("value", result.geometry.location.lat());
            $('#NewPlace_Longitude').prop("value", result.geometry.location.lng());

            $('#NewPlace_Name').prop("value", result.name);
            $('#NewPlace_GooglePlaceId').prop("value", result.place_id);
            $('#NewPlace_GoogleUrl').prop("value", result.url);
            $('#NewPlace_Website').prop("value", result.website);
            $('#NewPlace_GoogleRating').prop("value", result.rating);
            //$.each(result.reviews, function (i, review) {
            //    alert(review.text);
            //});
            var street_num;
            var street_name;
            $.each(result.address_components, function (i, address_component) {

                //alert(address_component.types[0]);
                //alert(address_component.long_name);
                if (address_component.types[0] == "street_number") {
                    street_num = address_component.long_name;
                }
                else if (address_component.types[0] == "route") {
                    street_name = address_component.long_name;
                }
                else if (address_component.types[0] == "locality") {
                    $('#NewPlace_City').prop("value", address_component.long_name);
                }
                else if (address_component.types[0] == "administrative_area_level_1") {
                    $('#NewPlace_StateName').prop("value", address_component.long_name);
                }
                else if (address_component.types[0] == "postal_code") {
                    $('#NewPlace_Zip').prop("value", address_component.long_name);
                }
                else if (address_component.types[0] == "country") {
                    $('#NewPlace_Country').prop("value", address_component.long_name);
                }
            });
            //alert(street_num + " " + street_name);
            $('#NewPlace_Address').prop("value", street_num + " " + street_name);
            //  console.log(result);
        });
    });
</script>
}

<ol class="breadcrumb">
    @if (eventType == EDR.Enums.EventType.Class)
    {
        <li>@Html.ActionLink("All Classes", "Learn", "Home")</li>
    }
    else
    {
        <li>@Html.ActionLink("All Socials", "Social", "Home")</li>
    }
    <li>@Html.ActionLink("View " + eventType, "View", "Event", new { id = Model.Instance.Event.Id, eventType = eventType }, null)</li>
    <li>@Html.ActionLink("Manage " + eventType, "Manage", "Event", new { id = Model.Instance.EventId, eventType = eventType }, null)</li>
    <li class="active">Manage Instance</li>
</ol>
<h2>Manage Instance</h2>

<div class="container-fluid">
    <div class="col-lg-6 col-md-6">
        <div class="panel panel-default">
            <div class="panel-body ">
                <h3>Details</h3>
                <div id="viewdiv">
                    <div class="text-right">
                        <input id="btnEdit" type="button" class="btn btn-primary" value="Edit" />
                    </div>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.DisplayName("Event")
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.Instance.Event.Name)
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.DisplayName("Place")
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.Instance.Place.Name)
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                Date
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.Instance.DateTime)
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                End Date
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.Instance.EndDate)
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.DisplayNameFor(model => model.Instance.StartTime)
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.Instance.StartTime)
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.DisplayNameFor(model => model.Instance.EndTime)
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.Instance.EndTime)
                            </dd>
                        </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.Label("Location", htmlAttributes: new { @class = "control-label" })
                        </dt>
                        <dd>
                            @Html.ActionLink(Model.Instance.Place.Name, "Details", "Place", new { id = Model.Instance.Place.Id }, null)<br />
                            @Model.Instance.Place.Address<br />
                            @Model.Instance.Place.City, @Model.Instance.Place.StateName @Model.Instance.Place.Zip<br />
                            @Model.Instance.Place.Country
                        </dd>
                    </dl>
                </div>
                <div id="editdiv" style="display: none;">
                    @Html.ValidationSummary("", new { @class = "text-danger" })
                    @using (Html.BeginForm("SaveInstance", "Event", FormMethod.Post, new { @id = "saveform", @class = "main" }))
                    {
                        @Html.HiddenFor(model => model.Instance.Id)
                        @Html.HiddenFor(model => model.Instance.EventId)
                        @Html.HiddenFor(model => model.Instance.PlaceId)
                        <div class="text-right" style="padding-bottom: 10px;">
                            <input type="submit" id="btnsave" value="Save" class="btn btn-success" />
                            <input id="btncanceledit" type="button" class="btn btn-primary" value="Cancel" />
                        </div>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.DisplayName("Event")
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.Instance.Event.Name)
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.DisplayName("Place")
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.Instance.Place.Name)
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                Date
                            </dt>
                            <dd>
                                @Html.TextBoxFor(m => m.Instance.DateTime, "{0:yyyy-MM-dd}", htmlAttributes: new { @type = "date", @class = "form-control timepicker" })
                                @Html.ValidationMessageFor(model => model.Instance.DateTime, "", new { @class = "text-danger" })
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                End Date
                            </dt>
                            <dd>
                                @Html.TextBoxFor(m => m.Instance.EndDate, "{0:yyyy-MM-dd}", htmlAttributes: new { @type = "date", @class = "form-control timepicker" })
                                @Html.ValidationMessageFor(model => model.Instance.EndDate, "", new { @class = "text-danger" })
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.DisplayNameFor(model => model.Instance.StartTime)
                            </dt>
                            <dd>
                                <p><input id="start" type="text" class="start timepicker form-control" /></p>
                                @Html.HiddenFor(m => m.Instance.StartTime, new { @class = "timeelement begintime" })
                                @Html.ValidationMessageFor(model => model.Instance.StartTime, "", new { @class = "text-danger" })
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.DisplayNameFor(model => model.Instance.EndTime)
                            </dt>
                            <dd>
                                <p><input id="end" type="text" class="end timepicker form-control" /></p>
                                @Html.HiddenFor(m => m.Instance.EndTime, new { @class = "timeelement endtime" })
                                @Html.ValidationMessageFor(model => model.Instance.EndTime, "", new { @class = "text-danger" })
                            </dd>
                        </dl>
                        @Html.HiddenFor(model => model.NewPlace.Name, new { @Value = "New Place" })
                        @Html.HiddenFor(model => model.NewPlace.Address)
                        @Html.HiddenFor(model => model.NewPlace.Address2)
                        @Html.HiddenFor(model => model.NewPlace.City)
                        @Html.HiddenFor(model => model.NewPlace.StateName)
                        @Html.HiddenFor(model => model.NewPlace.Zip)
                        @Html.HiddenFor(model => model.NewPlace.Country)
                        @Html.HiddenFor(model => model.NewPlace.Latitude)
                        @Html.HiddenFor(model => model.NewPlace.Longitude)
                        @Html.HiddenFor(model => model.NewPlace.GooglePlaceId)
                        @Html.HiddenFor(model => model.NewPlace.GoogleUrl)
                        @Html.HiddenFor(model => model.NewPlace.Website)
                        @Html.HiddenFor(model => model.NewPlace.GoogleRating)
                        @*@Html.TextBoxFor(model => model.NewPlace.PlaceType, new { @Value = EDR.Enums.PlaceType.OtherPlace })*@
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.Label("New Location", htmlAttributes: new { @class = "control-label" })
                            </dt>
                            <dd>
                                <input id="newplace" type="text" placeholder="Search for a new Location" class="form-control" />
                            </dd>
                        </dl>

                        <dl class="dl-horizontal">
                            <dt>
                                @Html.Label("Type of Location", htmlAttributes: new { @class = "control-label" })
                            </dt>
                            <dd>
                                @Html.EnumDropDownListFor(model => model.NewPlace.PlaceType, new { @class = "form-control" })
                            </dd>
                        </dl>

                        <dl class="dl-horizontal">
                            <dt>
                                @Html.Label("Location", htmlAttributes: new { @class = "control-label" })
                            </dt>
                            <dd>
                                @Html.TextArea("Location", Model.Instance.Place.Address + "\n" + Model.Instance.Place.City + ", " + Model.Instance.Place.StateName + " " + Model.Instance.Place.Zip + "\n" + Model.Instance.Place.Country, 4, 50, new { @class = "form-control", Name = "formatted_address", @readonly = true })
                            </dd>
                        </dl>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-6 col-md-6">
        <div class="panel panel-default">
            <div class="panel-body ">
                <h3>Registrations</h3>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>
                                Name
                            </th>
                            <th>
                            </th>
                            <th>
                            </th>
                        </tr>
                    </thead>
                    @foreach (var r in Model.Instance.EventRegistrations)
                    {
                        <tr>
                            <td>
                                @r.User.FullName
                            </td>
                            <td>
                                @if (r.Checkedin == null)
                                {
                                    <a class="btn btn-sm btn-primary" title="Checkin" href="@Url.Action("CheckinRegistration", "Event", new { id = r.Id })">
                                        Checkin
                                    </a>
                                }
                                else
                                {
                                    <a class="btn btn-sm btn-info" title="Remove Checkin" href="@Url.Action("CheckinRegistration", "Event", new { id = r.Id })">
                                        Remove Checkin
                                    </a>
                                }
                            </td>
                            <td>
                                <a class="btn btn-sm btn-danger" title="Delete" href="@Url.Action("DeleteRegistration", "Event", new { id = r.Id })" onclick="return confirm('Are you sure you want to DELETE this Registration?')">
                                    Remove
                                </a>
                            </td>
                        </tr>
                    }
                    <tfoot>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>
</div>

