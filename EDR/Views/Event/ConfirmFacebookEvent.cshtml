@model EDR.Models.ViewModels.ConfirmFacebookEvent
@using EDR.Enums
@using MvcCheckBoxList.Model

@{
    ViewBag.Title = "Confirm New Event";
}

<style>
    .radio-list div
    {
        text-align: left;
        white-space: normal;
        vertical-align: text-top;
        position: relative;
        margin-top: 5px;
    }
    .radio-list input[type="radio"] {
        vertical-align: top;
        width: 20px;
        height: 20px;
        position: absolute;
        top: 5px;
        left: 20px;
        z-index: 10;   
    }

    .radio-list label {
        z-index: 5;
        height: 240px;
        text-align: left;
        display:block;
        padding: 5px 40px;
    }

    .radio-list input[type="radio"]:checked + label {
        background-color:#FFCC99;
    }
</style>
@using (Html.BeginForm())
{
@Html.AntiForgeryToken()
@Html.HiddenFor(x => x.Event.PhotoUrl)
@Html.HiddenFor(x => x.Event.FacebookLink)
@Html.HiddenFor(x => x.Event.FacebookId)
@Html.HiddenFor(x => x.Event.Interval)
@Html.HiddenFor(x => x.Event.IsAvailable)
<div class="row">
    <h3>Please Confirm Details for the New @Model.EventType</h3>
    @Html.ValidationSummary("", new { @class = "text-danger" })
    <div class="col-lg-6 col-md-6">
        <div class="row" style="margin-bottom: 5px;">
            @if (Model.EventType == EventType.Class)
            {
                @Html.LabelFor(model => model.ClassType, htmlAttributes: new { @class = "control-label col-lg-3 col-md-2" })
                <div class="col-md-10 col-lg-9">
                    @Html.EnumDropDownListFor(model => model.ClassType, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ClassType, "", new { @class = "text-danger" })
                </div>
            }
            else
            {
                @Html.LabelFor(model => model.SocialType, htmlAttributes: new { @class = "control-label col-lg-3 col-md-2" })
                <div class="col-md-10 col-lg-9">
                    @Html.EnumDropDownListFor(model => model.SocialType, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.SocialType, "", new { @class = "text-danger" })
                </div>
            }
        </div>
        <div class="row" style="margin-bottom: 5px;">
            @Html.HiddenFor(m => m.Event.Name)
            @Html.LabelFor(model => model.Event.Name, htmlAttributes: new { @class = "control-label col-lg-3 col-md-2" })
            <div class="col-md-10 col-lg-9">
                @Html.DisplayFor(model => model.Event.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Event.Name, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row" style="margin-bottom: 5px;">
            @Html.HiddenFor(m => m.Event.StartDate)
            @Html.LabelFor(model => model.Event.StartDate, htmlAttributes: new { @class = "control-label col-lg-3 col-md-2" })
            <div class="col-md-10 col-lg-9">
                @Model.Event.StartDate.ToLongDateString()
                @Html.ValidationMessageFor(model => model.Event.StartDate, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row" style="margin-bottom: 5px;">
            @Html.HiddenFor(m => m.Event.EndDate)
            @Html.LabelFor(model => model.Event.EndDate, htmlAttributes: new { @class = "control-label col-lg-3 col-md-2" })
            <div class="col-md-10 col-lg-9">
                @if (Model.Event.EndDate != null)
                {
                    @(((DateTime)Model.Event.EndDate).ToLongDateString())
                }
                @Html.ValidationMessageFor(model => model.Event.EndDate, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row" style="margin-bottom: 5px;">
            @Html.HiddenFor(m => m.Event.StartTime)
            <label class="control-label col-lg-3 col-md-2">From</label>
            <div class="col-lg-9 col-md-10">
                @if (Model.Event.StartTime != null)
                {
                    @(((DateTime)Model.Event.StartTime).ToShortTimeString())
                }
                @Html.ValidationMessageFor(model => model.Event.StartTime, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row" style="margin-bottom: 5px;">
            @Html.HiddenFor(m => m.Event.EndTime)
            <label class="control-label col-lg-3 col-md-2">To</label>
            <div class="col-lg-9 col-md-10">
                @if (Model.Event.EndTime != null)
                {
                    @(((DateTime)Model.Event.EndTime).ToShortTimeString())
                }
                @Html.ValidationMessageFor(model => model.Event.EndTime, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row" style="margin-bottom: 5px;">
            @Html.LabelFor(model => model.Event.Name, "Dance Styles", htmlAttributes: new { @class = "control-label col-lg-3 col-md-2" })
            <div class="col-md-10 col-lg-9">
                @Html.CheckBoxListFor(model => model.PostedStyles.DanceStyleIds,
                                    model => model.AvailableStyles,
                                    style => style.Id,
                                    style => style.Name,
                                    model => model.SelectedStyles,
                                    new HtmlListInfo(HtmlTag.table, 2, new { @class = "checkboxlist" }, TextLayout.Default))
                @Html.ValidationMessageFor(model => model.PostedStyles, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row" style="margin-bottom: 5px;">
            @Html.LabelFor(model => model.Event.Description, htmlAttributes: new { @class = "control-label col-lg-3 col-md-2" })
            <div class="col-md-10 col-lg-9">
                @Html.DisplayFor(model => model.Event.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Event.Description, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row">
            @Html.Label("Location", htmlAttributes: new { @class = "control-label col-lg-3 col-md-2" })
            @Html.HiddenFor(m => m.Event.Place.FacebookId)
            @Html.HiddenFor(m => m.Event.Place.Public)
            @Html.HiddenFor(m => m.Event.Place.Country)
            @Html.HiddenFor(m => m.Event.Place.Filename)
            @Html.HiddenFor(m => m.Event.Place.ThumbnailFilename)
            <div class="col-md-10 col-lg-9">
                @if (Model.Event.Place.FacebookId == null)
                {
                    <h4>New Place</h4>
                    @Html.EditorFor(model => model.Event.Place.Name, new { htmlAttributes = new { @class = "form-control", @placeholder = "Place Name" } })
                    @Html.ValidationMessageFor(model => model.Event.Place.Name, "", new { @class = "text-danger" })
                    @Html.EditorFor(model => model.Event.Place.Address, new { htmlAttributes = new { @class = "form-control", @placeholder = "Address" } })
                    @Html.ValidationMessageFor(model => model.Event.Place.Address, "", new { @class = "text-danger" })
                    @Html.EditorFor(model => model.Event.Place.City, new { htmlAttributes = new { @class = "form-control", @placeholder = "City" } })
                    @Html.ValidationMessageFor(model => model.Event.Place.City, "", new { @class = "text-danger" })
                    @Html.EnumDropDownListFor(model => model.Event.Place.State, "- Select a State-", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Event.Place.State, "", new { @class = "text-danger" })
                    @Html.EditorFor(model => model.Event.Place.Zip, new { htmlAttributes = new { @class = "form-control", @placeholder = "Zipcode" } })
                }
                else
                {
                    @Html.HiddenFor(m => m.Event.Place.Id)
                    @Html.HiddenFor(m => m.Event.Place.Name)
                    @Html.HiddenFor(m => m.Event.Place.PlaceType)
                    @Html.HiddenFor(m => m.Event.Place.Address)
                    @Html.HiddenFor(m => m.Event.Place.City)
                    @Html.HiddenFor(m => m.Event.Place.State)
                    @Html.HiddenFor(m => m.Event.Place.Zip)
                    @Html.HiddenFor(m => m.Event.Place.Longitude)
                    @Html.HiddenFor(m => m.Event.Place.Latitude)
                    @Html.HiddenFor(m => m.Event.Place.Website)
                    @Html.HiddenFor(m => m.Event.Place.FacebookLink)
                    <h4>@Model.Event.Place.Name</h4>
                    @Model.Event.Place.PlaceType<br />
                    @Model.Event.Place.Address<br />
                    @Model.Event.Place.City@:, @Model.Event.Place.State @Model.Event.Place.Zip<br />
                    <img src="https://maps.googleapis.com/maps/api/staticmap?center=@Model.Event.Place.Latitude,@Model.Event.Place.Longitude&zoom=10&size=200x100&maptype=roadmap&markers=color:red%7Clabel:A%7C @Model.Event.Place.Latitude, @Model.Event.Place.Longitude">
                }
            </div>
        </div>
    </div>
    <div class="col-lg-6 col-md-6">
        <div class="col-lg-12 col-md-12 croppedpic" style="max-width: 100%;">
            <a href="@Model.Event.PhotoUrl" target="_blank"><img src="@(Model.Event.PhotoUrl != null ? Model.Event.PhotoUrl : Url.Content("~/Content/images/MissingImage.jpg"))" /></a>
        </div>
    </div>
    @*<div class="col-lg-12 col-md-12 radio-list">
        <h4>Select a Place for this Event</h4>
        @foreach (var pl in Model.Places)
        {
            <div class="col-lg-4 col-md-4">
                @if (pl.Selected)
                {
                    @Html.RadioButtonFor(m => m.PlaceId, pl.Id, new { id = pl.Id, @checked = true })
                }
                else
                {
                    @Html.RadioButtonFor(m => m.PlaceId, pl.Id, new { id = pl.Id })
                }
                <label class="col-lg-12 col-md-12 btn btn-default" for="@pl.Id">
                    @if(pl.Id == 0)
                    {
                        <h4>New Place</h4>
                        @Html.EditorFor(model => model.NewPlace.Name, new { htmlAttributes = new { @class = "form-control", @placeholder = "Place Name" } })
                        @Html.ValidationMessageFor(model => model.NewPlace.Name, "", new { @class = "text-danger" })
                        @Html.EditorFor(model => model.NewPlace.Address, new { htmlAttributes = new { @class = "form-control", @placeholder = "Address" } })
                        @Html.ValidationMessageFor(model => model.NewPlace.Address, "", new { @class = "text-danger" })
                        @Html.EditorFor(model => model.NewPlace.City, new { htmlAttributes = new { @class = "form-control", @placeholder = "City" } })
                        @Html.ValidationMessageFor(model => model.NewPlace.City, "", new { @class = "text-danger" })
                        @Html.EnumDropDownListFor(model => model.NewPlace.State, "- Select a State-", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.NewPlace.State, "", new { @class = "text-danger" })
                        @Html.EditorFor(model => model.NewPlace.Zip, new { htmlAttributes = new { @class = "form-control", @placeholder = "Zipcode" } })
                    }
                    else
                    {
                        <h4>@pl.Name</h4>
                        @pl.PlaceType<br />
                        @pl.Address<br />
                        @pl.City@:, @pl.State @pl.Zip<br />
                        <img src="https://maps.googleapis.com/maps/api/staticmap?center=@pl.Latitude,@pl.Longitude&zoom=10&size=200x100&maptype=roadmap&markers=color:red%7Clabel:A%7C @pl.Latitude, @pl.Longitude">
                    }
                </label>
            </div>
        }
    </div>*@
    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12" style="margin: 10px;">
        <input type="submit" value="Finish Creating @Model.EventType" class="btn btn-lg btn-primary" />
        @if (Session["MyRole"] != null)
        {
            if (Model.EventType == EventType.Class)
            {
                if ((RoleName)Session["MyRole"] == RoleName.Teacher)
                {
                    <a class="btn btn-lg btn-warning" href="@Url.Action("MyTeach", "Teacher", new { username = User.Identity.Name })">Cancel</a>
                }
                else
                {
                    <a class="btn btn-lg btn-warning" href="@Url.Action("Home", "Owner", new { username = User.Identity.Name })">Cancel</a>
                }
            }
            else
            {
                if ((RoleName)Session["MyRole"] == RoleName.Promoter)
                {
                    <a class="btn btn-lg btn-warning" href="@Url.Action("MySocials", "Promoter", new { username = User.Identity.Name })">Cancel</a>
                }
                else
                {
                    <a class="btn btn-lg btn-warning" href="@Url.Action("Home", "Owner", new { username = User.Identity.Name })">Cancel</a>
                }
            }
        }
    </div>
</div>
}
