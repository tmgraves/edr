@model EDR.Models.ViewModels.ConfirmFacebookEvent
@using EDR.Enums
@using MvcCheckBoxList.Model

@{
    ViewBag.Title = "Confirm New Event";
}

<style>
    input[type="radio"] + label {
        padding: 0px 5px 0px 5px;
        font-weight: normal;
        font-style: italic;
    }

</style>
<script type="text/javascript">

    $(document).ready(function () {
        var date = '@Model.Event.StartDate';
        var res = date.split("-");
        date = new Date(res[1] + "/" + res[2] + "/" + res[0]);
        setInitialLock(date);

        function setInitialLock(date) {
            var weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
            var daysofmonth = ["blank", "1st", "2nd", "3rd", "4th", "5th", "6th", "7th", "8th", "9th", "10th", "11th", "12th", "13th", "14th", "15th", "16th", "17th", "18th", "19th", "20th", "21st", "22nd", "23rd", "24th", "25th", "26th", "27th", "28th", "29th", "30th", "31st"];
            $("#dayofweek").text(weekdays[date.getDay()]);
            //  $("#eventday").text(daysofmonth[date.getDate()] + " of the Month");
            var nth = parseInt(date.getDate() / 7) + 1;

            var cb = $('input[type=checkbox][name="PostedMonthDays"][value="' + nth.toString() + '"]');
            //  var test = $('input[type=checkbox][name="cbtest"]');
            //  alert(cb.attr("value").valueOf());
            //  alert(test.attr("value").valueOf());
            cb.prop("disabled", true);
            var hcb = $('input[type=hidden][id="HiddenMonthDay"]');
            hcb.prop("value", cb.prop("value"));
        }

        function setMonthDay(date) {
            var weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
            var daysofmonth = ["blank", "1st", "2nd", "3rd", "4th", "5th", "6th", "7th", "8th", "9th", "10th", "11th", "12th", "13th", "14th", "15th", "16th", "17th", "18th", "19th", "20th", "21st", "22nd", "23rd", "24th", "25th", "26th", "27th", "28th", "29th", "30th", "31st"];
            $("#dayofweek").text(weekdays[date.getDay()]);
            //  $("#eventday").text(daysofmonth[date.getDate()] + " of the Month");
            var nth = parseInt(date.getDate() / 7) + 1;
            var cb1 = $('input[type=checkbox][name="PostedMonthDays"][value="1"]');
            cb1.prop("disabled", false);
            var cb2 = $('input[type=checkbox][name="PostedMonthDays"][value="2"]');
            cb2.prop("disabled", false);
            var cb3 = $('input[type=checkbox][name="PostedMonthDays"][value="3"]');
            cb3.prop("disabled", false);
            var cb4 = $('input[type=checkbox][name="PostedMonthDays"][value="4"]');
            cb4.prop("disabled", false);
            cb1.prop("checked", "");
            cb2.prop("checked", "");
            cb3.prop("checked", "");
            cb4.prop("checked", "");

            var cb = $('input[type=checkbox][name="PostedMonthDays"][value="' + nth.toString() + '"]');
            //  var test = $('input[type=checkbox][name="cbtest"]');
            //  alert(cb.attr("value").valueOf());
            //  alert(test.attr("value").valueOf());
            cb.prop("checked", "checked");
            cb.prop("disabled", true);
            var hcb = $('input[type=hidden][id="HiddenMonthDay"]');
            //  alert(cb.attr("value"));
            hcb.prop("value", cb.prop("value"));

            //  cb.prop("readonly", "readonly");
            //  alert(cb.attr("readonly").valueOf());
            //  alert(cb.promise("readonly").valueOf());

            //  test.prop("checked", "checked");
            //  .prop("checked",true);
        }

        $('input[name="Event.Recurring"]').click(function () {
            if ($(this).attr("value") == "True") {
                $("#recurring").show();
            }
            if ($(this).attr("value") == "False") {
                $("#recurring").hide();
            }
        });

        $('select[id="Event_Frequency"]').change(function () {
            if ($('option:selected', $(this)).text() == "Daily") {
                $('#frequency').text('Day(s)');
                $("#monthly").hide();
            }
            if ($('option:selected', $(this)).text() == "Weekly") {
                $('#frequency').text('Week(s)');
                $("#monthly").hide();
            }
            if ($('option:selected', $(this)).text() == "Monthly") {
                $('#frequency').text('Month(s)');
                $("#monthly").show();
                var date = $('#Event_StartDate').val();
                var res = date.split("-");
                date = new Date(res[1] + "/" + res[2] + "/" + res[0]);
                setMonthDay(date);
            }
            if ($('option:selected', $(this)).text() == "Yearly") {
                $('#frequency').text('Year(s)');
                $("#monthly").hide();
            }
        });
    });
</script>

@using (Html.BeginForm())
{
@Html.AntiForgeryToken()
@Html.HiddenFor(x => x.Event.PhotoUrl)
@Html.HiddenFor(x => x.Event.FacebookLink)
@Html.HiddenFor(x => x.Event.FacebookId)
@Html.HiddenFor(x => x.Event.Interval)
@Html.HiddenFor(x => x.Event.IsAvailable)
@Html.HiddenFor(x => x.HiddenMonthDay)

    <script type="text/javascript">
        $(function () {
            $('.wizard .prev').click(function () {
                $('#finish').hide();
                var wizard = $(this).parent('.wizard');

                $('.step.active', wizard).hide();

                var currentStep = $('.step.active', wizard);
                currentStep.hide();
                currentStep.removeClass('active');

                var newStep = currentStep.prev('.step', wizard);
                newStep.addClass('active');
                newStep.show();

                if ($('.step:first', wizard)[0] == newStep[0]) {
                    $(this).hide();
                }

                $('.next', wizard).show();
            });

            $('.wizard .next').click(function () {
                var wizard = $(this).parent('.wizard');

                $('.step.active', wizard).hide();

                var currentStep = $('.step.active', wizard);
                currentStep.hide();
                currentStep.removeClass('active');

                var newStep = currentStep.next('.step', wizard);
                newStep.addClass('active');
                newStep.show();

                if ($('.step:last', wizard)[0] == newStep[0]) {
                    $(this).hide();
                    $('#finish').show();
                }

                $('.prev', wizard).show();
            });
        });
        $(function () {
            $('#Type').change(function () {
                var eventtype = $("#Type option:selected").val();
                //  Class Type
                if (eventtype == "1")
                {
                    $('#classtype').show();
                    $('#socialtype').hide();

                    var classtype = $("#ClassType option:selected").val();
                    var btn = $('.wizard .next');
                    if (classtype != "") {
                        btn.prop('disabled', false);
                    }
                    else {
                        btn.prop('disabled', true);
                    }

                    //  Show Skill Level
                    $('#skilllevel').show();
                }
                else if (eventtype == "0")
                {
                    $('#classtype').hide();
                    $('#socialtype').show();

                    var socialtype = $("#SocialType option:selected").val();
                    var btn = $('.wizard .next');
                    if (socialtype != "") {
                        btn.prop('disabled', false);
                    }
                    else {
                        btn.prop('disabled', true);
                    }
                    $('#skilllevel').hide();
                }
                else
                {
                    $('#classtype').hide();
                    $('#socialtype').hide();
                    $('#skilllevel').hide();
                }
            });
        });
        $(function () {
            $('#ClassType').change(function () {
                var classtype = $("#ClassType option:selected").val();
                var btn = $('.wizard .next');
                if (classtype != "") {
                    btn.prop('disabled', false);
                }
                else
                {
                    btn.prop('disabled', true);
                }
            });
        });
        $(function () {
            $('#SocialType').change(function () {
                var classtype = $("#SocialType option:selected").val();
                var btn = $('.wizard .next');
                if (classtype != "") {
                    btn.prop('disabled', false);
                }
                else {
                    btn.prop('disabled', true);
                }
            });
        });

        $(document).ready(function () {
            var eventtype = $("#Type option:selected").val();
            //  Class Type
            if (eventtype == "1") {
                $('#classtype').show();
                $('#socialtype').hide();
                $('#skilllevel').show();

                var classtype = $("#ClassType option:selected").val();
                var btn = $('.wizard .next');
                if (classtype != "") {
                    btn.prop('disabled', false);
                }
                else {
                    btn.prop('disabled', true);
                }
            }
            else if (eventtype == "0") {
                $('#classtype').hide();
                $('#socialtype').show();
                $('#skilllevel').hide();

                var socialtype = $("#SocialType option:selected").val();
                var btn = $('.wizard .next');
                if (socialtype != "") {
                    btn.prop('disabled', false);
                }
                else {
                    btn.prop('disabled', true);
                }
            }
            else {
                $('#classtype').hide();
                $('#socialtype').hide();
                $('#skilllevel').hide();
            }
        });
    </script>

<div class="row" style="margin: 10px;">
    <div class="col-lg-6 col-md-6">
        @Html.ValidationSummary("", new { @class = "text-danger" })
        <div class="wizard">
            <div class="step active">
                <h2>Step 1: Event Type</h2>
                <div class="row" style="margin-bottom: 5px;">
                    <div class="col-md-10 col-lg-9">
                        @Html.EnumDropDownListFor(model => model.Type, "-- Select a Event Type --", htmlAttributes: new { @class = "form-control" })
                    </div>
                    <div class="col-md-10 col-lg-9">
                        <div class="row" style="margin-top: 5px;">
                            <div id="classtype" hidden="hidden">
                                <div class="col-md-10 col-lg-9">
                                    @Html.EnumDropDownListFor(model => model.ClassType, "-- Select a Class Type --", htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.ClassType, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div id="socialtype" hidden="hidden">
                                <div class="col-md-10 col-lg-9">
                                    @Html.EnumDropDownListFor(model => model.SocialType, "-- Select a Social Type --", htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.SocialType, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
            <div class="step" style="display:none">
                <h2>Step 2: Event Date/Time</h2>
                <div class="row" style="margin-bottom: 5px;">
                    @Html.HiddenFor(m => m.Event.StartDate)
                    @Html.LabelFor(model => model.Event.StartDate, htmlAttributes: new { @class = "control-label col-lg-3 col-md-2" })
                    <div class="col-md-10 col-lg-9">
                        @Model.Event.StartDate.ToLongDateString()
                        @Html.ValidationMessageFor(model => model.Event.StartDate, "", new { @class = "text-danger" })
                    </div>
                </div>
                @if (Model.Event.EndDate != null)
                {
                    <div class="row" style="margin-bottom: 5px;">
                        @Html.HiddenFor(m => m.Event.EndDate)
                        @Html.LabelFor(model => model.Event.EndDate, htmlAttributes: new { @class = "control-label col-lg-3 col-md-2" })
                        <div class="col-md-10 col-lg-9">
                            @Html.EditorFor(model => model.Event.EndDate, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Event.EndDate, "", new { @class = "text-danger" })
                        </div>
                    </div>
                }
                @if (Model.Event.StartTime != null)
                {
                    <div class="row" style="margin-bottom: 5px;">
                        @Html.HiddenFor(m => m.Event.StartTime)
                        <label class="control-label col-lg-3 col-md-2">From</label>
                        <div class="col-lg-9 col-md-10">
                            @(((DateTime)Model.Event.StartTime).ToShortTimeString())
                            @Html.ValidationMessageFor(model => model.Event.StartTime, "", new { @class = "text-danger" })
                        </div>
                    </div>
                }
                @if (Model.Event.EndTime != null)
                {
                    <div class="row" style="margin-bottom: 5px;">
                        @Html.HiddenFor(m => m.Event.EndTime)
                        <label class="control-label col-lg-3 col-md-2">To</label>
                        <div class="col-lg-9 col-md-10">
                            @(((DateTime)Model.Event.EndTime).ToShortTimeString())
                            @Html.ValidationMessageFor(model => model.Event.EndTime, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row" style="margin-bottom: 5px;">
                        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                            @Html.LabelFor(model => model.Event.Recurring, htmlAttributes: new { @class = "control-label text-danger text-uppercase" })
                            <span>
                                @if (!Model.Event.Recurring)
                                {
                                    @Html.RadioButtonFor(model => model.Event.Recurring, false, new { @checked = "checked", id = "recurring_no" })
                                }
                                else
                                {
                                    @Html.RadioButtonFor(model => model.Event.Recurring, false, new { id = "recurring_no" })
                                }
                                <label for="recurring_no">NO</label>
                            </span>
                            <span>
                                @if (Model.Event.Recurring)
                                {
                                    @Html.RadioButtonFor(model => model.Event.Recurring, true, new { @checked = "checked", id = "recurring_yes" })
                                }
                                else
                                {
                                    @Html.RadioButtonFor(model => model.Event.Recurring, true, new { id = "recurring_yes" })
                                }
                                <label for="recurring_yes">YES</label>
                            </span>
                        </div>
                        <div class="row col-lg-12 col-md-12">
                            <div class="col-lg-3 col-md-3"></div>
                            <div class="col-md-9 col-lg-9">
                                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12" id="recurring" style="margin-top: 5px;" @(Model.Event.Recurring ? "" : "hidden")>
                                    <div class="row">
                                        <span class="control-label col-lg-3 col-md-3 text-warning">Repeats</span>
                                        <div class="col-md-9 col-lg-9">
                                            @Html.EnumDropDownListFor(model => model.Event.Frequency, htmlAttributes: new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.Event.Frequency, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="row" style="margin-top: 5px;">
                                        <span class="control-label col-lg-3 col-md-3 text-warning">Every</span>
                                        <div class="col-md-4 col-lg-4">
                                            @Html.TextBoxFor(model => model.Event.Interval, htmlAttributes: new { @class = "form-control", @type = "number", @min = "1", @max = "200" })
                                            @Html.ValidationMessageFor(model => model.Event.Interval, "", new { @class = "text-danger" })
                                        </div>
                                        <label class="text-warning" id="frequency" style="font-weight: normal; height: 30px; vertical-align: bottom;">
                                            @if (Model.Event.Frequency == EDR.Models.Frequency.Daily)
                                            {
                                                @: Day(s)
                                        }
                                            else if (Model.Event.Frequency == EDR.Models.Frequency.Weekly)
                                            {
                                                @: Week(s)
                                        }
                                            else if (Model.Event.Frequency == EDR.Models.Frequency.Monthly)
                                            {
                                                @: Month(s)
                                        }
                                            else if (Model.Event.Frequency == EDR.Models.Frequency.Yearly)
                                            {
                                                @: Year(s)
                                        }
                                        </label>
                                    </div>
                                    <div class="row col-lg-12 col-md-12" id="monthly" style="padding-top: 5px; margin-top: 5px;" @(Model.Event.Frequency == EDR.Models.Frequency.Monthly ? "" : "hidden='hidden'")>
                                        <div class="panel panel-info">
                                            <div class="panel-body">
                                                <div class="row">
                                                    <span class="control-label col-lg-3 col-md-3 text-warning">On the </span>
                                                    <span class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
                                                        @Html.CheckBoxListFor(model => model.PostedMonthDays,
                                                                model => model.MonthDays,
                                                                item => item.Value,
                                                                item => item.Text,
                                                                model => model.SelectedMonthDays,
                                                                new HtmlListInfo(HtmlTag.table, 2, new { @class = "checkboxlist text-warning" }, TextLayout.Default))
                                                    </span>
                                                    <label class="col-lg-1 col-md-1 text-warning" id="dayofweek">@Model.Event.StartDate.DayOfWeek</label>
                                                    @Html.HiddenFor(x => x.HiddenMonthDay)
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="step" style="display:none">
                <h2>Step 3: Location</h2>
                <div class="row" style="margin-bottom: 5px;">
                    @Html.Label("Location", htmlAttributes: new { @class = "control-label col-lg-3 col-md-2" })
                    @Html.HiddenFor(m => m.Event.Place.FacebookId)
                    @Html.HiddenFor(m => m.Event.Place.Public)
                    @Html.HiddenFor(m => m.Event.Place.Country)
                    @Html.HiddenFor(m => m.Event.Place.Longitude)
                    @Html.HiddenFor(m => m.Event.Place.Latitude)
                    @Html.HiddenFor(m => m.Event.Place.Filename)
                    @Html.HiddenFor(m => m.Event.Place.ThumbnailFilename)
                    <div class="col-md-10 col-lg-9">
                        @Html.HiddenFor(m => m.Event.Place.Id)
                        @Html.HiddenFor(m => m.Event.Place.Website)
                        @Html.HiddenFor(m => m.Event.Place.FacebookLink)
                        <div class="row">
                            @if (Model.Event.Place.Name == null)
                            {
                                @Html.EditorFor(model => model.Event.Place.Name, new { htmlAttributes = new { @class = "form-control", @placeholder = "Place Name" } })
                                @Html.ValidationMessageFor(model => model.Event.Place.Name, "", new { @class = "text-danger" })
                            }
                            else
                            {
                                @Html.HiddenFor(m => m.Event.Place.Name)
                                @Html.DisplayFor(m => m.Event.Place.Name)
                            }
                        </div>
                        <div class="row">
                            @if (Model.Event.Place.FacebookId == null)
                            {
                                @Html.EnumDropDownListFor(model => model.Event.Place.PlaceType, "- Select a Place Type-", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Event.Place.PlaceType, "", new { @class = "text-danger" })
                            }
                            else
                            {
                                @Html.HiddenFor(m => m.Event.Place.PlaceType)
                                @Html.DisplayFor(m => m.Event.Place.PlaceType)
                            }
                        </div>
                        <div class="row">
                            @if (Model.Event.Place.Address == null)
                            {
                                @Html.EditorFor(model => model.Event.Place.Address, new { htmlAttributes = new { @class = "form-control", @placeholder = "Address" } })
                                @Html.ValidationMessageFor(model => model.Event.Place.Address, "", new { @class = "text-danger" })
                            }
                            else
                            {
                                @Html.HiddenFor(m => m.Event.Place.Address)
                                @Html.DisplayFor(m => m.Event.Place.Address)
                            }
                        </div>
                        <div class="row">
                            @if (Model.Event.Place.City == null)
                            {
                                @Html.EditorFor(model => model.Event.Place.City, new { htmlAttributes = new { @class = "form-control", @placeholder = "City" } })
                                @Html.ValidationMessageFor(model => model.Event.Place.City, "", new { @class = "text-danger" })
                            }
                            else
                            {
                                @Html.HiddenFor(m => m.Event.Place.City)
                                @Html.DisplayFor(m => m.Event.Place.City)
                            }
                        </div>
                        <div class="row">
                            @if (Model.Event.Place.State == null)
                            {
                                @Html.EnumDropDownListFor(model => model.Event.Place.State, "- Select a State-", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Event.Place.State, "", new { @class = "text-danger" })
                            }
                            else
                            {
                                @Html.HiddenFor(m => m.Event.Place.State)
                                @Html.DisplayFor(m => m.Event.Place.State)
                            }
                        </div>
                        <div class="row">
                            @if (Model.Event.Place.Zip == null)
                            {
                                @Html.EditorFor(model => model.Event.Place.Zip, new { htmlAttributes = new { @class = "form-control", @placeholder = "Zipcode" } })
                                @Html.ValidationMessageFor(model => model.Event.Place.Zip, "", new { @class = "text-danger" })
                            }
                            else
                            {
                                @Html.HiddenFor(m => m.Event.Place.Zip)
                                @Html.DisplayFor(m => m.Event.Place.Zip)
                            }
                        </div>
                        <div class="row">
                            <img src="https://maps.googleapis.com/maps/api/staticmap?center=@Model.Event.Place.Latitude,@Model.Event.Place.Longitude&zoom=10&size=200x100&maptype=roadmap&markers=color:red%7Clabel:A%7C @Model.Event.Place.Latitude, @Model.Event.Place.Longitude">
                        </div>
                    </div>
                </div>
            </div>
            <div class="step" style="display:none">
                <h2>Step 4: Confirm Event</h2>
                <div class="row" style="margin-bottom: 5px;">
                    @Html.HiddenFor(m => m.Event.Name)
                    @Html.LabelFor(model => model.Event.Name, htmlAttributes: new { @class = "control-label col-lg-3 col-md-2" })
                    <div class="col-md-10 col-lg-9">
                        @Html.DisplayFor(model => model.Event.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Event.Name, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div id="skilllevel" class="row" style="margin-bottom: 5px;" hidden="hidden">
                    @Html.LabelFor(m => m.SkillLevel, htmlAttributes: new { @class = "control-label col-lg-3 col-md-2" })
                    <div class="col-md-10 col-lg-9">
                        @{
                            var list = new SelectList(new List<int> { 1, 2, 3, 4, 5 });
                          }
                        @Html.DropDownListFor(m => m.SkillLevel, new SelectList(new List<int> { 1, 2, 3, 4, 5 }), "-- Select a Skill Level --", new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.SkillLevel, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row" style="margin-bottom: 5px;">
                    @Html.LabelFor(model => model.Event.Name, "Dance Styles", htmlAttributes: new { @class = "control-label col-lg-3 col-md-2" })
                    <div class="col-md-10 col-lg-9">
                        @Html.CheckBoxListFor(model => model.PostedStyles.DanceStyleIds,
                                    model => model.AvailableStyles,
                                    style => style.Id,
                                    style => style.Name,
                                    model => model.SelectedStyles,
                                    new HtmlListInfo(HtmlTag.table, 2, new { @class = "checkboxlist" }, TextLayout.Default))
                        @Html.ValidationMessageFor(model => model.PostedStyles, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row" style="margin-bottom: 5px;">
                    @Html.HiddenFor(model => model.Event.Description)
                    @Html.LabelFor(model => model.Event.Description, htmlAttributes: new { @class = "control-label col-lg-3 col-md-2" })
                    <div class="col-md-10 col-lg-9">
                        @Html.DisplayFor(model => model.Event.Description, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Event.Description, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>

            <input type="button" class="prev btn btn-primary" style="display: none" value="Previous" />
            <input type="button" class="next btn btn-primary" value="Next" disabled="disabled" />
            <input type="submit" id="finish" value="Save Event" class="btn btn-primary" style="display: none;" />
            <a class="btn btn-warning" href="@Url.Action("Home", Session["CurrentRole"] != null ? Session["CurrentRole"].ToString() : "Dancer", new { username = User.Identity.Name })" style="float: right;">Cancel</a>
        </div>
    </div>
    
    <div class="col-lg-6 col-md-6">
        <div class="col-lg-12 col-md-12 croppedpic" style="max-width: 100%; margin: 10px;">
            <a href="@Model.Event.PhotoUrl" target="_blank"><img src="@(Model.Event.PhotoUrl != null ? Model.Event.PhotoUrl : Url.Content("~/Content/images/MissingImage.jpg"))" /></a>
        </div>
    </div>
    @*<div class="col-lg-12 col-md-12 radio-list">
        <h4>Select a Place for this Event</h4>
        @foreach (var pl in Model.Places)
        {
            <div class="col-lg-4 col-md-4">
                @if (pl.Selected)
                {
                    @Html.RadioButtonFor(m => m.PlaceId, pl.Id, new { id = pl.Id, @checked = true })
                }
                else
                {
                    @Html.RadioButtonFor(m => m.PlaceId, pl.Id, new { id = pl.Id })
                }
                <label class="col-lg-12 col-md-12 btn btn-default" for="@pl.Id">
                    @if(pl.Id == 0)
                    {
                        <h4>New Place</h4>
                        @Html.EditorFor(model => model.NewPlace.Name, new { htmlAttributes = new { @class = "form-control", @placeholder = "Place Name" } })
                        @Html.ValidationMessageFor(model => model.NewPlace.Name, "", new { @class = "text-danger" })
                        @Html.EditorFor(model => model.NewPlace.Address, new { htmlAttributes = new { @class = "form-control", @placeholder = "Address" } })
                        @Html.ValidationMessageFor(model => model.NewPlace.Address, "", new { @class = "text-danger" })
                        @Html.EditorFor(model => model.NewPlace.City, new { htmlAttributes = new { @class = "form-control", @placeholder = "City" } })
                        @Html.ValidationMessageFor(model => model.NewPlace.City, "", new { @class = "text-danger" })
                        @Html.EnumDropDownListFor(model => model.NewPlace.State, "- Select a State-", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.NewPlace.State, "", new { @class = "text-danger" })
                        @Html.EditorFor(model => model.NewPlace.Zip, new { htmlAttributes = new { @class = "form-control", @placeholder = "Zipcode" } })
                    }
                    else
                    {
                        <h4>@pl.Name</h4>
                        @pl.PlaceType<br />
                        @pl.Address<br />
                        @pl.City@:, @pl.State @pl.Zip<br />
                        <img src="https://maps.googleapis.com/maps/api/staticmap?center=@pl.Latitude,@pl.Longitude&zoom=10&size=200x100&maptype=roadmap&markers=color:red%7Clabel:A%7C @pl.Latitude, @pl.Longitude">
                    }
                </label>
            </div>
        }
    </div>*@
    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12" style="margin: 10px;">
        @*@if (Session["CurrentRole"] != null)
        {
            if (Model.EventType == EventType.Class)
            {
                if (Model.User.CurrentRole.Name == "Teacher")
                {
                }
                else
                {
                    <a class="btn btn-lg btn-warning" href="@Url.Action("Home", "Owner", new { username = User.Identity.Name })">Cancel</a>
                }
            }
            else
            {
                if (Model.User.CurrentRole.Name == "Promoter")
                {
                    <a class="btn btn-lg btn-warning" href="@Url.Action("MySocials", "Promoter", new { username = User.Identity.Name })">Cancel</a>
                }
                else
                {
                    <a class="btn btn-lg btn-warning" href="@Url.Action("Home", "Owner", new { username = User.Identity.Name })">Cancel</a>
                }
            }
        }*@
    </div>
</div>
}
