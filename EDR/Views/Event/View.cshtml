@model EDR.Models.ViewModels.EventViewModel
@using EDR.Utilities
@using EDR.Models
@using EDR.Enums

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var eventType = Model.Class != null ? EventType.Class : EventType.Social;
    if (Model.Class != null)
    {
        ViewBag.Title = "Class Details";
    }
    else if (Model.Social != null)
    {
        ViewBag.Title = "Social Details";
    }
}

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.unobtrusive-ajax.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.form.js")" type="text/javascript"></script>

<script type="text/javascript">
    function done(form) {
        $('#reviewform')[0].reset();
        $('#reviewform')[0].disabled = true;
        $('#reviewinput')[0].hidden = true;
    }

    function OnSuccess(response) {
        alert(response);
        var y = document.getElementById("Review_ReviewText");
        alert(y.innerHTML)
        document.getElementByName('Review_ReviewText').value = '';
    }

    function OnFailure(response) {
        alert("Whoops! That didn't go so well did it?");
    }

</script>
<style type="text/css">
        /*
      Hide radio button (the round disc)
      we will use just the label to create pushbutton effect
    */
        input[type=radio] {
            display: none;
            margin: 10px;
        }

            /*
      Change the look'n'feel of labels (which are adjacent to radiobuttons).
      Add some margin, padding to label
    */
            input[type=radio] + label {
                display: inline-block;
                margin: -2px;
                padding: 4px 12px;
                background-color: #fff;
                border-color: #ddd;
            }
            /*
     Change background color for label next to checked radio button
     to make it look like highlighted button
    */
            input[type=radio]:checked + label {
                background-image: none;
                background-color: #d0d0d0;
            }
</style>

<div class="row">
    <h1 class="page-header">
        @Model.Event.Name
    @if (User.Identity != null && ((Model.Event is Class && Model.Class.Teachers.Where(x => x.ApplicationUser.UserName == User.Identity.Name).Count() == 1)) || (Model.Event is Social && Model.Social.Promoters.Where(x => x.ApplicationUser.UserName == User.Identity.Name).Count() == 1))
    {
        @*<a style="font-size: medium;" href="@Url.Action("Edit", "Dancer")">Edit Profile</a>*@
    <a class="btn btn-info" title="Edit" href="@Url.Action("Edit", "Event", new { id = Model.Event.Id })">
        <i class="glyphicon glyphicon-pencil" style="vertical-align: middle;"></i>
        <span class="sr-only">Edit</span>
    </a>
    }
    <small>at @Html.ActionLink(@Model.Event.Place.Name, "Details", "Place", new { id = Model.Event.Place.Id }, null)</small>
</h1>
</div>
<div class="row">
    <div class="well col-lg-12 col-md-12 col-sm-12 col-xs-12">
        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
            <div class="row">
                <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 text-center">
                    @if (Model.Event.PhotoUrl != null)
                    {
                        <img class="img-thumbnail" src="@Url.Content(Model.Event.PhotoUrl)" />
                    }
                    else
                    {
                        <img class="img-thumbnail" src="~/Content/images/MissingImage.jpg" />
                    }
                    @if (User.Identity != null && ((Model.Event is Class && Model.Class.Teachers.Where(x => x.ApplicationUser.UserName == User.Identity.Name).Count() == 1)) || (Model.Event is Social && Model.Social.Promoters.Where(x => x.ApplicationUser.UserName == User.Identity.Name).Count() == 1))
                    {
                        <p>
                            <a style="font-size: small;" href="@Url.Action("ChangePicture", "Event", new { id = Model.Event.Id })">Change Picture</a>
                        </p>
                    }
                    <a target="_blank" href="https://maps.google.com/?q=@Model.Event.Place.Latitude,@Model.Event.Place.Longitude">
                        <img class="img-thumbnail" src="https://maps.googleapis.com/maps/api/staticmap?center=@Model.Event.Place.Latitude,@Model.Event.Place.Longitude&zoom=10&size=250x100&maptype=roadmap&markers=color:red%7Clabel:A%7C @Model.Event.Place.Latitude, @Model.Event.Place.Longitude">
                    </a>
                </div>
                <div class="col-lg-6 col-md-6 col-sm-6 col-xs-6">
                    <div class="row">
                        <label class="control-label col-lg-3 col-md-3 col-sm-3 col-xs-3">
                            Date:
                        </label>
                        <div class="text-success">
                            @if (Model.Event.Recurring)
                            {
                                @Model.Event.NextDate.ToLongDateString() @:(@(Model.Event.Interval == null ? "" : (Model.Event.Interval == 2 ? "Bi-" : (Model.Event.Interval == 3 ? "Tri-" : "")))@Model.Event.Frequency)
                    }
                            else
                            {
                                @Model.Event.StartDate.ToLongDateString()
                            }
                        </div>
                    </div>
                    <div class="row">
                        <label class="control-label col-lg-3 col-md-3 col-sm-3 col-xs-3">
                            Time:
                        </label>
                        <div>
                            @if (Model.Event.Recurring)
                            {
                                @Model.Event.StartDate.ToString("%h:mm tt")@:~@Model.Event.StartDate.AddMinutes(Model.Event.Duration).ToString("%h:mm tt")
                    }
                            else
                            {
                                @Model.Event.StartDate.ToString("%h:mm tt")@:~@Model.Event.StartDate.AddMinutes(Model.Event.Duration).ToString("%h:mm tt")
                    }
                        </div>
                    </div>
                    @if (Model.Event is Class)
                    {
                        <div class="row">
                            <label class="control-label col-lg-3 col-md-3 col-sm-3 col-xs-3">
                                Teachers:
                            </label>
                            <div class="col-lg-9 col-md-9 col-sm-9 col-xs-9">
                                @Html.Partial("~/Views/Shared/_BasicTeacherListPartial.cshtml", Model.Class.Teachers.OrderBy(x => x.ApplicationUser.FullName))
                                <ul class="list-inline">
                                    @if (Model.Class.Teachers.Where(t => t.ApplicationUser.UserName == User.Identity.Name).Count() == 1)
                                    {
                                        foreach (var invite in Model.ClassTeacherInvitations.Where(i => i.Approved == null))
                                        {
                                            <li>
                                                <div class="panel panel-default">
                                                    <div>
                                                        <a class="btn btn-warning" href="@Url.Action("ApproveTeacher", "Event", new { classId = invite.Class.Id, teacherId = invite.Teacher.Id, returnUrl = @Url.Action("View", new { id = @Model.Event.Id }) }) " style="text-decoration: none; width: 100%;">
                                                            Approve Teacher
                                                        </a>
                                                    </div>
                                                    <div style="display: inline-block; vertical-align: top;">
                                                        <a class="btn btn-default" href="@Url.Action("Home", "Teacher", new { username = invite.Teacher.ApplicationUser.UserName }) " style="text-decoration: none;">
                                                            <div class="pull-left" style="height: 40px; width: 40px; overflow: hidden;">
                                                                @if (invite.Teacher.ApplicationUser.UserPictures != null && invite.Teacher.ApplicationUser.UserPictures.Count > 0)
                                                                {
                                                                    <img class="pull-left" style="width: 40px;" src="@Url.Content(invite.Teacher.ApplicationUser.UserPictures.First().ThumbnailFilename)" />
                                                                }
                                                                else
                                                                {
                                                                    <img class="pull-left" style="width: 40px;" src="@Url.Content("~/Content/images/NoPic.png")" />
                                                                }
                                                            </div>
                                                            <span class="text-primary" style="vertical-align: top;">@invite.Teacher.ApplicationUser.FullName</span>
                                                        </a>
                                                    </div>
                                                </div>
                                            </li>
                                        }
                                    }
                                </ul>
                            </div>
                        </div>
                    }
                    <div class="row">
                        <label class="control-label col-lg-3 col-md-3 col-sm-3 col-xs-3">
                            Location:
                        </label>
                        <div>
                            @Model.Event.Place.Address
                            @Model.Event.Place.Address2 ,
                            @Model.Event.Place.City,
                            @Model.Event.Place.State
                            @Model.Event.Place.Zip
                        </div>
                    </div>
                    <div class="row">
                        <label class="control-label col-lg-3 col-md-3 col-sm-3 col-xs-3">
                            Dance Styles:
                        </label>
                        <ul class="list-inline">
                            @foreach (var item in Model.Event.DanceStyles)
                            {
                                <li>@Html.ActionLink(item.Name, "Details", "DanceStyle", new { id = item.Id }, new { @class = "label label-info" })</li>
                            }
                        </ul>
                    </div>
                    @if (Model.Event.FacebookLink != null)
                    {
                        <a class="img-thumbnail" href='@Model.Event.FacebookLink' target="_blank" title="Visit Me On Facebook"><img src="@Url.Content("~/Content/images/facebookSmall.png")" /></a>
                    }
                    <p>@Model.Event.Description</p>
                </div>
                <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3">
                    @if (User.Identity.IsAuthenticated)
                    {
                        <p>
                            @Html.ActionLink("Add to Your Calendar", "Signup", "Event", new { id = Model.Event.Id, returnUrl = @Url.Action("View", new { id = @Model.Event.Id }) }, htmlAttributes: new { @class = "btn btn-primary col-lg-12 col-md-12 col-sm-12 col-xs-12", @style = "margin: 5px" })
                        </p>
                    }
                    @if (Model.Event is Class)
                    {
                        if (User.Identity.IsAuthenticated && User.IsInRole("Teacher") && Model.ClassTeacherInvitations.Where(i => i.Teacher.ApplicationUser.UserName == User.Identity.Name).Count() == 0 && Model.Class.Teachers.Where(t => t.ApplicationUser.UserName == User.Identity.Name).Count() == 0)
                        {
                            <p>
                                @Html.ActionLink("Join As a Teacher", "JoinTeachers", "Event", new { eventId = Model.Event.Id, returnUrl = @Url.Action("View", new { id = @Model.Event.Id }) }, htmlAttributes: new { @class = "btn btn-warning col-lg-12 col-md-12 col-sm-12 col-xs-12", @style = "margin: 5px" })
                            </p>
                        }
                    }
                    @if (User.Identity != null && ((Model.Event is Class && Model.Class.Teachers.Where(x => x.ApplicationUser.UserName == User.Identity.Name).Count() == 1)) || (Model.Event is Social && Model.Social.Promoters.Where(x => x.ApplicationUser.UserName == User.Identity.Name).Count() == 1))
                    {
                        <p>
                            <a class="btn btn btn-danger col-lg-12 col-md-12 col-sm-12 col-xs-12" style="margin: 5px;" title="Delete" href="@Url.Action("Delete", "Event", new { id = Model.Event.Id, returnUrl = Model.ReturnUrl })" onclick="return confirm('Are you sure you want to DELETE this Event?')">
                                <i class="glyphicon glyphicon glyphicon-remove"></i>
                                Delete Event
                            </a>
                        </p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-2 col-md-2 col-sm-2 col-xs-2">
        <div class="row">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h4>Students</h4>
                </div>
                <div class="panel-body">
                    @Html.Partial("~/Views/Shared/Events/_UserListPartial.cshtml", Model.Event.Users)
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-6">
        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-6">
            <h4>
                Pictures
                <a class="btn btn-warning pull-right top-right" title="Add New Picture" href="@Url.Action("PostPicture", "Event", new { id = Model.Event.Id })">
                    <span class="glyphicon glyphicon-plus-sign" aria-hidden="true"></span>
                </a>
            </h4>
            <hr />
            <div style="max-height: 1000px; overflow-y: auto; overflow-x: hidden;">
                @Html.Partial("~/Views/Shared/_PictureListPartial.cshtml", Model.Event.Pictures.OrderByDescending(p => p.PhotoDate))
            </div>
        </div>
        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-6">
            <h4>
                Videos
                <a class="btn btn-warning pull-right top-right" title="Add New Video" href="@Url.Action("PostVideo", "Event", new { id = Model.Event.Id })">
                    <span class="glyphicon glyphicon-plus-sign" aria-hidden="true"></span>
                </a>
            </h4>
            <hr />
            <div style="max-height: 1000px; overflow-y: auto; overflow-x: hidden;">
                @Html.Partial("~/Views/Shared/_VideoListPartial.cshtml", Model.Event.Videos.OrderByDescending(p => p.PublishDate))
            </div>
        </div>
    </div>
    <div class="col-lg-4 col-md-4 col-sm-4 col-xs-4">
        <div id="reviews">
            @Html.Partial("~/Views/Shared/Events/_ReviewsPartial.cshtml", Model.Event.Reviews)
        </div>
        @if (User.Identity.IsAuthenticated)
        {
            if (Model.Event.Reviews.Where(r => r.Author.UserName == User.Identity.Name).Count() == 0)
            {
                <div id="reviewinput" class="panel panel-default col-lg-12 col-md-12 col-sm-12 col-xs-12" style="margin-top: 5px;">
                    <div class="panel-body">
                        @using (Ajax.BeginForm("PostReview",
                                "Event",
                                new AjaxOptions()
                                {
                                    UpdateTargetId = "reviews",
                                    OnSuccess = "done(this)"
                                },
                                new { @id = "reviewform" }
                                ))
                        {
                            @Html.AntiForgeryToken()
                            @Html.HiddenFor(x => x.Event.Name)

                            <div class="form-horizontal">
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.Event.Id)

                                <div class="form-group">
                                    @Html.RadioButtonFor(m => m.Review.Like, "true", new { id = "radio1", @checked = "checked" })
                                    <label class="thumbnail" for="radio1">
                                        <img src="~/Content/images/thumbupsm.png" />
                                    </label>
                                    @Html.RadioButtonFor(m => m.Review.Like, "false", new { id = "radio2" })
                                    <label class="thumbnail" for="radio2">
                                        <img src="~/Content/images/thumbdownsm.png" />
                                    </label>
                                </div>

                                <div class="form-group">
                                    <div>
                                        @Html.TextAreaFor(model => model.Review.ReviewText, 4, 100, new { @style = "max-width: 400px;", @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.Review.ReviewText, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div class="col-md-offset-8 col-md-12">
                                        <input type="submit" value="PostReview" class="btn btn-default" />
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        }
    </div>
</div>


<p>
    <a class="btn btn-primary" href="@Session["ReturnUrl"]">Back</a>
</p>

