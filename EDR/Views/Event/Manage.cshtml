@model EDR.Models.ViewModels.EventManageViewModel

@{
    ViewBag.Title = "Manage";
}

<h2>Manage @Model.Event.Name</h2>
<p>
    @Html.ActionLink("View Event", "View", new { id = Model.Event.Id, eventType = Model.EventType }, null)
</p>
@if (Model.EventType == EDR.Enums.EventType.Class)
{
    @Html.ActionLink("Back to School", "View", "School", new { id = Model.SchoolId }, null)
}
<p>
    <a title="Delete" href="@Url.Action("Delete", "Event", new { id = Model.Event.Id, eventType = Model.EventType, returnUrl = Model.ReturnUrl })" onclick="return confirm('Are you sure you want to DELETE this Event?')">
        Delete Event
    </a>
</p>


@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/foolproof")
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css" />
    @Scripts.Render("~/bundles/jqueryUI")
    @Scripts.Render("~/bundles/GeoComplete")
<script src="https://maps.googleapis.com/maps/api/js?sensor=false&amp;libraries=places"></script>
@Scripts.Render("~/bundles/TimePicker")
@Styles.Render("~/Content/TimePickercss")

<script src="@Url.Content("~/Scripts/jquery.unobtrusive-ajax.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.form.js")" type="text/javascript"></script>

<script type="text/javascript">
    $.validator.setDefaults({
        ignore: ""
    })
    $(function () {
        $('.start').timepicker({
            'timeFormat': 'h:i A',
            'step': function (i) {
                return 15;
            }
        });
        $('.end').timepicker({
            'timeFormat': 'h:i A',
            'step': function (i) {
                return 15;
            }
        });
        $('.start').timepicker('setTime', new Date($('.timeelement.begintime').val()));
        $('.end').timepicker('setTime', new Date($('.timeelement.endtime').val()));
    });

    $('.timepicker').change(function () {
        var start = $('.timeelement.begintime');
        var end = $('.timeelement.endtime');

        var time = new Date();
        var startdt = new Date(time.getMonth().toString() + "/" + time.getDate().toString() + "/" + time.getFullYear().toString() + " " + $('.timepicker.start').val());
        var enddt = new Date(time.getMonth().toString() + "/" + time.getDate().toString() + "/" + time.getFullYear().toString() + " " + $('.timepicker.end').val());
        start.prop('value', startdt.toLocaleDateString() + " " + startdt.toLocaleTimeString());
        end.prop('value', enddt.toLocaleDateString() + " " + enddt.toLocaleTimeString());
        var val = $('#saveform.main').valid();
    });
    $('#placesearch').autocomplete({
        source: function (request, response) {
            $.ajax({
                url: '@Url.Action("Search", "Place")',
                data: { searchString: request.term },
                dataType: 'json',
                type: 'GET',
                success: function (data) {
                    response($.map(data, function (item) {
                        return {
                            label: item.Name,
                            value: item.Id
                        }
                    }));
                }
            })
        },
        select: function (event, ui) {
            $('#placesearch').val(ui.item.label);
            $('#Id').val(ui.item.value);
            return false;
        },
        minLength: 1
    });

    $('#stylesearch').autocomplete({
        source: function (request, response) {
            $.ajax({
                url: '@Url.Action("Search", "DanceStyle")',
                data: { searchString: request.term },
                dataType: 'json',
                type: 'GET',
                success: function (data) {
                    response($.map(data, function (item) {
                        return {
                            label: item.Name,
                            value: item.Id
                        }
                    }));
                }
            })
        },
        select: function (event, ui) {
            $('#stylesearch').val(ui.item.label);
            $('#NewStyleId').val(ui.item.value);
            return false;
        },
        minLength: 1
    });

    $(function () {
        //alert("here");
        //var form = $('#saveform2.main');
        //alert(form.prop('id'));
        //try {
        //    var valid = form.valid();
        //    alert(valid);
        //}
        //catch (err) {
        //    document.getElementById("demo").innerHTML = err.message;
        //}
        $('#saveform.main').valid();

        $('#btnEdit').click(function () {
            $('#viewdiv').hide();
            $('#editdiv').show();
            try
            {
                var valid = $('#saveform.main').valid();
            }
            catch(err)
            {
                document.getElementById("demo").innerHTML = err.message;
            }
        });
        $('#btncanceledit').click(function () {
            $('#viewdiv').show();
            $('#editdiv').hide();
        });
        //  $('#saveform.main').validate;

        @*$('.time').change(function () {
            CheckDates();
        });

        function CheckDates() {
            var shour = $('#StartHour option:selected').val();
            var smin = $('#StartMinute option:selected').val();
            var sampm = $('#StartAMPM option:selected').val();
            var ehour = $('#EndHour option:selected').val();
            var emin = $('#EndMinute option:selected').val();
            var eampm = $('#EndAMPM option:selected').val();

            var start = new Date("@Model.Event.StartDate.ToShortDateString() " + shour + ":" + smin + " " + sampm);
            $('#StartTime').prop("value", start)
            var end = new Date("@Model.Event.StartDate.ToShortDateString() " + ehour + ":" + emin + " " + eampm);

            $('#Event_StartTime').prop("value", "@Model.Event.StartDate.ToShortDateString() " + shour + ":" + smin + " " + sampm);
            $('#Event_EndTime').prop("value", "@Model.Event.StartDate.ToShortDateString() " + ehour + ":" + emin + " " + eampm);

            if (start > end) {
                $('#EndTimevalidationMessage').show();
                return false;
            }
            else {
                $('#EndTimevalidationMessage').hide();
                return true;
            }
        }*@

        $('#saveform.main').submit(function () {
            var valid = $('#saveform.main').valid();

            //if (valid)
            //{
            //    var ck = CheckDates();
            //    if (ck)
            //    {
            //        return true;
            //    }
            //    else
            //    {
            //        return false;
            //    }
            //}
            //else
            //{
            //    return false;
            //}
        });
    });

    $(function () {
        $("#newplace").geocomplete({
            details: "form",
            types: ["geocode", "establishment"],
        })
        .bind("geocode:result", function (event, result) {
            $('#NewPlace_Latitude').prop("value", result.geometry.location.lat());
            $('#NewPlace_Longitude').prop("value", result.geometry.location.lng());

            $('#NewPlace_Name').prop("value", result.name);
            $('#NewPlace_GooglePlaceId').prop("value", result.place_id);
            $('#NewPlace_GoogleUrl').prop("value", result.url);
            $('#NewPlace_Website').prop("value", result.website);
            $('#NewPlace_GoogleRating').prop("value", result.rating);
            //$.each(result.reviews, function (i, review) {
            //    alert(review.text);
            //});
            var street_num;
            var street_name;
            $.each(result.address_components, function (i, address_component) {

                //alert(address_component.types[0]);
                //alert(address_component.long_name);
                if (address_component.types[0] == "street_number") {
                    street_num = address_component.long_name;
                }
                else if (address_component.types[0] == "route") {
                    street_name = address_component.long_name;
                }
                else if (address_component.types[0] == "locality") {
                    $('#NewPlace_City').prop("value", address_component.long_name);
                }
                else if (address_component.types[0] == "administrative_area_level_1") {
                    $('#NewPlace_StateName').prop("value", address_component.long_name);
                }
                else if (address_component.types[0] == "postal_code") {
                    $('#NewPlace_Zip').prop("value", address_component.long_name);
                }
                else if (address_component.types[0] == "country") {
                    $('#NewPlace_Country').prop("value", address_component.long_name);
                }
            });
            //alert(street_num + " " + street_name);
            $('#NewPlace_Address').prop("value", street_num + " " + street_name);
            //  console.log(result);
        });
    });
</script>
}
<p id="demo"></p>
@*@using (Html.BeginForm("Create", "Event", FormMethod.Post, new { @id = "saveform2", @class = "main" }))
{
    @Html.EditorFor(model => model.Event.Name, new { htmlAttributes = new { @class = "form-control" } })
    @Html.ValidationMessageFor(model => model.Event.Name, "", new { @class = "text-danger" })
    @Html.TextBoxFor(m => m.Event.StartDate)
    @Html.ValidationMessageFor(model => model.Event.StartDate, "", new { @class = "text-danger" })
    <input type="button" id="btnsave2" value="Save" class="btn btn-primary" />
}*@
<div class="container-fluid">
    <div class="col-lg-6 col-md-6">
        <div class="panel panel-default">
            <div class="panel-body ">
                <div id="viewdiv">
                    <div class="text-right">
                        <input id="btnEdit" type="button" class="btn btn-primary" value="Edit" />
                    </div>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Event.Name)
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.Event.Name)
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Event.StartDate)
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.Event.StartDate)
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Event.EndDate)
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.Event.EndDate)
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Event.StartTime)
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.Event.StartTime)
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Event.EndTime)
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.Event.EndTime)
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            Repeat Event?
                        </dt>
                        <dd>
                            @(Model.Event.Recurring ? "Yes" : "No")
                        </dd>
                    </dl>
                    <div id="repeat" @(Model.Event.Recurring ? "" : "hidden='hidden'")>
                        <dl class="dl-horizontal">
                            <dt>
                                Repeats
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.Event.Frequency)
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                Every
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.Event.Interval, new { @class = "form-control" })
                                @if (Model.Event.Frequency == EDR.Enums.Frequency.Daily)
                                {
                                    @: Day(s)
                                        }
                                else if (Model.Event.Frequency == EDR.Enums.Frequency.Weekly)
                                {
                                    @: Week(s)
                                        }
                                else if (Model.Event.Frequency == EDR.Enums.Frequency.Monthly)
                                {
                                    @: Month(s)
                                        }
                                else if (Model.Event.Frequency == EDR.Enums.Frequency.Yearly)
                                {
                                    @: Year(s)
                            }
                            </dd>
                        </dl>
                        <div id="monthly" @(Model.Event.Frequency == EDR.Enums.Frequency.Monthly ? "" : "hidden='hidden'")>
                            <dl class="dl-horizontal">
                                <dt>
                                    On the
                                </dt>
                                <dd>
                                    @Model.Event.MonthDays @Model.Event.StartDate.DayOfWeek
                                </dd>
                            </dl>
                        </div>
                    </div>

                    <dl class="dl-horizontal">
                        <dt>
                            @Html.Label("Location", htmlAttributes: new { @class = "control-label" })
                        </dt>
                        <dd>
                            @Html.ActionLink(Model.Event.Place.Name, "Details", "Place", new { id = Model.Event.Place.Id }, null)<br />
                            @Model.Event.Place.Address<br />
                            @Model.Event.Place.City, @Model.Event.Place.StateName @Model.Event.Place.Zip<br />
                            @Model.Event.Place.Country
                        </dd>
                    </dl>
                </div>
                <div id="editdiv" style="display: none;">
                    @Html.ValidationSummary("", new { @class = "text-danger" })
                    @using (Html.BeginForm("Save", "Event", FormMethod.Post, new { @id = "saveform", @class = "main" }))
                    {
                    @Html.HiddenFor(x => x.EventType)
                    @Html.HiddenFor(x => x.Event.Id)
                    @*@Html.HiddenFor(x => x.Event.StartTime)
                    @Html.HiddenFor(x => x.Event.EndTime)*@
                    <div class="text-right" style="padding-bottom: 10px;">
                        <input type="submit" id="btnsave" value="Save" class="btn btn-primary" />
                        <input id="btncanceledit" type="button" class="btn btn-primary" value="Cancel" />
                    </div>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Event.Name)
                        </dt>
                        <dd>
                            @Html.EditorFor(model => model.Event.Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Event.Name, "", new { @class = "text-danger" })
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Event.StartDate)
                        </dt>
                        <dd>
                            @*@Html.DisplayFor(m => m.Event.StartDate, "{0:yyyy-MM-dd}")*@
                            @Html.TextBoxFor(m => m.Event.StartDate, "{0:yyyy-MM-dd}", htmlAttributes: new { @type = "date", @class = "form-control", @readonly = "readonly" })
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Event.EndDate)
                        </dt>
                        <dd>
                            @Html.TextBoxFor(m => m.Event.EndDate, "{0:yyyy-MM-dd}", htmlAttributes: new { @type = "date", @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Event.EndDate, "", new { @class = "text-danger" })
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Event.StartTime)
                        </dt>
                        <dd>
                            <p><input id="start" type="text" class="start timepicker form-control" /></p>
                            @Html.HiddenFor(m => m.Event.StartTime, new { @class = "timeelement begintime" })
                            @Html.ValidationMessageFor(model => model.Event.StartTime, "", new { @class = "text-danger" })
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Event.EndTime)
                        </dt>
                        <dd>
                            <p><input id="end" type="text" class="end timepicker form-control" /></p>
                            @Html.HiddenFor(m => m.Event.EndTime, new { @class = "timeelement endtime" })
                            @Html.ValidationMessageFor(model => model.Event.EndTime, "", new { @class = "text-danger" })
                        </dd>
                    </dl>
                    @*<dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Event.StartTime)
                        </dt>
                        <dd>
                            @Html.DropDownListFor(m => m.StartHour, new SelectList(new List<SelectListItem>
                                                {
                                                    new SelectListItem { Text = "01", Value = "1" },
                                                    new SelectListItem { Text = "02", Value = "2" },
                                                    new SelectListItem { Text = "03", Value = "3" },
                                                    new SelectListItem { Text = "04", Value = "4" },
                                                    new SelectListItem { Text = "05", Value = "5" },
                                                    new SelectListItem { Text = "06", Value = "6" },
                                                    new SelectListItem { Text = "07", Value = "7" },
                                                    new SelectListItem { Text = "08", Value = "8" },
                                                    new SelectListItem { Text = "09", Value = "9" },
                                                    new SelectListItem { Text = "10", Value = "10" },
                                                    new SelectListItem { Text = "11", Value = "11" },
                                                    new SelectListItem { Text = "12", Value = "12" }
                                                    }, "Value", "Text", null), new { @class = "form-control time", style = "width: 70px; display: inline;" })
                            @Html.DropDownListFor(m => m.StartMinute, new SelectList(new List<string> { "00", "15", "30", "45" }), new { @class = "form-control time", style = "width: 70px; display: inline;" })
                            @Html.DropDownListFor(m => m.StartAMPM, new SelectList(new List<string>() { "AM", "PM" }), new { @class = "form-control time", style = "width: 70px; display: inline;" })
                            @Html.ValidationMessageFor(model => model.Event.StartTime, "", new { @class = "text-danger" })
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Event.EndTime)
                        </dt>
                        <dd>
                            @Html.DropDownListFor(m => m.EndHour, new SelectList(new List<SelectListItem>
                                                {
                                                    new SelectListItem { Text = "01", Value = "1" },
                                                    new SelectListItem { Text = "02", Value = "2" },
                                                    new SelectListItem { Text = "03", Value = "3" },
                                                    new SelectListItem { Text = "04", Value = "4" },
                                                    new SelectListItem { Text = "05", Value = "5" },
                                                    new SelectListItem { Text = "06", Value = "6" },
                                                    new SelectListItem { Text = "07", Value = "7" },
                                                    new SelectListItem { Text = "08", Value = "8" },
                                                    new SelectListItem { Text = "09", Value = "9" },
                                                    new SelectListItem { Text = "10", Value = "10" },
                                                    new SelectListItem { Text = "11", Value = "11" },
                                                    new SelectListItem { Text = "12", Value = "12" }
                                                    }, "Value", "Text", null), new { @class = "form-control time", style = "width: 70px; display: inline;" })
                            @Html.DropDownListFor(m => m.EndMinute, new SelectList(new List<string> { "00", "15", "30", "45" }), new { @class = "form-control time", style = "width: 70px; display: inline;" })
                            @Html.DropDownListFor(m => m.EndAMPM, new SelectList(new List<string>() { "AM", "PM" }), new { @class = "form-control time", style = "width: 70px; display: inline;" })
                            @Html.ValidationMessageFor(model => model.Event.EndTime, "", new { @class = "text-danger" })
                            <p>
                                <span id="EndTimevalidationMessage" class="text-danger" style="display: none;">End Time Must Be After Start Time</span>
                            </p>
                        </dd>
                    </dl>*@
                    <dl class="dl-horizontal">
                        <dt>
                            Repeat Event?
                        </dt>
                        <dd>
                            @(Model.Event.Recurring ? "Yes" : "No")
                        </dd>
                    </dl>
                    <div id="repeat" @(Model.Event.Recurring ? "" : "hidden='hidden'")>
                        <dl class="dl-horizontal">
                            <dt>
                                Repeats
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.Event.Frequency)
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                Every
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.Event.Interval, new { @class = "form-control" })
                                @if (Model.Event.Frequency == EDR.Enums.Frequency.Daily)
                                {
                                    @: Day(s)
                                        }
                                else if (Model.Event.Frequency == EDR.Enums.Frequency.Weekly)
                                {
                                    @: Week(s)
                                        }
                                else if (Model.Event.Frequency == EDR.Enums.Frequency.Monthly)
                                {
                                    @: Month(s)
                                        }
                                else if (Model.Event.Frequency == EDR.Enums.Frequency.Yearly)
                                {
                                    @: Year(s)
                            }
                            </dd>
                        </dl>
                        <div id="monthly" @(Model.Event.Frequency == EDR.Enums.Frequency.Monthly ? "" : "hidden='hidden'")>
                            <dl class="dl-horizontal">
                                <dt>
                                    On the
                                </dt>
                                <dd>
                                    @Model.Event.MonthDays @Model.Event.StartDate.DayOfWeek
                                </dd>
                            </dl>
                        </div>
                    </div>

                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Event.FacebookLink)
                        </dt>
                        <dd>
                            @Html.EditorFor(model => model.Event.FacebookLink, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Event.FacebookLink, "", new { @class = "text-danger" })
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Event.Description)
                        </dt>
                        <dd>
                            @Html.EditorFor(model => model.Event.Description, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Event.Description, "", new { @class = "text-danger" })
                        </dd>
                    </dl>
                        @Html.HiddenFor(model => model.NewPlace.Name, new { @Value = "New Place" })
                        @Html.HiddenFor(model => model.NewPlace.Address)
                        @Html.HiddenFor(model => model.NewPlace.Address2)
                        @Html.HiddenFor(model => model.NewPlace.City)
                        @Html.HiddenFor(model => model.NewPlace.StateName)
                        @Html.HiddenFor(model => model.NewPlace.Zip)
                        @Html.HiddenFor(model => model.NewPlace.Country)
                        @Html.HiddenFor(model => model.NewPlace.Latitude)
                        @Html.HiddenFor(model => model.NewPlace.Longitude)
                        @Html.HiddenFor(model => model.NewPlace.GooglePlaceId)
                        @Html.HiddenFor(model => model.NewPlace.GoogleUrl)
                        @Html.HiddenFor(model => model.NewPlace.Website)
                        @Html.HiddenFor(model => model.NewPlace.GoogleRating)
                        @*@Html.TextBoxFor(model => model.NewPlace.PlaceType, new { @Value = EDR.Enums.PlaceType.OtherPlace })*@
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.Label("New Location", htmlAttributes: new { @class = "control-label" })
                        </dt>
                        <dd>
                            <input id="newplace" type="text" placeholder="Search for a new Location" class="form-control" />
                        </dd>
                    </dl>

                    <dl class="dl-horizontal">
                        <dt>
                            @Html.Label("Type of Location", htmlAttributes: new { @class = "control-label" })
                        </dt>
                        <dd>
                            @Html.EnumDropDownListFor(model => model.NewPlace.PlaceType, new { @class = "form-control" })
                        </dd>
                    </dl>

                    <dl class="dl-horizontal">
                        <dt>
                            @Html.Label("Location", htmlAttributes: new { @class = "control-label" })
                        </dt>
                        <dd>
                            @Html.TextArea("Location", Model.Event.Place.Address + "\n" + Model.Event.Place.City + ", " + Model.Event.Place.StateName + " " + Model.Event.Place.Zip + "\n" + Model.Event.Place.Country, 4, 50, new { @class = "form-control", Name = "formatted_address", @readonly = true })
                        </dd>
                    </dl>
                    }
                </div>
            </div>
        </div>
        <div class="panel panel-default">
            <div class="panel-body ">
                <h3>Registrations</h3>
                @foreach (var i in Model.Event.EventInstances.Where(i => i.DateTime <= DateTime.Today).OrderByDescending(i => i.DateTime))
                {
                    @i.DateTime.ToShortDateString()
                    <table class="table table-condensed">
                        <thead>
                            <tr>
                                <th>
                                    Name
                                </th>
                            </tr>
                        </thead>
                        @foreach (var r in i.EventRegistrations)
                        {
                            <tr>
                                <td>
                                    @r.User.FullName
                                </td>
                            </tr>
                        }
                        <tfoot>
                            <tr>
                                <td>
                                    Total: @i.EventRegistrations.Count()
                                </td>
                            </tr>
                        </tfoot>
                    </table>
                }
            </div>
        </div>
    </div>
    <div class="col-lg-6 col-md-6">
        @if (Model.Event.Recurring)
        {
            <div class="panel panel-default">
                <div class="panel-body ">
                    <h3>Event Dates</h3>
                    <table class="table table-condensed table-striped">
                        <thead>
                            <tr>
                                <th>
                                    Date
                                </th>
                                <th>
                                    Place
                                </th>
                                <th class="text-center">
                                    Attendees
                                </th>
                                <th>
                                </th>
                            </tr>
                        </thead>
                        @foreach(var i in Model.Event.EventInstances)
                        {
                            <tr>
                                <td>
                                    <strong>@i.DateTime.ToLongDateString()</strong><br />
                                </td>
                                <td>
                                    @Html.ActionLink(i.Place.Name, "Details", "Place", new { id = i.Place.Id }, new { @style = "white-space: pre-line; display: block; width: 150px;" })
                                </td>
                                <td class="text-center">
                                    @i.EventRegistrations.Count()
                                </td>
                                <td>
                                    <a class="btn text-info" title="Edit this Instance" href="@Url.Action("ManageInstance", "Event", new { id = i.Id })">
                                        <i class="glyphicon glyphicon-edit"></i>
                                    </a>
                                    @if (i.EventRegistrations.Count() == 0)
                                    {
                                        @*@Html.ActionLink("Delete", "DeleteInstance", "Event", new { id = i.Id }, null)*@
                                        <a class="btn text-danger" title="Delete" href="@Url.Action("DeleteInstance", "Event", new { id = i.Id })" onclick="return confirm('Are you sure you want to DELETE this Instance?')">
                                            <i class="glyphicon glyphicon-remove-circle"></i>
                                        </a>
                                    }
                                    else
                                    {
                                        <a class="btn"><i title="Instance has Registrations and can't be Deleted'" class="glyphicon glyphicon-remove-circle"></i></a>
                                    }
                                </td>
                            </tr>
                        }
                    </table>
                </div>
            </div>
        }
        <div class="panel panel-default">
            <div class="panel-body ">
                <h3>Tickets</h3>
                @Html.ActionLink("Add Ticket", "AddTicket", "Store", new { eventId = Model.Event.Id }, null)
                <table class="table table-condensed table-striped">
                    <thead>
                        <tr>
                            <th>
                                Ticket Type
                            </th>
                            <th>
                                Purchase Limit
                            </th>
                            <th>
                                Valid From
                            </th>
                            <th>
                                Valid To
                            </th>
                            <th class="text-center">
                                Sold
                            </th>
                            <th>
                            </th>
                        </tr>
                    </thead>
                    @foreach (var i in Model.Event.Tickets)
                    {
                        <tr>
                            <td>
                                @(String.Format("{0:N0}", i.Quantity) + " @ " + String.Format("{0:C}", i.Price))
                            </td>
                            <td>
                                @i.Limit
                            </td>
                            <td>
                                @i.Start
                            </td>
                            <td>
                                @i.End
                            </td>
                            <td class="text-center">
                                @i.UserTickets.Sum(t => t.EventRegistrations.Count())
                            </td>
                            <td>
                                @Html.ActionLink("Delete", "DeleteTicket", "Event", new { id = i.Id }, null)
                            </td>
                        </tr>
                    }
                </table>
            </div>
        </div>
        <div class="panel panel-default">
            <div class="panel-body ">
                <h3>Dance Styles</h3>
                @using (Ajax.BeginForm("AddStyle",
                                        "Event",
                                        new AjaxOptions()
                                        {
                                            UpdateTargetId = "stylesdiv",
                                            OnSuccess = "done(this)"
                                        },
                                        new { @id = "addstyleform" }
                                        ))
                {
                @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.Event.Id)
                    @Html.HiddenFor(m => m.NewStyleId)
                    @Html.HiddenFor(m => m.EventType)
                    @Html.TextBox("stylesearch", "", new { placeholder = "Search for a Dance Style", @class = "form-control col-md-4" })
                    <input class="btn" type="submit" value="Add Style" />
                }
                <div id="stylesdiv">
                    @Html.Partial("~/Views/Event/Partial/_DanceStylesPartial.cshtml", new EDR.Models.ViewModels.EventDanceStylesPartialViewModel() { DanceStyles = Model.Event.DanceStyles, EventId = Model.Event.Id, EventType = (EDR.Enums.EventType)Model.EventType })
                </div>
            </div>
        </div>
    </div>
</div>
