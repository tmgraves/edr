@model EDR.Models.ViewModels.EventListViewModel
@using EDR.Utilities
@using EDR.Models

<style>
    #map-canvas {
        width: 100%;
        height: 300px;
    }
</style>
<script src="https://maps.googleapis.com/maps/api/js"></script>
<script>
    var map;
    var markers = [];
    var infowindows = [];
    var lat = 0;
    var lon = 0;

    $(function () {
        navigator.geolocation.getCurrentPosition(showPosition, positionError);

        function showPosition(position) {
            var coordinates = position.coords;
            lat = coordinates.latitude;
            lon = coordinates.longitude;
        }

        function positionError(position) {
            alert("Error " + position.code);
        }
    });

    function initialize() {
        var mapOptions = {
            zoom: 8,
            zoomControl: false,
            center: new google.maps.LatLng(lat, lon)
        };

        map = new google.maps.Map(document.getElementById('map-canvas'),
            mapOptions);

        @{
            int idx = 1;
            var today = DateTime.Today;
            foreach (var ev in Model.Events.Where(x => x.EndDate >= DateTime.Today || x.EndDate == null).OrderBy(x => x.NextDate))
            {
                <text>
        var marker = new google.maps.Marker({
            position: new google.maps.LatLng('@ev.Place.Latitude', '@ev.Place.Longitude'),
            map: map,
            title: '@ev.Name',
            icon: "http://maps.google.com/mapfiles/kml/paddle/" + @idx + "-lv.png"
        });

        attachMessage(marker, '@ev.Id', '@ev.Place.Name', '@ev.Place.Address <br/> @ev.Place.City , @ev.Place.State  @ev.Place.Zip', '<a href="@Url.Action("View", "Event", new { id = ev.Id, eventType = Model.EventType })">' + marker.title + '</a>', '@(ev.EventMembers != null ? ev.EventMembers.Count : 0)', '@(ev.Videos != null ? ev.Videos.Count : 0)', '@(ev.Pictures != null ? ev.Pictures.Count : 0)', '@Model.EventType.ToString()');
                markers.push(marker);

                </text>
                idx += 1;
            }

            foreach (var ev in Model.Events.Where(x => x.EndDate < DateTime.Today).OrderBy(x => x.NextDate))
            {
                <text>
        var marker = new google.maps.Marker({
            position: new google.maps.LatLng('@ev.Place.Latitude', '@ev.Place.Longitude'),
            map: map,
            title: '@ev.Name',
            icon: "http://maps.google.com/mapfiles/kml/paddle/" + @idx + "-lv.png"
        });

        attachMessage(marker, '@ev.Id', '@ev.Place.Name', '@ev.Place.Address <br/> @ev.Place.City , @ev.Place.State  @ev.Place.Zip', '<a href="@Url.Action("View", "Event", new { id = ev.Id, eventType = Model.EventType })">' + marker.title + '</a>', '@(ev.EventMembers != null ? ev.EventMembers.Count : 0)', '@(ev.Videos != null ? ev.Videos.Count : 0)', '@(ev.Pictures != null ? ev.Videos.Count : 0)', '@Model.EventType.ToString()');
        markers.push(marker);

        </text>
                idx += 1;
            }

        }

        //  clearMarkers();
    }

    function clearMarkers() {
        setAllMap(null);
    }

    function setAllMap(map) {
        for (var i = 0; i < markers.length; i++) {
            markers[i].setMap(map);
        }
    }
    function clearWindows() {
        for (var i = 0; i < infowindows.length; i++) {
            infowindows[i].close();
        }
    }

    // The five markers show a secret message when clicked
    // but that message is not within the marker's instance data
    function attachMessage(marker, num, placeName, address, link, users, videos, pictures, eventtype) {
        var message = marker.title;
        var infowindow = new google.maps.InfoWindow({
            disableAutoPan: true,
            content: '<div id="content">' +
            '<div id="siteNotice">' +
            '</div>' +
            '<h4 id="firstHeading" class="firstHeading">' + link + '</h4>' +
            '<div id="bodyContent">' +
            '<p>' +
            address + '<br/>' +
            '</p>' +
            '</div>' +
            '</div>'
        });
        infowindows.push(infowindow);

        //  infowindow.open(map, marker);

        google.maps.event.addListener(marker, 'click', function () {
            clearWindows();
            infowindow.open(map, marker);
        });
    }

    function openEvent(id, lati, long) {
        var latLng = new google.maps.LatLng(lati, long); //Makes a latlng
        map.panTo(latLng); //Make map global
        //  map.setZoom(14);
        //  clearMarkers();
        markers[id].setMap(map);
        clearWindows();
        infowindows[id].open(map, markers[id]);
        return false;
    }

    google.maps.event.addDomListener(window, 'load', initialize);
</script>

<div class="col-sm-12 col-md-6 col-lg-6 col-xs-12">
@if (Model.Events.Count() != 0)
{
    int rowNo = 0;
    <div class="tabbable with-nav-tabs">
        <div style="margin: 5px;">
            <ul class="nav nav-pills" role="tablist">
                <li class="active"><a href="#current" data-toggle="tab">Current</a></li>
                <li><a href="#past" data-toggle="tab">Past</a></li>
            </ul>
        </div>
        <div class="tab-content">
            <div id="current" class="tab-pane active">
                @if (Model.Events.Where(x => x.EndDate >= DateTime.Today || x.EndDate == null).Count() != 0)
                {
                    foreach (var item in Model.Events.Where(x => x.EndDate >= DateTime.Today || x.EndDate == null).OrderBy(x => x.NextDate))
                    {
                        <a class="btn btn-default" style="width: 100%; text-align: left; white-space: normal;" onclick="openEvent(@rowNo, @item.Place.Latitude, @item.Place.Longitude); return false;" href="#">
                            <div style="width: 100%;">
                                <div class="col-lg-3 col-md-3 col-sm-2 col-xs-2 thumbnail text-center">
                                    <span class="text-primary">@item.NextDate.ToString("ddd").ToUpper()</span><br />
                                    <span class="text-success">@item.NextDate.ToString("MMM").ToUpper() @item.NextDate.Day.ToString()</span><br />
                                    <span class="small text-danger">
                                        @if (!item.AllDay)
                                        {
                                            @(Convert.ToDateTime(item.StartTime).ToString("%h:mm tt"))
                                        }
                                        else
                                        {
                                            @:All Day
                                        }
                                    </span>
                                </div>
                                <div class="col-lg-9 col-md-9 col-sm-10 col-xs-10">
                                    <strong>@(rowNo += 1). @item.Name<br />
                                    <span class="text-success"> @@@item.Place.Name</span></strong><br />
                                    @if (Model.EventType == EDR.Enums.EventType.Class)
                                    {
                                        if (((Class)item).Teachers != null && ((Class)item).Teachers.Count > 0)
                                        {
                                            <p>
                                                @foreach (Teacher t in ((Class)item).Teachers)
                                                {
                                                    <span class="label label-warning">@t.ApplicationUser.FullName</span>
                                                }
                                            </p>
                                        }
                                    }
                                    <strong><span class="text-danger bold">@item.Reviews.Where(r => r.Like).Count() <i class="glyphicon glyphicon-thumbs-up"></i> | @item.Reviews.Where(r => !r.Like).Count() <i class="glyphicon glyphicon-thumbs-down"></i></span></strong><br />
                                    @if (item.Recurring)
                                    {
                                        ApplicationUtility.FrequencyTranslate(item.Frequency, item.Interval == null ? 0 : (int)item.Interval);
                                    }
                                    @if (item.DanceStyles != null && item.DanceStyles.Count > 0)
                                    {
                                        <p>
                                            @foreach (DanceStyle s in item.DanceStyles)
                                            {
                                            <span class="label label-info">@s.Name</span>
                                            }
                                        </p>
                                    }
                                </div>
                            </div>
                        </a>
                    }
                }
                else
                {
                    <p style="margin: 10px;">
                        No Events
                    </p>
                }
            </div>
            <div id="past" class="tab-pane">
                @foreach (var item in Model.Events.Where(x => x.EndDate < DateTime.Today).OrderBy(x => x.NextDate))
                {
                    <a class="btn btn-default" style="width: 100%; text-align: left; white-space: normal;" onclick="openEvent(@rowNo, @item.Place.Latitude, @item.Place.Longitude); return false;" href="#" @*href="@Url.Action("Details", "Event", new { id = item.Id, eventType = "Class" } )"*@>
                        <div style="width: 100%;">
                            <div class="col-lg-3 col-md-3 col-sm-2 col-xs-2 thumbnail text-center">
                                <span class="text-primary">@item.NextDate.ToString("ddd").ToUpper()</span><br />
                                <span class="text-success">@item.NextDate.ToString("MMM").ToUpper() @item.NextDate.Day.ToString()</span><br />
                                <span class="small text-danger">
                                    @if (!item.AllDay)
                                    {
                                        @(Convert.ToDateTime(item.StartTime).ToString("%h:mm tt"))
                                    }
                                    else
                                    {
                                        @:All Day
                                        }
                                </span>
                            </div>
                            <div class="col-lg-9 col-md-9 col-sm-10 col-xs-10">
                                <strong>
                                    @(rowNo += 1). @item.Name<br />
                                    <span class="text-success"> @@@item.Place.Name</span>
                                </strong><br />
                                <strong><span class="text-danger bold">@item.Reviews.Where(r => r.Like).Count() <i class="glyphicon glyphicon-thumbs-up"></i> | @item.Reviews.Where(r => !r.Like).Count() <i class="glyphicon glyphicon-thumbs-down"></i></span></strong><br />
                                @if (item.Recurring)
                                {
                                    ApplicationUtility.FrequencyTranslate(item.Frequency, item.Interval == null ? 0 : (int)item.Interval);
                                }
                                @if (Model.EventType == EDR.Enums.EventType.Class)
                                {
                                    if (((Class)item).Teachers != null && ((Class)item).Teachers.Count > 0)
                                    {
                                        var teachers = "";
                                        foreach (Teacher t in ((Class)item).Teachers)
                                        {
                                            teachers += (teachers == "" ? "" : ", ") + t.ApplicationUser.FullName;
                                        }
                                        <br /><span class="text-primary">with @teachers</span>
                                    }
                                }
                                @if (item.DanceStyles != null && item.DanceStyles.Count > 0)
                                {
                                    <p>
                                        @foreach (DanceStyle s in item.DanceStyles)
                                        {
                                            <span class="label label-info">@s.Name</span>
                                        }
                                    </p>
                                }
                            </div>
                        </div>
                    </a>
                }
            </div>
        </div><!-- /.tab-content -->
    </div><!-- /.tabbable -->
}
else
{
    @:No Events
}
</div>
<div class="col-sm-12 col-md-6 col-lg-6 col-xs-12">
    <div class="container" id="map-canvas"></div>
</div>
