@model IEnumerable<EDR.Models.Team>

<div class="container-fluid">
    @if (Model.Count() != 0)
    {
        foreach (var item in Model.OrderBy(m => m.Name))
        {
            <text>
    <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
        <div class="row" style="padding: 5px !important; height: 150px;">
            <div class="box-default" style="padding: 5px; height: 100%;">
                <div class="col-lg-4 col-xs-4 nospace helper text-center" style="height: 100%; background-color: #000;">
                    <span style="line-height: 100%; vertical-align: middle;"></span><img style="max-width: 100%; max-height: 100%;" src="@Url.Content(EDR.Utilities.ApplicationUtility.CheckImageLink(item.PhotoUrl))" />
                </div>
                <div class="col-lg-8 col-xs-8 text-left" style="height: 100%;">
                    <div class="row">
                        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-6" id="parentc">
                            <input id="rv" type="hidden" value="@(item.Reviews.Count() != 0 ? item.Reviews.Average(r => r.Rating) : 0)" class="ratingval" />
                            <div id="cont" class="rateYo"></div>
                        </div>
                        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-6 nospace text-right">
                            <div>
                                <span class="label label-success">
                                    @{
                                        switch (item.SkillLevel)
                                        {
                                            case 1:
                                                <text>Beginner</text>;
                                                break;
                                            case 2:
                                                <text>Beg/Int</text>;
                                                break;
                                            case 3:
                                                <text>Intermediate</text>;
                                                break;
                                            case 4:
                                                <text>Int/Adv</text>;
                                                break;
                                            case 5:
                                                <text>Advanced</text>;
                                                break;
                                        }
                                    }
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="item-title text-primary">
                        <a href="@Url.Action("View", "Team", new { id = item.Id, team = EDR.Utilities.ApplicationUtility.ToUrlSlug(item.Name), location = EDR.Utilities.ApplicationUtility.ToUrlSlug(item.City) })" onmouseover="openEvent(@item.Id, @item.Latitude, @item.Longitude); return false;">
                            @item.Name
                        </a>
                    </div>
                    <div class="small">
                        <a rel="nofollow" target="_blank" href="https://www.google.com/maps/place/@item.Address,+@item.City,+@item.State+@item.Zip">
                            <i class="glyphicon glyphicon-map-marker"></i>
                            @item.City, @item.State.Substring(0, 2).ToUpper()
                        </a>
                        </div>
                        <div class="small">
                            Teacher(s): @Html.DisplayFor(m => item.Teachers, "TeacherLinks")
                        </div>
                        <div class="small">
                            @if (item.Auditions != null && item.Auditions.Where(a => a.StartDate >= DateTime.Today).Count() != 0)
                            {
                                <text>Next Audition: </text><span class="text-danger">@item.Auditions.Where(a => a.StartDate >= DateTime.Today).Min(a => a.StartDate).ToString("ddd, M/d/yyyy")</span>
                            }
                            else
                            {
                                <text>Next Audition: None</text>
                            }
                        </div>
                        <div style="padding: 0px !important; margin-top: 2px; white-space: normal; vertical-align: bottom;">
                            @foreach (var s in item.DanceStyles)
                            {
                                <span class="label label-warning" style="margin: 1px;">@s.Name</span><text> </text>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
        </text>
        }
    }
    else
    {
        <h4 class="text-center">No Teams Found</h4>
    }
</div>

@*<div class="col-lg-6 col-xs-12" style="padding: 5px !important;">
    <div class="box-default col-lg-12 col-xs-12 nospace">
        <div class="col-lg-3 col-xs-3 nospace bg-success helper">
            <span></span><img src='@Url.Content(item.PhotoUrl ?? "~/Content/images/NoImage.png")' />
        </div>
        <div class="col-lg-6 col-xs-6 text-left">
            <div id="parentc">
                <input id="rv" type="hidden" value="@(item.Reviews.Count() != 0 ? item.Reviews.Average(r => r.Rating) : 0)" class="ratingval" />
                <div id="cont" class="rateYo"></div>
            </div>
            <div class="item-title text-primary">
                <a href="@Url.Action("View", "Team", new { id = item.Id })" onmouseover="openEvent(@rowNo, @item.Latitude, @item.Longitude); return false;">
                    @(rowNo + 1). @item.Name
                </a>
            </div>
            <div class="small" style="margin-top: 5px;">
                @Html.DisplayFor(modelItem => item.Address)<br />
                @Html.DisplayFor(modelItem => item.City), @Html.DisplayFor(modelItem => item.State) @Html.DisplayFor(modelItem => item.Zip)
            </div>
            <h4>
                <span class="label label-success">
                    @{
                        switch (item.SkillLevel)
                        {
                            case 1:
                                <text>Beginner</text>;
                                break;
                            case 2:
                                <text>Beginner/Intermediate</text>;
                                break;
                            case 3:
                                <text>Intermediate</text>;
                                break;
                            case 4:
                                <text>Intermediate/Advanced</text>;
                                break;
                            case 5:
                                <text>Advanced</text>;
                                break;
                            default:
                                <text>Beginner</text>
                                break;
                        }
                    }
                </span>
            </h4>
        </div>
        <div class="text-right col-lg-3 col-xs-3" style="padding: 0px !important; margin-top: 2px; white-space: normal;">
            @foreach (var s in item.DanceStyles)
            {
                <span class="label label-warning pull-right" style="margin: 1px;">@s.Name</span><text> </text>
            }
        </div>
    </div>
</div>
            </text>*@
