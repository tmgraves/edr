@model EDR.Models.Event

@{
    var cls = Model is EDR.Models.Class ? (EDR.Models.Class)Model : null;
    var soc = Model is EDR.Models.Social ? (EDR.Models.Social)Model : null;
}

<style>
    .vertical-container {
        width: 100%;
        height: 100%;
        position: relative;
        display: block;
    }
    .vertical-container div {
        text-align: center;
        width: 100px;
        text-align: center;
        position: absolute;
        top: 70px;
        left: -35px;
        transform: rotate(-90deg);
    }
</style>
<div class="row" style="padding: 5px !important; height: 180px;">
    <div class="box-default" style="padding: 5px; height: 100%;">
        <div class="col-lg-4 nospace bg-success helper text-center" style="height: 100%;">
            <div class="col-lg-2 nospace text-center" style="height: 100%;">
                <div class="@(Model is EDR.Models.Class ? "bg-class" : "bg-social") text-center vertical-container">
                    <div style="font-weight: bolder;">
                        @(cls != null ? cls.ClassType.ToString().ToUpper() : soc.SocialType.ToString().ToUpper())
                    </div>
                </div>
            </div>
            <div class="col-lg-10 nospace text-left" style="height: 100%;">
                <span style="line-height: 100%; vertical-align: middle;"></span><img style="max-width: 100%; max-height: 100%;" src="@Url.Content(EDR.Utilities.ApplicationUtility.CheckImageLink(Model.PhotoUrl))" />
            </div>
        </div>
        <div class="col-lg-5 text-left" style="height: 100%;">
            <div id="parentc">
                <input id="rv" type="hidden" value="@(Model.Reviews.Count() != 0 ? Model.Reviews.Average(r => r.Rating) : 0)" class="ratingval" />
                <div id="cont" class="rateYo"></div>
            </div>
            <div class="item-title text-primary">
                <a href="@Url.Action("View", "Event", new { id = Model.Id, eventType = Model is EDR.Models.Class ? EDR.Enums.EventType.Class : EDR.Enums.EventType.Social })">
                    @Model.Name
                </a>
            </div>
            <div class="small" style="margin-top: 5px;">
                @Html.DisplayFor(modelItem => Model.Place.Address)<br />
                @Html.DisplayFor(modelItem => Model.Place.City), @Html.DisplayFor(modelItem => Model.Place.StateName) @Html.DisplayFor(modelItem => Model.Place.Zip)
            </div>
            @if (cls != null)
            {
                <div style="padding-top: 10px; padding-bottom: 10px;">
                    Teacher(s): @Html.DisplayFor(m => cls.Teachers, "TeacherLinks")
                </div>
                <div>
                    <span class="label label-success">
                        @{
                            switch (cls.SkillLevel)
                            {
                                case 1:
                                    <text>Beginner</text>;
                                    break;
                                case 2:
                                    <text>Beginner/Intermediate</text>;
                                    break;
                                case 3:
                                    <text>Intermediate</text>;
                                    break;
                                case 4:
                                    <text>Intermediate/Advanced</text>;
                                    break;
                                case 5:
                                    <text>Advanced</text>;
                                    break;
                            }
                        }
                    </span>
                </div>
            }
        </div>
        <div class="col-lg-3 nospace">
            <div class="bg-success text-right small" style="padding: 5px; height: 50%;">
                @{
                    var instances = Model.EventInstances.Where(i => i.DateTime >= DateTime.Today);
                }
                @if (instances.Count() != 0)
                {
                    <strong>@Model.EventInstances.Where(i => i.DateTime >= DateTime.Today).Min(i => i.DateTime).DayOfWeek</strong><br />
                    <strong>@Model.EventInstances.Where(i => i.DateTime >= DateTime.Today).Min(i => i.DateTime).ToString("MMMM dd, yyyy")</strong><br />
                    @Convert.ToDateTime(Model.StartTime).ToShortTimeString()
                }
                else
                {
                    <text>Past Event</text>
                }
            </div>
            <div class="text-right" style="padding: 0px !important; margin-top: 2px; white-space: normal; vertical-align: bottom; background-color: red;">
                @foreach (var s in Model.DanceStyles)
            {
                    <span class="label label-default pull-right" style="margin: 1px;">@s.Name</span><text> </text>
                }
            </div>
        </div>
    </div>
</div>
