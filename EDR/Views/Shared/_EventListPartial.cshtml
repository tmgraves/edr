@model EDR.Models.ViewModels.EventsViewModel
@using EDR.Utilities
@using EDR.Models

<style>
    #map-canvas {
        width: 100%;
        height: 400px;
    }
</style>
<script src="https://maps.googleapis.com/maps/api/js"></script>
<script>
    var map;
    var markers = [];
    var infowindows = [];

    function initialize() {
        var mapOptions = {
            zoom: @(Model.Zoom),
            //  zoomControl: false,
            center: new google.maps.LatLng('@Model.Location.Latitude', '@Model.Location.Longitude')
        };

        map = new google.maps.Map(document.getElementById('map-canvas'),
            mapOptions);

        @{
            int idx = 1;
            var today = DateTime.Today;
            foreach (var ev in Model.Events.Where(x => x.EndDate >= DateTime.Today || x.EndDate == null).OrderBy(x => x.NextDate))
            {
                <text>
        var marker = new google.maps.Marker({
            position: new google.maps.LatLng('@ev.Place.Latitude', '@ev.Place.Longitude'),
            map: map,
            title: '@ev.Name',
            icon: "http://maps.google.com/mapfiles/kml/paddle/" + @idx + "-lv.png"
        });

        attachMessage(marker, '@ev.Id', '@(ev.Place.Name) (@(ev.Place.PlaceType))', '@ev.Place.Address <br/> @ev.Place.City , @ev.Place.State  @ev.Place.Zip', '<a href="@Url.Action("View", "Event", new { id = ev.Id, eventType = Model.EventType })">' + marker.title + '</a>', '@(ev.EventMembers != null ? ev.EventMembers.Count : 0)', '@(ev.Videos != null ? ev.Videos.Count : 0)', '@(ev.Pictures != null ? ev.Pictures.Count : 0)', '@Model.EventType.ToString()', '@(Url.Content(ev.PhotoUrl == null ? "~/Content/images/class.jpg" : ev.PhotoUrl))');
        markers.push(marker);

        </text>
                idx += 1;
            }
        }

        //  clearMarkers();

        google.maps.event.addListener(map, 'idle', function () {
            var bounds = map.getBounds();
            var ne = bounds.getNorthEast(); // LatLng of the north-east corner
            var sw = bounds.getSouthWest(); // LatLng of the south-west corder
            var center = map.getCenter();
            $("#NELat").val(ne.lat());
            $("#NELng").val(ne.lng());
            $("#SWLat").val(sw.lat());
            $("#SWLng").val(sw.lng());
            $("#CenterLat").val(center.lat());
            $("#CenterLng").val(center.lng());
            $("#Zoom").val(map.getZoom());
        });

        google.maps.event.addListener(map, 'dragend', function () {
            $("#location").val("");
        });

        google.maps.event.addListener(map, 'zoom_changed', function () {
            $("#location").val("");
        });
    }

    function clearMarkers() {
        setAllMap(null);
    }

    function setAllMap(map) {
        for (var i = 0; i < markers.length; i++) {
            markers[i].setMap(map);
        }
    }

    function clearWindows() {
        for (var i = 0; i < infowindows.length; i++) {
            infowindows[i].close();
        }
    }

    // The five markers show a secret message when clicked
    // but that message is not within the marker's instance data
    function attachMessage(marker, num, placeName, address, link, users, videos, pictures, eventtype, photourl) {
        var message = marker.title;
        var infowindow = new google.maps.InfoWindow({
            disableAutoPan: true,
            content: '<div id="content">' +
            '<div id="siteNotice">' +
            '</div>' +
            '<div style="display: block;">' +
            '<img style="max-width: 50px; max-height: 50px; display: inline-block; padding-right: 5px;" src="' + photourl + '"/>' +
            '<h4 style="display: inline-block;" id="firstHeading" class="firstHeading">' + link + '</h4>' +
            '</div>' +
            '<strong>' + placeName + '</strong>' +
            '<div id="bodyContent">' +
            '<p>' +
            address +
            '</p>' +
            '</div>' +
            '</div>'
        });
        infowindows.push(infowindow);

        //  infowindow.open(map, marker);

        google.maps.event.addListener(marker, 'click', function () {
            clearWindows();
            infowindow.open(map, marker);
        });
    }

    function openEvent(id, lati, long) {
        var latLng = new google.maps.LatLng(lati, long); //Makes a latlng
        map.panTo(latLng); //Make map global
        //  map.setZoom(14);
        //  clearMarkers();
        markers[id].setMap(map);
        clearWindows();
        infowindows[id].open(map, markers[id]);
        return false;
    }

    google.maps.event.addDomListener(window, 'load', initialize);
</script>

<div class="col-sm-12 col-md-6 col-lg-6 col-xs-12">
@if (Model.Events.Count() != 0)
{
    int rowNo = 0;
    if (Model.Events.Where(x => x.EndDate >= DateTime.Today || x.EndDate == null).Count() != 0)
    {
        foreach (var item in Model.Events.Where(x => x.EndDate >= DateTime.Today || x.EndDate == null).OrderBy(x => x.NextDate))
        {
            <a class="btn btn-default" style="text-align: left; width: 100%; white-space: normal; display: inline-block;" onclick="openEvent(@rowNo, @item.Place.Latitude, @item.Place.Longitude); return false;" href="#">
                <div class="col-lg-2 col-md-2 col-sm-3 col-xs-3 text-center img-thumbnail">
                    <span class="text-primary">@item.NextDate.ToString("ddd").ToUpper()</span><br />
                    <span class="text-success">@item.NextDate.ToString("MMM").ToUpper() @item.NextDate.Day.ToString()</span><br />
                    <span class="small text-danger">
                        @if (!item.AllDay)
                        {
                            @(Convert.ToDateTime(item.StartTime).ToString("%h:mm tt"))
                        }
                        else
                        {
                            @:All Day
                        }
                    </span>
                </div>
                <div class="col-lg-7 col-md-7 col-sm-9 col-xs-9">
                    <strong>@(rowNo += 1). @item.Name</strong><br />
                    <span class="text-success"> @@@item.Place.Name</span>
                    @if (item is Class)
                    {
                        if(((Class)item).Teachers != null)
                        {
                            var teacherset = ((Class)item).Teachers;

                            if (teacherset.Count() > 0)
                            {
                                var teachers = "";
                                <br /><text>w/</text><span class="text-primary">
                                @foreach (var t in teacherset)
                                {
                                    if (teachers != "")
                                    {
                                        teachers += ", ";
                                    }
                                    teachers += t.ApplicationUser.FirstName;
                                }
                                @teachers
                                </span>
                            }
                        }
                    }
                    @if (item.Recurring)
                    {
                        ApplicationUtility.FrequencyTranslate(item.Frequency, item.Interval == null ? 0 : (int)item.Interval);
                    }
                    @if (item.Price != null)
                    {
                        <br />
                        @(item.Price == 0 ? "FREE" : ((decimal)item.Price).ToString("C"))
                    }
                    @if (item.DanceStyles != null)
                    {
                        <br />
                        foreach (var s in item.DanceStyles)
                        {
                            <span class="label label-info">@s.Name</span>
                        }
                    }
                </div>
                <div class="col-lg-3 col-md-3 col-sm-9 col-xs-9">
                    <strong><span class="text-danger bold">@item.Reviews.Where(r => r.Like).Count() <i class="glyphicon glyphicon-thumbs-up"></i> | @item.Reviews.Where(r => !r.Like).Count() <i class="glyphicon glyphicon-thumbs-down"></i></span></strong>
                    @if (item is Class)
                    {
                        <br />
                        <span class="label label-warning">
                            Skill Level: @(((Class)item).SkillLevel)
                        </span>
                    }
                    <br />
                    <span class="text-info"><span class="badge">@item.EventMembers.Count()</span> Dancer(s)</span>
                </div>
            </a>
        }
    }
    else
    {
        <p style="margin: 10px;">
            No Events
        </p>
    }
}
else
{
    @:No Events
}
</div>
<div class="col-sm-12 col-md-6 col-lg-6 col-xs-12">
    <div class="container" id="map-canvas"></div>
</div>
