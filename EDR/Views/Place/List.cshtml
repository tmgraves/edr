@model EDR.Models.ViewModels.PlaceListViewModel
@using MvcCheckBoxList.Model

@{
    ViewBag.Title = "List";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container" style="padding: 10px;">
<style>
    #map-canvas {
        width: 100%;
        height: 400px;
    }
</style>
<script src="https://maps.googleapis.com/maps/api/js"></script>
<script>
    var map;
    var markers = [];
    var infowindows = [];
    var lat = 0;
    var lng = 0;

    $(function () {
        navigator.geolocation.getCurrentPosition(showPosition, positionError);

        function showPosition(position) {
            var coordinates = position.coords;
            lat = coordinates.latitude;
            lng = coordinates.longitude;
        }

        function positionError(position) {
            alert("Error " + position.code);
        }
    });

    function initialize() {
        @if(Model.CenterLat != null && Model.CenterLng != null)
        {
            <text>
                lat = '@Model.CenterLat';
                lng = '@Model.CenterLng';
            </text>
        }
        var mapOptions = {
            zoom: @Model.Zoom,
            center: new google.maps.LatLng(lat, lng)
        };

        map = new google.maps.Map(document.getElementById('map-canvas'),
            mapOptions);

        @{
            int idx = 1;
            var today = DateTime.Today;
            foreach(var pl in Model.Places)
            {
                <text>
        var marker = new google.maps.Marker({
            position: new google.maps.LatLng('@pl.Latitude', '@pl.Longitude'),
            map: map,
            title: '@pl.Name',
            icon: "http://maps.google.com/mapfiles/kml/paddle/" + @idx + "-lv.png"
        });

        attachMessage(marker, '@pl.Id', '@pl.Name', '@pl.Address <br/> @pl.City , @pl.State  @pl.Zip', '<a href="@Url.Action("Details", "Place", new { id = pl.Id })">' + marker.title + '</a>', 5, 5);
        markers.push(marker);

        </text>
                idx += 1;
            }
        }

        //  clearMarkers();

        google.maps.event.addListener(map, 'idle', function () {
            var bounds = map.getBounds();
            var ne = bounds.getNorthEast(); // LatLng of the north-east corner
            var sw = bounds.getSouthWest(); // LatLng of the south-west corder
            var center = map.getCenter();
            $("#NELat").val(ne.lat());
            $("#NELng").val(ne.lng());
            $("#SWLat").val(sw.lat());
            $("#SWLng").val(sw.lng());
            $("#CenterLat").val(center.lat());
            $("#CenterLng").val(center.lng());
            $("#Zoom").val(map.getZoom());
        });

        google.maps.event.addListener(map, 'dragend', function () {
            $("#location").val("");
        });

        google.maps.event.addListener(map, 'zoom_changed', function () {
            $("#location").val("");
        });
    }

    function clearMarkers() {
        setAllMap(null);
    }

    function setAllMap(map) {
        for (var i = 0; i < markers.length; i++) {
            markers[i].setMap(map);
        }
    }

    function clearWindows() {
        for (var i = 0; i < infowindows.length; i++) {
            infowindows[i].close();
        }
    }

    // The five markers show a secret message when clicked
    // but that message is not within the marker's instance data
    function attachMessage(marker, num, placeName, address, link, students, classes) {
        var message = marker.title;
        var infowindow = new google.maps.InfoWindow({
            disableAutoPan: true,
            content: '<div id="content">' +
            '<div id="siteNotice">' +
            '</div>' +
            '<h4 id="firstHeading" class="firstHeading">' + link + '</h4>' +
            '<div id="bodyContent">' +
            '<p>' +
            address + '<br/>' +
            '</p>' +
            '</div>' +
            '</div>'
        });
        infowindows.push(infowindow);

        //  infowindow.open(map, marker);

        google.maps.event.addListener(marker, 'click', function () {
            clearWindows();
            infowindow.open(map, marker);
        });
    }

    function openPlace(id, lati, long) {
        var latLng = new google.maps.LatLng(lati, long); //Makes a latlng
        map.panTo(latLng); //Make map global
        markers[id].setMap(map);
        clearWindows();
        infowindows[id].open(map, markers[id]);
        return false;
    }

    google.maps.event.addDomListener(window, 'load', initialize);
    </script>

    <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
            <h1 class="page-header">All Places</h1>

            @using (Html.BeginForm("List", "Place", FormMethod.Get))
            {
                @Html.HiddenFor(x => x.NELat, 0)
                @Html.HiddenFor(x => x.NELng, 0)
                @Html.HiddenFor(x => x.SWLat, 0)
                @Html.HiddenFor(x => x.SWLng, 0)
                @Html.HiddenFor(x => x.CenterLat, 0)
                @Html.HiddenFor(x => x.CenterLng, 0)
                @Html.HiddenFor(x => x.Zoom, 0)
                <div class="row col-lg-12 col-md-12">
                    <div class="col-lg-12 col-md-12" style="margin-bottom: 5px;">
                        <div class="row">
                            <div class="form-group">
                                @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label col-md-2 col-lg-2 input-lg" })
                                <div class="col-md-10 col-lg-10">
                                    @Html.TextBoxFor(x => x.Location, null, new { @class = "form-control input-lg", @id = "location", @placeholder = "Enter your location (Los Angeles, CA, 90065, etc)" })
                                    @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-6 col-md-6">
                        <div class="row">
                            <div class="form-group">
                                @Html.LabelFor(model => model.DanceStyles, htmlAttributes: new { @class = "control-label col-md-3 col-lg-3" })
                                <div class="col-md-9 col-lg-9">
                                    @Html.DropDownListFor(x => x.DanceStyleId, new SelectList(Model.DanceStyles.OrderBy(s => s.Name), "Id", "Name", Model.DanceStyleId), "Pick a Dance Style", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.DanceStyles, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-6 col-md-6">
                        <div class="row">
                            <div class="form-group">
                                @Html.LabelFor(model => model.PlaceType, htmlAttributes: new { @class = "control-label col-md-3 col-lg-3" })
                                <div class="col-md-9 col-lg-9">
                                    @Html.EnumDropDownListFor(model => model.PlaceType, "Pick a Place Type", htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.PlaceType, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row col-lg-12 col-md-12" style="margin: 5px;">
                    <input type="submit" value="Search Places" class="btn btn-warning" />
                </div>
            }

            <div class="col-sm-6 col-md-6 col-lg-6 col-xs-6" style="height: 400px; overflow-x: auto;">
                @if (Model.Places.Count() > 0)
                {
                    @Html.Partial("~/Views/Shared/_CompactPlaceListPartial.cshtml", Model.Places)
                }
                else
                {
                    @:No Places
            }
            </div>
            <div class="col-sm-6 col-md-6 col-lg-6 col-xs-6">
                <div class="container" id="map-canvas"></div>
            </div>
        </div>
    </div>
</div>
