@model EDR.Models.ViewModels.TeamCreateViewModel

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(x => x.Team.SchoolId)
    @Html.HiddenFor(model => model.Team.Latitude)
    @Html.HiddenFor(model => model.Team.Longitude)
    @Html.HiddenFor(model => model.Team.Public, new { @Value = "true" })

    <div class="form-horizontal">
        <h4>Team</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Team.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Team.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Team.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Team.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Team.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Team.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Team.FacebookLink, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Team.FacebookLink, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Team.FacebookLink, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Team.Address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Team.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Team.Address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Team.Address2, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Team.Address2, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Team.Address2, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Team.City, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Team.City, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Team.City, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Team.State, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Team.State, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Team.State, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Team.Zip, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Team.Zip, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Team.Zip, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Team.Country, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Team.Country, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Team.Country, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Team.SkillLevel, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.Team.SkillLevel, new SelectList(new List<int> { 1, 2, 3, 4, 5 }), "-- Select a Skill Level --", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Team.SkillLevel, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @Html.ActionLink("Cancel", "Manage", "Teacher", null, new { @class = "btn btn-warning pull-left" })
                <input type="submit" value="Create" class="btn btn-default pull-right" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts
{
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css" />
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryUI")
    @Scripts.Render("~/bundles/GeoComplete")
    <script src="https://maps.googleapis.com/maps/api/js?sensor=false&amp;libraries=places"></script>

    <script type="text/javascript">
    $(function () {
        $("#Team_Address").geocomplete({
            details: "form",
            types: ["geocode", "establishment"],
        })
        .bind("geocode:result", function (event, result) {
            $('#Team_Latitude').prop("value", result.geometry.location.lat());
            $('#Team_Longitude').prop("value", result.geometry.location.lng());
            var street_num;
            var street_name;
            $.each(result.address_components, function (i, address_component) {
                //alert(address_component.types[0]);
                //alert(address_component.long_name);
                if (address_component.types[0] == "street_number") {
                    street_num = address_component.long_name;
                }
                else if (address_component.types[0] == "route") {
                    street_name = address_component.long_name;
                }
                else if (address_component.types[0] == "locality") {
                    $('#Team_City').prop("value", address_component.long_name);
                }
                else if (address_component.types[0] == "administrative_area_level_1") {
                    $('#Team_State').prop("value", address_component.long_name);
                }
                else if (address_component.types[0] == "postal_code") {
                    $('#Team_Zip').prop("value", address_component.long_name);
                }
                else if (address_component.types[0] == "country") {
                    $('#Team_Country').prop("value", address_component.long_name);
                }
            });
            //alert(street_num + " " + street_name);
            $('#Team_Address').prop("value", street_num + " " + street_name);
            //  console.log(result);
        });
    });
    </script>
}
