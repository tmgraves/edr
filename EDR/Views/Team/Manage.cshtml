@model EDR.Models.ViewModels.TeamManageViewModel

<ol class="breadcrumb">
    <li>@Html.ActionLink("All Teams", "Index", "Team")</li>
    <li>@Html.ActionLink("Team Page", "View", "Team", new { id = Model.Team.Id }, null)</li>
    <li class="active">Manage Team</li>
</ol>

@{
    ViewBag.Title = "Manage " + Model.Team.Name;
}

<h2>Manage: <span class="text-info">@Model.Team.Name</span></h2>
<hr />

<div class="container-fluid">
    <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
        <div class="panel panel-default">
            <div class="panel-body ">
                <h3>Team Details</h3>
                <div id="viewdiv">
                    <div class="text-right" style="padding-bottom: 10px;">
                        <input id="btnEdit" type="button" class="btn btn-primary" value="Edit" />
                    </div>
                    <div class="text-center">
                        <div class="buttoncontainer" style="display: inline-block;">
                            <img id="profilepic" src="@Url.Content(EDR.Utilities.ApplicationUtility.CheckImageLink(Model.Team.PhotoUrl))"  />
                            <button id="btnChangePicture" type="button" class="btn btn-info actionbutton" data-toggle="modal" data-target="#modalPic">
                                Change
                            </button>
                        </div>
                    </div>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.LabelFor(model => model.Team.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.Team.Name)
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.Label("School", htmlAttributes: new { @class = "control-label col-md-2" })
                        </dt>
                        <dd>
                            @if (Model.Team.School != null)
                            {
                                @Html.ActionLink(Model.Team.School.Name, "View", "School", new { id = Model.Team.School.Id }, null)
                            }
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.LabelFor(model => model.Team.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.Team.Description)
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.LabelFor(model => model.Team.FacebookLink, htmlAttributes: new { @class = "control-label col-md-2" })
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.Team.FacebookLink)
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.LabelFor(model => model.Team.Public, htmlAttributes: new { @class = "control-label col-md-2" })
                        </dt>
                        <dd class="checkbox">
                            @(Model.Team.Public ? "Yes" : "No")
                            @*@Html.DisplayFor(model => model.Team.Public)*@
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.LabelFor(model => model.Team.DateStarted, htmlAttributes: new { @class = "control-label col-md-2" })
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.Team.DateStarted)
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.LabelFor(model => model.Team.Address, htmlAttributes: new { @class = "control-label col-md-2" })
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.Team.Address)
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.LabelFor(model => model.Team.Address2, htmlAttributes: new { @class = "control-label col-md-2" })
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.Team.Address2)
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.LabelFor(model => model.Team.City, htmlAttributes: new { @class = "control-label col-md-2" })
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.Team.City)
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.LabelFor(model => model.Team.State, htmlAttributes: new { @class = "control-label col-md-2" })
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.Team.State)
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.LabelFor(model => model.Team.Zip, htmlAttributes: new { @class = "control-label col-md-2" })
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.Team.Zip)
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.LabelFor(model => model.Team.Country, htmlAttributes: new { @class = "control-label col-md-2" })
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.Team.Country)
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.LabelFor(model => model.Team.SkillLevel, htmlAttributes: new { @class = "control-label col-md-2" })
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.Team.SkillLevel)
                        </dd>
                    </dl>
                </div>
                <div id="editdiv" style="display: none;">
                    @Html.ValidationSummary("", new { @class = "text-danger" })
                    @using (Html.BeginForm("Manage", "Team", FormMethod.Post, new { @id = "saveform", @class = "main" }))
            {
                        @Html.HiddenFor(x => x.Team.Id)
                        @Html.HiddenFor(model => model.Team.Latitude)
                        @Html.HiddenFor(model => model.Team.Longitude)
                        @Html.HiddenFor(x => x.Team.SchoolId)
                        <div class="text-right" style="padding-bottom: 10px;">
                            <input type="submit" id="btnsave" value="Save" class="btn btn-success" />
                            <input id="btncanceledit" type="button" class="btn btn-primary" value="Cancel" />
                        </div>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(model => model.Team.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd>
                                @Html.EditorFor(model => model.Team.Name, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Team.Name, "", new { @class = "text-danger" })
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(model => model.Team.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd>
                                @Html.EditorFor(model => model.Team.Description, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Team.Description, "", new { @class = "text-danger" })
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(model => model.Team.FacebookLink, htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd>
                                @Html.EditorFor(model => model.Team.FacebookLink, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Team.FacebookLink, "", new { @class = "text-danger" })
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(model => model.Team.Public, htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd class="checkbox">
                                @Html.CheckBoxFor(m => m.Team.Public, new { @class = "recurring", @data_toggle = "toggle", @data_on = "Yes", @data_off = "No" })
                                @*@Html.EditorFor(model => model.Team.Public)*@
                                @Html.ValidationMessageFor(model => model.Team.Public, "", new { @class = "text-danger" })
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(model => model.Team.DateStarted, htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd>
                                @Html.EditorFor(model => model.Team.DateStarted, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Team.DateStarted, "", new { @class = "text-danger" })
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(model => model.Team.Address, htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd>
                                @Html.EditorFor(model => model.Team.Address, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Team.Address, "", new { @class = "text-danger" })
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(model => model.Team.Address2, htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd>
                                @Html.EditorFor(model => model.Team.Address2, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Team.Address2, "", new { @class = "text-danger" })
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(model => model.Team.City, htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd>
                                @Html.EditorFor(model => model.Team.City, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Team.City, "", new { @class = "text-danger" })
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(model => model.Team.State, htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd>
                                @Html.EditorFor(model => model.Team.State, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Team.State, "", new { @class = "text-danger" })
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(model => model.Team.Zip, htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd>
                                @Html.EditorFor(model => model.Team.Zip, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Team.Zip, "", new { @class = "text-danger" })
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(model => model.Team.Country, htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd>
                                @Html.EditorFor(model => model.Team.Country, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Team.Country, "", new { @class = "text-danger" })
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(model => model.Team.SkillLevel, htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd>
                                @Html.EditorFor(model => model.Team.SkillLevel, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Team.SkillLevel, "", new { @class = "text-danger" })
                            </dd>
                        </dl>

                        <div class="form-group">
                            <div class="col-md-10">
                            </div>
                        </div>
            }
                </div>
            </div>
        </div>
        <div class="panel panel-default">
            <div class="panel-body buttoncontainer">
                <h3>Teachers</h3>
                <div>
                    @using (Html.BeginForm("AddTeacher", "Team", FormMethod.Post))
                    {
                        <input type="hidden" id="id" name="id" value="@Model.Team.Id" />
                        <input type="hidden" class="teachersearchid" id="teacherid" name="teacherid" />
                        <input type="text" class="teachersearch form-control" placeholder="Type in a Teacher Name" style="display: inline-block;" />
                        <button type="submit" class="btn btn-primary btn-sm" style="display: inline-block;">Add Teacher</button>
                    }
                </div>
                <div id="teachers">
                    <table style="width: 100%;">
                        <tr>
                            <th>
                                Name
                            </th>
                            <th>
                            </th>
                        </tr>
                        @foreach (var t in Model.Team.Teachers)
                        {
                            <tr>
                                <td>
                                    @Html.DisplayFor(model => t.ApplicationUser.FullName)
                                </td>
                                <td class="text-right">
                                    @if (t.ApplicationUser.UserName != User.Identity.Name)
                                    {
                                        <a class="btn btn-link text-danger" title="Remove" href="@Url.Action("RemoveTeacher", new { id = Model.Team.Id, teacherid = t.Id })" onclick="return confirm('Are you sure you want to remove this Teacher?')">
                                            <i class="text-danger glyphicon glyphicon-remove-circle"></i>
                                        </a>
                                    }
                                </td>
                            </tr>
                        }
                    </table>
                </div>
            </div>
        </div>
        <div class="panel panel-default">
            <div class="panel-body ">
                <h3>Dance Styles</h3>
                @using (Ajax.BeginForm("AddStyle",
                                    "Team",
                                    new AjaxOptions()
                                    {
                                        UpdateTargetId = "stylesdiv",
                                        OnSuccess = "done(this)"
                                    },
                                    new { @id = "addstyleform" }
                                    ))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.Team.Id)
                    @Html.HiddenFor(m => m.NewStyleId)
                    @Html.TextBox("stylesearch", "", new { placeholder = "Search for a Dance Style", @class = "form-control col-md-4" })
                    <input class="btn" type="submit" value="Add Style" />
                }
                <div id="stylesdiv">
                    @Html.Partial("~/Views/Team/Partial/_DanceStylesPartial.cshtml", new EDR.Models.ViewModels.TeamDanceStylesPartialViewModel() { DanceStyles = Model.Team.DanceStyles, TeamId = Model.Team.Id })
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
        <div class="panel panel-default">
            <div class="panel-body ">
                <h3>Members</h3>
                @using (Html.BeginForm("AddMember", "Team", FormMethod.Post))
                {
                    @Html.HiddenFor(model => model.Team.Id)
                    @Html.HiddenFor(m => m.NewMemberId)
                    <input type="text" id="newmember" placeholder="Search for a User" required class="form-control" style="display: inline-block;" />
                    <input type="submit" value="Add Member" class="btn btn-primary btn-sm" style="display: inline-block;"  />
                }
                <div id="membersdiv">
                    @using (Html.BeginForm("UpdateMembers", "Team", FormMethod.Post))
                    {
                        @Html.HiddenFor(model => model.Team.Id)
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Admin</th>
                                    <th></th>
                                </tr>
                            </thead>
                            @Html.EditorFor(model => model.Team.Members)
                        </table>
                        <div>
                            <input type="submit" value="Update Members" class="btn btn-warning" />
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="panel panel-default">
            <div class="panel-body ">
                <h3>Rehearsal Schedule</h3>
                <div id="rehearsalsdiv">
                    <input id="btnAddRehearsal" type="button" class="btn btn-link" value="Add Rehearsal" />
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>
                                    Day
                                </th>
                                <th>
                                    Time
                                </th>
                                <th>
                                    Location
                                </th>
                                <th>
                                </th>
                            </tr>
                        </thead>
                        @foreach (var r in Model.Team.Rehearsals)
                        {
                            <tr>
                                <td>
                                    @r.Day
                                </td>
                                <td>
                                    @r.Time.ToShortTimeString()
                                </td>
                                <td>
                                    @r.Place.Name<br />
                                    @r.Place.Address<br />
                                    @r.Place.City, @r.Place.State @r.Place.Zip
                                </td>
                                <td>
                                    <a class="btn btn btn-danger" title="Delete" href="@Url.Action("DeleteRehearsal", "Team", new { id = r.Id })" onclick="return confirm('Are you sure you want to DELETE this Rehearsal?')">
                                        <i class="glyphicon glyphicon-remove"></i>
                                    </a>
                                </td>
                            </tr>
                        }
                    </table>
                </div>
                <div id="addrehearsaldiv" style="display: none;">
                    @Html.ValidationSummary("", new { @class = "text-danger" })
                    @using (Html.BeginForm("AddRehearsal", "Team", FormMethod.Post, new { @id = "addrehearsalform", @class = "main" }))
                    {
                        @Html.HiddenFor(x => x.NewRehearsal.TeamId, new { @Value = Model.Team.Id })
                        <div class="text-right" style="padding-bottom: 10px;">
                            <input type="submit" id="btnsaverehearsal" value="Save" class="btn btn-primary" />
                            <input id="btncancelrehearsal" type="button" class="btn btn-primary" value="Cancel" />
                        </div>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(model => model.NewRehearsal.Day, htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd>
                                @Html.EnumDropDownListFor(m => m.NewRehearsal.Day, null, new { @class = "form-control"})
                                @Html.ValidationMessageFor(model => model.NewRehearsal.Day, "", new { @class = "text-danger" })
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(model => model.NewRehearsal.Time, htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd class="timepicker" id="tpdd">
                                @Html.DropDownList("RehearsalHour", new SelectList(new List<SelectListItem>
                                                {
                                                    new SelectListItem { Text = "01", Value = "1" },
                                                    new SelectListItem { Text = "02", Value = "2" },
                                                    new SelectListItem { Text = "03", Value = "3" },
                                                    new SelectListItem { Text = "04", Value = "4" },
                                                    new SelectListItem { Text = "05", Value = "5" },
                                                    new SelectListItem { Text = "06", Value = "6" },
                                                    new SelectListItem { Text = "07", Value = "7" },
                                                    new SelectListItem { Text = "08", Value = "8" },
                                                    new SelectListItem { Text = "09", Value = "9" },
                                                    new SelectListItem { Text = "10", Value = "10" },
                                                    new SelectListItem { Text = "11", Value = "11" },
                                                    new SelectListItem { Text = "12", Value = "12" }
                                                    }, "Value", "Text", null), new { @class = "form-control time hour", style = "width: 70px; display: inline;" })
                                @Html.DropDownList("RehearsalMinute", new SelectList(new List<string> { "00", "15", "30", "45" }), new { @class = "form-control time minute", style = "width: 70px; display: inline;" })
                                @Html.DropDownList("RehearsalAMPM", new SelectList(new List<string>() { "AM", "PM" }), new { @class = "form-control time ampm", style = "width: 70px; display: inline;" })
                                @Html.HiddenFor(m => m.NewRehearsal.Time, new { @class = "timeelement" })
                                @Html.ValidationMessageFor(model => model.NewRehearsal.Time, "", new { @class = "text-danger" })
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(model => model.NewRehearsal.PlaceId, htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd>
                                @Html.HiddenFor(m => m.NewRehearsal.PlaceId)
                                <input type="text" id="rehearsalplace" placeholder="Type in a Place" required class="form-control" />
                                @Html.ValidationMessageFor(model => model.NewRehearsal.PlaceId, "", new { @class = "text-danger" })
                            </dd>
                        </dl>
                    }
                </div>
            </div>
        </div>
        <div class="panel panel-default">
            <div class="panel-body ">
                <h3>Auditions</h3>
                <div id="auditionsdiv">
                    <input id="btnAddAudition" type="button" class="btn btn-link" value="Add Audition" />
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>
                                    Date
                                </th>
                                <th>
                                    Start Time
                                </th>
                                <th>
                                    End Time
                                </th>
                                <th>
                                    Location
                                </th>
                                <th>
                                </th>
                            </tr>
                        </thead>
                        @foreach (var r in Model.Team.Auditions)
                        {
                            <tr>
                                <td>
                                    @r.StartDate.ToShortDateString()
                                </td>
                                <td>
                                    @(((DateTime)r.StartTime).ToShortTimeString())
                                </td>
                                <td>
                                    @(((DateTime)r.EndTime).ToShortTimeString())
                                </td>
                                <td>
                                    @r.Place.Name<br />
                                    @r.Place.Address<br />
                                    @r.Place.City, @r.Place.State @r.Place.Zip
                                </td>
                                <td>
                                    <a class="btn btn btn-danger" title="Delete" href="@Url.Action("DeleteAudition", "Team", new { id = r.Id })" onclick="return confirm('Are you sure you want to DELETE this Audition?')">
                                        <i class="glyphicon glyphicon-remove"></i>
                                    </a>
                                </td>
                            </tr>
                        }
                    </table>
                </div>
                <div id="addauditiondiv" style="display: none;">
                    @Html.ValidationSummary("", new { @class = "text-danger" })
                    @using (Html.BeginForm("AddAudition", "Team", FormMethod.Post, new { @id = "addauditionform", @class = "main" }))
                    {
                        @Html.HiddenFor(x => x.NewAudition.TeamId, new { @Value = Model.Team.Id })
                        <div class="text-right" style="padding-bottom: 10px;">
                            <input type="submit" value="Save" class="btn btn-primary" />
                            <input id="btncancelaudition" type="button" class="btn btn-primary" value="Cancel" />
                        </div>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(model => model.NewAudition.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd>
                                @Html.TextBoxFor(m => m.NewAudition.StartDate, "{0:yyyy-MM-dd}", htmlAttributes: new { @type = "date", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.NewAudition.StartDate, "", new { @class = "text-danger" })
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(model => model.NewAudition.StartTime, htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd class="timepicker" id="tpdd">
                                @Html.DropDownList("AuditionHour", new SelectList(new List<SelectListItem>
                                                {
                                                    new SelectListItem { Text = "01", Value = "1" },
                                                    new SelectListItem { Text = "02", Value = "2" },
                                                    new SelectListItem { Text = "03", Value = "3" },
                                                    new SelectListItem { Text = "04", Value = "4" },
                                                    new SelectListItem { Text = "05", Value = "5" },
                                                    new SelectListItem { Text = "06", Value = "6" },
                                                    new SelectListItem { Text = "07", Value = "7" },
                                                    new SelectListItem { Text = "08", Value = "8" },
                                                    new SelectListItem { Text = "09", Value = "9" },
                                                    new SelectListItem { Text = "10", Value = "10" },
                                                    new SelectListItem { Text = "11", Value = "11" },
                                                    new SelectListItem { Text = "12", Value = "12" }
                                                    }, "Value", "Text", null), new { @class = "form-control time hour", style = "width: 70px; display: inline;" })
                                @Html.DropDownList("AuditionMinute", new SelectList(new List<string> { "00", "15", "30", "45" }), new { @class = "form-control time minute", style = "width: 70px; display: inline;" })
                                @Html.DropDownList("AuditionAMPM", new SelectList(new List<string>() { "AM", "PM" }), new { @class = "form-control time ampm", style = "width: 70px; display: inline;" })
                                @Html.HiddenFor(m => m.NewAudition.StartTime, new { @class = "timeelement", @Value = "1/1/2000 1:00 AM" })
                                @Html.ValidationMessageFor(model => model.NewAudition.StartTime, "", new { @class = "text-danger" })
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(model => model.NewAudition.EndTime, htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd class="timepicker" id="tpdd">
                                @Html.DropDownList("AuditionEndHour", new SelectList(new List<SelectListItem>
                                                {
                                                    new SelectListItem { Text = "01", Value = "1" },
                                                    new SelectListItem { Text = "02", Value = "2" },
                                                    new SelectListItem { Text = "03", Value = "3" },
                                                    new SelectListItem { Text = "04", Value = "4" },
                                                    new SelectListItem { Text = "05", Value = "5" },
                                                    new SelectListItem { Text = "06", Value = "6" },
                                                    new SelectListItem { Text = "07", Value = "7" },
                                                    new SelectListItem { Text = "08", Value = "8" },
                                                    new SelectListItem { Text = "09", Value = "9" },
                                                    new SelectListItem { Text = "10", Value = "10" },
                                                    new SelectListItem { Text = "11", Value = "11" },
                                                    new SelectListItem { Text = "12", Value = "12" }
                                                    }, "Value", "Text", null), new { @class = "form-control time hour", style = "width: 70px; display: inline;" })
                                @Html.DropDownList("AuditionEndMinute", new SelectList(new List<string> { "00", "15", "30", "45" }), new { @class = "form-control time minute", style = "width: 70px; display: inline;" })
                                @Html.DropDownList("AuditionEndAMPM", new SelectList(new List<string>() { "AM", "PM" }), new { @class = "form-control time ampm", style = "width: 70px; display: inline;" })
                                @Html.HiddenFor(m => m.NewAudition.EndTime, new { @class = "timeelement", @Value = "1/1/2000 1:00 AM" })
                                @Html.ValidationMessageFor(model => model.NewAudition.EndTime, "", new { @class = "text-danger" })
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(model => model.NewAudition.PlaceId, htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd>
                                @Html.HiddenFor(m => m.NewAudition.PlaceId)
                                <input type="text" id="auditionplace" placeholder="Type in a Place" required class="form-control" />
                                @Html.ValidationMessageFor(model => model.NewAudition.PlaceId, "", new { @class = "text-danger" })
                            </dd>
                        </dl>
                    }
                </div>
            </div>
        </div>
        <div class="panel panel-default">
            <div class="panel-body ">
                <h3>Performances</h3>
                <div id="performancesdiv">
                    <input id="btnAddPerformance" type="button" class="btn btn-link" value="Add Performance" />
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>
                                    Date
                                </th>
                                <th>
                                    Start Time
                                </th>
                                <th>
                                    Event/Location
                                </th>
                                <th>
                                </th>
                            </tr>
                        </thead>
                        @foreach (var r in Model.Team.Performances)
                        {
                            <tr>
                                <td>
                                    @r.StartDate.ToShortDateString()
                                </td>
                                <td>
                                    @(((DateTime)r.StartTime).ToShortTimeString())
                                </td>
                                <td>
                                    @if (r.Event != null)
                                    {
                                        @r.Event.Name<br />
                                    }
                                    @r.Place.Name<br />
                                    @r.Place.Address<br />
                                    @r.Place.City, @r.Place.State @r.Place.Zip
                                </td>
                                <td>
                                    <a class="btn btn btn-danger" title="Delete" href="@Url.Action("DeletePerformance", "Team", new { id = r.Id })" onclick="return confirm('Are you sure you want to DELETE this Performance?')">
                                        <i class="glyphicon glyphicon-remove"></i>
                                    </a>
                                </td>
                            </tr>
                        }
                    </table>
                </div>
                <div id="addperformancediv" style="display: none;">
                    @Html.ValidationSummary("", new { @class = "text-danger" })
                    @using (Html.BeginForm("AddPerformance", "Team", FormMethod.Post, new { @id = "addperformanceform", @class = "main" }))
                    {
                        @Html.HiddenFor(x => x.NewPerformance.TeamId, new { @Value = Model.Team.Id })
                        <div class="text-right" style="padding-bottom: 10px;">
                            <input type="submit" value="Save" class="btn btn-primary" />
                            <input id="btncancelperformance" type="button" class="btn btn-primary" value="Cancel" />
                        </div>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(model => model.NewPerformance.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd>
                                @Html.TextBoxFor(m => m.NewPerformance.StartDate, "{0:yyyy-MM-dd}", htmlAttributes: new { @type = "date", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.NewPerformance.StartDate, "", new { @class = "text-danger" })
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(model => model.NewPerformance.StartTime, htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd class="timepicker" id="tpdd">
                                @Html.DropDownList("PerformanceHour", new SelectList(new List<SelectListItem>
                                                {
                                                    new SelectListItem { Text = "01", Value = "1" },
                                                    new SelectListItem { Text = "02", Value = "2" },
                                                    new SelectListItem { Text = "03", Value = "3" },
                                                    new SelectListItem { Text = "04", Value = "4" },
                                                    new SelectListItem { Text = "05", Value = "5" },
                                                    new SelectListItem { Text = "06", Value = "6" },
                                                    new SelectListItem { Text = "07", Value = "7" },
                                                    new SelectListItem { Text = "08", Value = "8" },
                                                    new SelectListItem { Text = "09", Value = "9" },
                                                    new SelectListItem { Text = "10", Value = "10" },
                                                    new SelectListItem { Text = "11", Value = "11" },
                                                    new SelectListItem { Text = "12", Value = "12" }
                                                    }, "Value", "Text", null), new { @class = "form-control time hour", style = "width: 70px; display: inline;" })
                                @Html.DropDownList("PerformanceMinute", new SelectList(new List<string> { "00", "15", "30", "45" }), new { @class = "form-control time minute", style = "width: 70px; display: inline;" })
                                @Html.DropDownList("PerformanceAMPM", new SelectList(new List<string>() { "AM", "PM" }), new { @class = "form-control time ampm", style = "width: 70px; display: inline;" })
                                @Html.HiddenFor(m => m.NewPerformance.StartTime, new { @class = "timeelement", @Value = "1/1/2000 1:00 AM" })
                                @Html.ValidationMessageFor(model => model.NewPerformance.StartTime, "", new { @class = "text-danger" })
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(model => model.NewPerformance.PlaceId, htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd>
                                @Html.HiddenFor(m => m.NewPerformance.PlaceId)
                                <input type="text" id="performanceplace" placeholder="Search for a Place" required class="form-control" />
                                @Html.ValidationMessageFor(model => model.NewPerformance.PlaceId, "", new { @class = "text-danger" })
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                OR
                            </dt>
                            <dd>
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(model => model.NewPerformance.EventId, htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd>
                                @Html.HiddenFor(m => m.NewPerformance.EventId)
                                <input type="text" id="performanceevent" placeholder="Search for an Event" required class="form-control" />
                                @Html.ValidationMessageFor(model => model.NewPerformance.EventId, "", new { @class = "text-danger" })
                            </dd>
                        </dl>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal Picture Upload -->
<div class="modal fade" id="modalPic" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h3 class="picheader">Upload a New Picture</h3>
            </div>
            <div class="modal-body">
                <div id="divPick" class="text-center">
                    <p>
                        <button id="btnNewPicture" type="button" class="btn btn-primary">
                            Upload New Picture
                        </button>
                    </p>
                    <p>
                        <button id="btnPickFacebook" type="button" class="btn btn-warning">
                            Choose a Facebook Picture
                        </button>
                    </p>
                </div>
                <div id="divOptions" style="display: none;">
                    <div class="row text-center" style="padding: 5px;">
                        <div id="divUploadPic" style="display: none;">
                            <label for="imgInp" class="btn btn-primary btn-lg">
                                Choose File
                            </label>
                            <input id="imgInp" type="file" accept="image/*" />
                        </div>
                        <div id="divFacebookPic" style="display: none;">
                            <div id="facebookpics">
                            </div>
                        </div>
                    </div>
                    <div class="row" id="croppic">
                        <div>
                            <img class="img-responsive" id="image" alt="">
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <button id="btnupload" class="btn btn-danger" data-dismiss="modal" style="display: none;">Upload</button>
            </div>
        </div>
    </div>
</div>
<!-- Modal Picture Upload -->

@section Scripts
{
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css" />
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/foolproof")
    @Scripts.Render("~/bundles/jqueryUI")
    <script src="@Url.Content("~/Scripts/jquery.unobtrusive-ajax.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.form.js")" type="text/javascript"></script>
    @Scripts.Render("~/bundles/GeoComplete")
    <script src="https://maps.googleapis.com/maps/api/js?sensor=false&amp;libraries=places"></script>
<link href="../../Content/cropper.css" rel="stylesheet">
<script src="../../Scripts/cropper.js"></script>
<script src="../../Scripts/bootstrap-toggle.js"></script>
<link href="../../Content/bootstrap-toggle.css" rel="stylesheet">
<script src="~/Scripts/searchhelper.js"></script>

    <script type="text/javascript">
    $.validator.setDefaults({
        ignore: ""
    })

    $('#stylesearch').autocomplete({
        source: function (request, response) {
            $.ajax({
                url: '@Url.Action("Search", "DanceStyle")',
                data: { searchString: request.term },
                dataType: 'json',
                type: 'GET',
                success: function (data) {
                    response($.map(data, function (item) {
                        return {
                            label: item.Name,
                            value: item.Id
                        }
                    }));
                }
            })
        },
        select: function (event, ui) {
            $('#stylesearch').val(ui.item.label);
            $('#NewStyleId').val(ui.item.value);
            return false;
        },
        minLength: 1
    });

    $(function () {
        $('#saveform.main').valid();

        $('#btnEdit').click(function () {
            $('#viewdiv').hide();
            $('#editdiv').show();
            try
            {
                var valid = $('#saveform.main').valid();
            }
            catch(err)
            {
                document.getElementById("demo").innerHTML = err.message;
            }
        });
        $('#btncanceledit').click(function () {
            $('#viewdiv').show();
            $('#editdiv').hide();
        });

        $('#saveform.main').submit(function () {
            var valid = $('#saveform.main').valid();
        });

        $('#btnAddRehearsal').click(function () {
            $('#rehearsalsdiv').hide();
            $('#addrehearsaldiv').show();
            //try {
            //    var valid = $('#addrehearsalform.main').valid();
            //}
            //catch (err) {
            //    document.getElementById("demo").innerHTML = err.message;
            //}
        });
        $('#btncancelrehearsal').click(function () {
            $('#rehearsalsdiv').show();
            $('#addrehearsaldiv').hide();
        });

        $('#addrehearsalform.main').submit(function () {
            var valid = $('#addrehearsalform.main').valid();
        });

        $('#saverehearsal.main').submit(function () {
            var valid = $('#saverehearsal.main').valid();
        });

        $('.time').change(function () {
            var timepicker = $(this).parent('.timepicker');
            var timeelement = $('.timeelement', timepicker);
            SetDates(timepicker);
        });

        function SetDates(element) {
            var hour = $('.hour option:selected', element).val();
            var min = $('.minute option:selected', element).val();
            var ampm = $('.ampm option:selected', element).val();

            $('.timeelement', element).prop("value", "1/1/2000 " + hour + ":" + min + " " + ampm);
        }

        $('#addrehearsalform.main').submit(function () {
            $('#addrehearsalform.main').valid();
        });

        $('#btnAddAudition').click(function () {
            $('#auditionsdiv').hide();
            $('#addauditiondiv').show();
        });
        $('#btncancelaudition').click(function () {
            $('#auditionsdiv').show();
            $('#addauditiondiv').hide();
        });
        $('#addauditionform.main').submit(function () {
            $('#addauditionform.main').valid();
        });

        $('#btnAddPerformance').click(function () {
            $('#performancesdiv').hide();
            $('#addperformancediv').show();
        });
        $('#btncancelperformance').click(function () {
            $('#performancesdiv').show();
            $('#addperformancediv').hide();
        });
        $('#addperformanceform.main').submit(function () {
            $('#addperformanceform.main').valid();
        });
    });

    </script>

    <script type="text/javascript">
    $(function () {
        $("#Team_Address").geocomplete({
            details: "form",
            types: ["geocode", "establishment"],
        })
        .bind("geocode:result", function (event, result) {
            $('#Team_Latitude').prop("value", result.geometry.location.lat());
            $('#Team_Longitude').prop("value", result.geometry.location.lng());
            var street_num;
            var street_name;
            $.each(result.address_components, function (i, address_component) {
                //alert(address_component.types[0]);
                //alert(address_component.long_name);
                if (address_component.types[0] == "street_number") {
                    street_num = address_component.long_name;
                }
                else if (address_component.types[0] == "route") {
                    street_name = address_component.long_name;
                }
                else if (address_component.types[0] == "locality") {
                    $('#Team_City').prop("value", address_component.long_name);
                }
                else if (address_component.types[0] == "administrative_area_level_1") {
                    $('#Team_State').prop("value", address_component.long_name);
                }
                else if (address_component.types[0] == "postal_code") {
                    $('#Team_Zip').prop("value", address_component.long_name);
                }
                else if (address_component.types[0] == "country") {
                    $('#Team_Country').prop("value", address_component.long_name);
                }
            });
            //alert(street_num + " " + street_name);
            $('#Team_Address').prop("value", street_num + " " + street_name);
            //  console.log(result);
        });
    });

    $('#rehearsalplace').autocomplete({
        source: function (request, response) {
            $.ajax({
                url: '@Url.Action("Search", "Place")',
                data: { searchString: request.term },
                dataType: 'json',
                type: 'GET',
                success: function (data) {
                    response($.map(data, function (item) {
                        return {
                            label: item.Name,
                            value: item.Id
                        }
                    }));
                }
            })
        },
        select: function (event, ui) {
            $('#rehearsalplace').val(ui.item.label);
            $('#NewRehearsal_PlaceId').val(ui.item.value);
            return false;
        },
        minLength: 1
    });

    $('#auditionplace').autocomplete({
        source: function (request, response) {
            $.ajax({
                url: '@Url.Action("Search", "Place")',
                data: { searchString: request.term },
                dataType: 'json',
                type: 'GET',
                success: function (data) {
                    response($.map(data, function (item) {
                        return {
                            label: item.Name,
                            value: item.Id
                        }
                    }));
                }
            })
        },
        select: function (event, ui) {
            $('#auditionplace').val(ui.item.label);
            $('#NewAudition_PlaceId').val(ui.item.value);
            return false;
        },
        minLength: 1
    });

    $('#performanceplace').autocomplete({
        source: function (request, response) {
            $.ajax({
                url: '@Url.Action("Search", "Place")',
                data: { searchString: request.term },
                dataType: 'json',
                type: 'GET',
                success: function (data) {
                    response($.map(data, function (item) {
                        return {
                            label: item.Name,
                            value: item.Id
                        }
                    }));
                }
            })
        },
        select: function (event, ui) {
            $('#performanceplace').val(ui.item.label);
            $('#NewPerformance_PlaceId').val(ui.item.value);
            return false;
        },
        minLength: 1
    });

    $('#performanceevent').autocomplete({
        source: function (request, response) {
            $.ajax({
                url: '@Url.Action("Search", "Event")',
                data: { searchString: request.term },
                dataType: 'json',
                type: 'GET',
                success: function (data) {
                    response($.map(data, function (item) {
                        return {
                            label: item.Name,
                            value: item.Id
                        }
                    }));
                }
            })
        },
        select: function (event, ui) {
            $('#performanceevent').val(ui.item.label);
            $('#NewPerformance_EventId').val(ui.item.value);
            return false;
        },
        minLength: 1
    });
    $('#newmember').autocomplete({
        source: function (request, response) {
            $.ajax({
                url: '@Url.Action("Search", "Dancer")',
                data: { searchString: request.term },
                dataType: 'json',
                type: 'GET',
                success: function (data) {
                    response($.map(data, function (item) {
                        return {
                            label: item.Name,
                            value: item.Id
                        }
                    }));
                }
            })
        },
        select: function (event, ui) {
            $('#newmember').val(ui.item.label);
            $('#NewMemberId').val(ui.item.value);
            return false;
        },
        minLength: 1
    });
    </script>

    <script>
        LoadFacebookPhotos();
        function LoadFacebookPhotos() {
            $.get('@Url.Action("GetFacebookPicturesPartial", "Dancer")', {}, function (data) {
                $("#facebookpics").empty();
                $("#facebookpics").html(data);
            });
        }
        function loadImage(input) {
            if (input.files && input.files[0]) {
                if (input.files[0].size < 1000000)
                {
                    var reader = new FileReader();

                    reader.onload = function (e) {
                        $('#image').cropper({
                            aspectRatio: 10 / 10,
                            zoomable: false,
                        });
                        $("#image").cropper('replace', e.target.result);
                        $("#btnupload").show();
                    }

                    reader.readAsDataURL(input.files[0]);
                }
                else
                {
                    alert("Pick a smaller file");
                }
            }
        }

        $("#imgInp").change(function () {
            loadImage(this);
            $("#croppic").show();
        });

        $(function () {
            $('#btnupload').click(function () {
                try {
                    var imageData = $("#image").cropper("getCroppedCanvas").toDataURL('png', 1);
                    $.ajax({
                        url: "../../Team/UploadImageAsync",
                        type: 'POST',
                        data: { 'imageData': imageData, 'id' : '@Model.Team.Id' },
                        dataType: 'json',
                        timeout: 300000,
                        success: function (result) {
                            var status;
                            var filePath;
                            $.each(result, function (key, value) {
                                if (key == "UploadStatus")
                                {
                                    status = value;
                                }
                                else{
                                    filePath = value;
                                }
                            });
                            if (status == "Success")
                            {
                                $('#profilepic').attr('src', filePath);
                                $("#image").cropper('destroy');
                                $('#image').attr('src', "");
                                $("#btnupload").hide();
                            }
                            else
                            {
                                alert("Upload Failed");
                            }
                        }
                    });
                }
                catch (err) {
                    alert(err.message);
                }
            });

            $('#btnChangePicture').click(function () {
                $('#divPick').show();
                $('#divOptions').hide();
            });

            $('#btnNewPicture').click(function () {
                $('#divPick').hide();
                $('#divOptions').show();
                $('#divUploadPic').show();
                $('#divFacebookPic').hide();
                $('#croppic').hide();
                $('#image').attr('src', "");
            });

            $('#btnPickFacebook').click(function () {
                $('#divPick').hide();
                $('#divOptions').show();
                $('#divUploadPic').hide();
                $('#divFacebookPic').show();
                $('#croppic').hide();
                $('#image').attr('src', "");
            });

            $('#facebookpics').on("click", ".pickfbpic", function () {
                var src = $(this).prop('value');
                $('#image').attr('src', src);
                $('#croppic').show();
                $('#divFacebookPic').hide();
                $('#image').cropper({
                    aspectRatio: 10 / 10,
                    zoomable: false,
                });
                $("#image").cropper('replace', src);
                $("#btnupload").show();
            });
        });
    </script>
}
