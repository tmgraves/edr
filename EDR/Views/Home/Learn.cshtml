@model EDR.Models.ViewModels.LearnViewModel

@{
    ViewBag.Title = "Learn";
}

<ol class="breadcrumb">
    <li class="active">All Classes</li>
</ol>
<h1 class="text-center">Find a Class/Workshop</h1>
<p class="text-center">
    @Html.ActionLink("Find a Teacher", "List", "Teacher", null, null)
</p>

@using (Html.BeginForm("Learn", "Home", FormMethod.Post, new { @class = "formmain" }))
{
    @Html.HiddenFor(m => m.SearchAddress.Latitude, new { Name = "lat", @class = "latfield" })
    @Html.HiddenFor(m => m.SearchAddress.Longitude, new { Name = "lng", @class = "lngfield" })
    @Html.HiddenFor(m => m.NELat, new { @class = "nelatfield" })
    @Html.HiddenFor(m => m.NELng, new { @class = "nelngfield" })
    @Html.HiddenFor(m => m.SWLat, new { @class = "swlatfield" })
    @Html.HiddenFor(m => m.SWLng, new { @class = "swlngfield" })
    @Html.HiddenFor(m => m.CenterLat, new { @class = "clatfield" })
    @Html.HiddenFor(m => m.CenterLng, new { @class = "clngfield" })
    @Html.HiddenFor(m => m.Zoom, new { @class = "czoomfield" })
    <div class="container bg-info text-center" style="padding: 0px !important;">
        <div class="form-inline">
            <div class="row" style="padding-top: 5px; padding-bottom: 5px;">
                <div class="form-group">
                    @Html.TextBoxFor(m => m.Location, new { placeholder = "Location", @class = "form-control locationsearch" })
                </div>
                <div class="form-group">
                    @Html.HiddenFor(m => m.DanceStyleId, new { @class = "stylesearchid" })
                    @Html.TextBoxFor(m => m.Style, new { placeholder = "Dance Style", @class = "form-control stylesearch" })
                </div>
                <div class="form-group">
                    @Html.HiddenFor(m => m.TeacherId, new { @class = "teachersearchid" })
                    @Html.TextBoxFor(m => m.Teacher, new { placeholder = "Teacher", @class = "form-control teachersearch" })
                </div>
                <div class="form-group">
                    @*@Html.DropDownListFor(m => m.SkillLevel, new SelectList(new List<int> { 1, 2, 3, 4, 5 }), "Skill Level", new { @class = "form-control text-center" })*@
                    @Html.ListBoxFor(m => m.SkillLevel,
                                        new SelectList(new List<SelectListItem> {
                                            new SelectListItem { Text = "Beginner", Value = "1" },
                                            new SelectListItem { Text = "Beginner/Intermediate", Value = "2" },
                                            new SelectListItem { Text = "Intermediate", Value = "3" },
                                            new SelectListItem { Text = "Intermediate/Advanced", Value = "4" },
                                            new SelectListItem { Text = "Advanced", Value = "5" },
                                        }, "Value", "Text"), new { multiple = "multiple", @class = "form-control", @style = "display: none;" })

                    @*<select id="SkillLevel" name="SkillLevel" multiple="multiple">
                        <option value="1">Beginner</option>
                        <option value="2">Beginner/Intermediate</option>
                        <option value="3">Intermediate</option>
                        <option value="4">Intermediate/Advanced</option>
                        <option value="5">Advanced</option>
                    </select>*@
                </div>
                <div class="form-group">
                    @Html.ListBoxFor(m => m.Days,
                                        (Enum.GetValues(typeof(DayOfWeek)).Cast<DayOfWeek>().Select(enu => new SelectListItem() { Text = enu.ToString(), Value = enu.ToString() })).ToList(), new { multiple = "multiple", @class = "form-control", @style = "display: none;" })
                    @*<select id="Days" name="Days" multiple="multiple">
                        <option value="Monday">Monday</option>
                        <option value="Tuesday">Tuesday</option>
                        <option value="Wednesday">Wednesday</option>
                        <option value="Thursday">Thursday</option>
                        <option value="Friday">Friday</option>
                        <option value="Saturday">Saturday</option>
                        <option value="Sunday">Sunday</option>
                    </select>*@
                </div>
                <div class="form-group">
                    <input type="submit" value="Search Classes" class="btn btn-warning" />
                </div>
            </div>
            <div class="map_canvas nospace"></div>
        </div>
    </div>
}

@Html.DisplayFor(m => m.Classes, "Classes")

@section Scripts
{
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css" />
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/foolproof")
    @Scripts.Render("~/bundles/jqueryUI")
    @Scripts.Render("~/bundles/GeoComplete")
<script src="../../Scripts/searchhelper.js"></script>
    <script src="https://maps.googleapis.com/maps/api/js?sensor=false&amp;libraries=places"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
    <script src="../../Scripts/jquery.geocomplete.js"></script>
    <link rel="stylesheet" href="~/Content/jquery.rateyo.css" />
    <script src="~/Scripts/jquery.rateyo.js"></script>
<script type="text/javascript" src="~/Scripts/bootstrap-multiselect.js"></script>
<link rel="stylesheet" href="~/Content/bootstrap-multiselect.css" type="text/css" />

    @*<script type="text/javascript">
            $('#Style').autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '@Url.Action("Search", "DanceStyle")',
                        data: { searchString: request.term },
                        dataType: 'json',
                        type: 'GET',
                        success: function (data) {
                            response($.map(data, function (item) {
                                return {
                                    label: item.Name,
                                    value: item.Id
                                }
                            }));
                        }
                    })
                },
                select: function (event, ui) {
                    $('#Style').val(ui.item.label);
                    $('#DanceStyleId').val(ui.item.value);
                    return false;
                },
                minLength: 1
            });

            $('#Teacher').autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '@Url.Action("Search", "Teacher")',
                        data: { searchString: request.term },
                        dataType: 'json',
                        type: 'GET',
                        success: function (data) {
                            response($.map(data, function (item) {
                                return {
                                    label: item.Name,
                                    value: item.Id
                                }
                            }));
                        }
                    })
                },
                select: function (event, ui) {
                    $('#Teacher').val(ui.item.label);
                    $('#TeacherId').val(ui.item.value);
                    return false;
                },
                minLength: 1
            });

            $('.formmain').submit(function () {
                var map = $("#Location").geocomplete("map");
                $("#Zoom").val(map.getZoom());
                var bounds = map.getBounds();
                var ne = bounds.getNorthEast(); // LatLng of the north-east corner
                var sw = bounds.getSouthWest(); // LatLng of the south-west corder
                var center = map.getCenter();
                $("#NELat").val(ne.lat());
                $("#NELng").val(ne.lng());
                $("#SWLat").val(sw.lat());
                $("#SWLng").val(sw.lng());
                $("#CenterLat").val(center.lat());
                $("#CenterLng").val(center.lng());
                if ($('#Teacher').val() == "")
                {
                    $('#TeacherId').prop('value', "");
                }
                if ($('#Style').val() == "")
                {
                    $('#DanceStyleId').prop('value', "");
                }
            });
        </script>*@
<script>
    //$(function () {
    //    $("#Location").geocomplete({
    //        map: ".map_canvas",
    //        details: "form",
    //        types: ["geocode", "establishment"],
    //    });

    //    //$("#find").click(function () {
    //    //    $("#geocomplete").trigger("geocode");
    //    //});
    //});

    //$(function () {

    //    var options = {
    //        map: ".map_canvas"
    //    };

    //    $("#Location").geocomplete(options)
    //      .on("geocode:result", function(event, result){
    //          //// Set the zoom level you require for the default map
    //          //var map = $("#Location").geocomplete("map");
    //          //var bounds = map.getBounds();
    //          //var ne = bounds.getNorthEast(); // LatLng of the north-east corner
    //          //var sw = bounds.getSouthWest(); // LatLng of the south-west corder
    //          //var center = map.getCenter();
    //          //$("#NELat").val(ne.lat());
    //          //$("#NELng").val(ne.lng());
    //          //$("#SWLat").val(sw.lat());
    //          //$("#SWLng").val(sw.lng());
    //          //$("#CenterLat").val(center.lat());
    //          //$("#CenterLng").val(center.lng());
    //          ////    map.setZoom(10);
    //      });
    //});

    @*$(function () {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(success);
        }

        function success(position) {
            var loc = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
            @if (Model.CenterLat != null && Model.CenterLng != null)
            {
                <text>
            loc = new google.maps.LatLng(@Model.CenterLat, @Model.CenterLng);
            </text>
            }
            var map = $("#Location").geocomplete("map");
            //  map.setZoom(0);
            map.setCenter(loc);
        }
    });

    $(function () {
        var map = $("#Location").geocomplete("map");
        @if (Model.Zoom != null)
        {
            <text>
        map.setZoom(@Model.Zoom.ToString());
        </text>
        }
        else
        {
            <text>
        map.setZoom(10);
        </text>
        }
    });*@

    $(function () {
        $('#Days').multiselect({
            nonSelectedText: 'Day of Week',
            buttonClass: 'multiselectbutton form-control',
            buttonText: function(options, select) {
                return 'Day of Week';
            }
        });
        $('#SkillLevel').multiselect({
            nonSelectedText: 'Skill Level',
            buttonClass: 'multiselectbutton form-control',
            buttonText: function(options, select) {
                return 'Skill Level';
            }
        });
        $('#Days').show();
        $('#SkillLevel').show();
    });

    //  Global Map Variables
    var markers = [];
    var infowindows = [];
    $(function () {
        //  Map Marker Containers
        //  Map Marker Containers
        //  Build up the Markers
        var map = $("#Location").geocomplete("map");
        @foreach(var s in Model.Classes.OrderBy(c => c.NextDate))
    {
        <text>
        var marker = new google.maps.Marker({
            position: new google.maps.LatLng('@s.Place.Latitude', @s.Place.Longitude),
            map: map,
            title: '@s.Name',
            icon: "../../Content/images/MapMarker.png"
        });

        attachMessage(map, marker, '@s.Id', '@s.Name', '@s.Place.Address', '@(s.Place.City + ", " + s.Place.State + " " + s.Place.Zip)', '<a href="@Url.Action("View", "Event", new { id = s.Id, eventType = EDR.Enums.EventType.Class })">' + '@s.Name' + '</a>');
        markers.push(marker);
        </text>
    }

        function attachMessage(map, marker, num, placeName, address, address2, link) {
            var message = marker.title;
            var infowindow = new google.maps.InfoWindow({
                disableAutoPan: false,
                maxWidth: 200,
                content: '<div id="content" class="text-center" style="width: 200px;">' +
                '<div id="siteNotice">' +
                '</div>' +
                '<div style="display: block;white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">' +
                link +
                '</div>' +
                '<div id="bodyContent">' +
                '<p>' +
                address + '<br>' +
                address2 +
                '</p>' +
                '</div>' +
                '</div>'
            });
            infowindows.push(infowindow);

            //  infowindow.open(map, marker);

            google.maps.event.addListener(marker, 'click', function () {
                clearWindows();
                infowindow.open(map, marker);
            });
        }
    });

    function clearWindows() {
        for (var i = 0; i < infowindows.length; i++) {
            infowindows[i].close();
        }
    };

    function openEvent(id, lati, long) {
        var latLng = new google.maps.LatLng(lati, long); //Makes a latlng
        var map = $("#Location").geocomplete("map");
        map.panTo(latLng); //Make map global
        markers[id].setMap(map);
        clearWindows();
        infowindows[id].open(map, markers[id]);
        return false;
    };

    $(function () {
        $( ".toggle" ).click(function() {
            // Animation complete.
            $("#daysdiv").css({
                'position': 'absolute',
                'z-index' : '100',
                'width' : '150px',
                'left': $(this).offset().left,
                'top': $(this).offset().top + $(this).height() + 15
            });
            $( "#daysdiv" ).toggle( "fast", function() {
            });
        });

        //$('.popup').click(function (e) {
        //    $('.popuptarget').css({
        //        'position': 'absolute',
        //        'left': $(this).offset().left,
        //        'top': $(this).offset().top + $(this).height() + 5
        //    }).show("slow").delay(3000).hide("slow");
        //});
        //$('.toggle').click(function (event) {
        //    $('.popuptarget').css({
        //        'position': 'absolute',
        //        'z-index' : '3',
        //        'left': $(this).offset().left,
        //        'top': $(this).offset().top + $(this).height() + 15
        //    });
        //    $('.popuptarget').toggle("slow");
        //    //event.preventDefault();
        //    //var target = $(this).attr('href');
        //    //$(target).toggleClass('hidden show');
        //});

        //$('#mypop').popover({
        //    html: true,
        //    content: function() {
        //        return $('#mytab').html();
        //    }
        //})
    });

    $(function () {

        $(".rateYo").rateYo({
            starWidth: "15px",
            onInit: function (rating, rateYoInstance) {
                //  alert("init");
                var t = $(this);
                $(this).rateYo("option", "rating", t.parent('div').find('.ratingval').prop('value'));
                $(this).rateYo("option", "readOnly", true);
            }
        });
    });

    //$(function () {
    //    $("#Location").geocomplete({
    //        map: ".map_canvas",
    //        location: "Los Angeles, CA",
    //        details: "form",
    //        types: ["geocode", "establishment"],
    //    });
    //});

    //if (navigator.geolocation) {
    //    navigator.geolocation.getCurrentPosition(success);
    //    function success(position) {
    //        var loc = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
    //        $("#geocomplete").trigger("geocode");
    //    }
    //} else {
    //    $("#Location").geocomplete({
    //        map: ".map_canvas",
    //        details: "form",
    //        types: ["geocode", "establishment"],
    //    });
    //}

    //$(function () {
    //    $(".rateYo").rateYo({
    //        readOnly: true,
    //        starWidth: "15px",
    //        onInit: function (rating, rateYoInstance) {
    //            alert("here")
    //            var t = $(this);
    //            //  alert(t.parent('div').find('.ratingval').prop('value'));
    //            $(this).rateYo("option", "rating", t.parent('div').find('.ratingval').prop('value'));
    //        }
    //    });
    //});
</script>

}

