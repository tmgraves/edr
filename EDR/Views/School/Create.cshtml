@model EDR.Models.ViewModels.CreateSchoolViewModel

@{
    ViewBag.Title = "Create a School";
}

<div class="container">
    <div class="center-block col-md-6 text-center" style="float: none;">
        <h1>Create a School</h1>
        <div class="panel panel-default">
            <div class="panel-body bg-info">
                @Html.ValidationSummary("", new { @class = "text-danger" })
            @using (Html.BeginForm("Create", "School", FormMethod.Post, new { @id = "createform", @class = "main" }))
            {
                @Html.HiddenFor(m => m.School.Address, new { @class = "address" })
                @Html.HiddenFor(m => m.School.City, new { @class = "city" })
                @Html.HiddenFor(m => m.School.State, new { @class = "state" })
                @Html.HiddenFor(m => m.School.Zip, new { @class = "zip" })
                @Html.HiddenFor(m => m.School.Country, new { @class = "country" })
                @Html.HiddenFor(m => m.School.Latitude, new { @class = "lat" })
                @Html.HiddenFor(m => m.School.Longitude, new { @class = "lng" })
                @Html.HiddenFor(m => m.Role)
                @Html.AntiForgeryToken()
                <div class="form-horizontal centerform">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        <div class="col-lg-8 center-block">
                            @Html.EditorFor(model => model.School.Name, new { htmlAttributes = new { @class = "form-control", @placeholder = "School Name" } } )
                            @Html.ValidationMessageFor(model => model.School.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-lg-8 center-block">
                            @Html.EditorFor(model => model.School.Description, new { htmlAttributes = new { @class = "form-control", @placeholder = "Description" } })
                            @Html.ValidationMessageFor(model => model.School.Description, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-lg-8 center-block">
                            @Html.EditorFor(model => model.School.FacebookLink, new { htmlAttributes = new { @class = "form-control", @placeholder = "Facebook Page" } })
                            @Html.ValidationMessageFor(model => model.School.FacebookLink, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-lg-8 center-block">
                            @Html.EditorFor(model => model.School.DateStarted, new { htmlAttributes = new { @class = "form-control", @placeholder = "Date Started" } })
                            @Html.ValidationMessageFor(model => model.School.DateStarted, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-lg-8 center-block">
                            @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control locationsearch", @placeholder = "Type in the School Location" } })
                            @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-lg-8 center-block">
                            <input type="submit" value="Create School" class="btn btn-primary" />
                        </div>
                    </div>
                </div>
            }
            </div>
        </div>
    </div>
</div>

@section Scripts {
@Scripts.Render("~/bundles/jqueryval")
@Scripts.Render("~/bundles/jqueryUI")
@Scripts.Render("~/bundles/GeoComplete")
<script src="https://maps.googleapis.com/maps/api/js?sensor=false&amp;libraries=places&key=@System.Configuration.ConfigurationManager.AppSettings["GoogleAPIKey"]"></script>


<script>
//  Location AutoComplete
$(function () {
    $.validator.setDefaults({
        ignore: ""
    })

    $(".locationsearch").geocomplete({
        details: "form",
        types: ["geocode", "establishment"],
    })
    .bind("geocode:result", function (event, result) {
        $('.lat').prop("value", "");
        $('.lng').prop("value", "");
        $('.state').prop("value", "");
        $('.zip').prop("value", "");
        $('.country').prop("value", "");
        $('.address').prop("value", "");

        $('.lat').prop("value", result.geometry.location.lat());
        $('.lng').prop("value", result.geometry.location.lng());

        var street_num;
        var street_name;
        $.each(result.address_components, function (i, address_component) {

            //alert(address_component.types[0]);
            //alert(address_component.long_name);
            if (address_component.types[0] == "street_number") {
                street_num = address_component.long_name;
            }
            else if (address_component.types[0] == "route") {
                street_name = address_component.long_name;
            }
            else if (address_component.types[0] == "locality") {
                $('.city').prop("value", address_component.long_name);
            }
            else if (address_component.types[0] == "administrative_area_level_1") {
                $('.state').prop("value", address_component.long_name);
            }
            else if (address_component.types[0] == "postal_code") {
                $('.zip').prop("value", address_component.long_name);
            }
            else if (address_component.types[0] == "country") {
                $('.country').prop("value", address_component.long_name);
            }
        });
        //  alert(street_num + " " + street_name);
        $('.address').prop("value", street_num + " " + street_name);
        //  console.log(result);
    });
});
//  Location AutoComplete
</script>
}
