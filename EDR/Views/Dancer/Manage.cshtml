@model EDR.Models.ViewModels.DancerManageViewModel

@{
    ViewBag.Title = "Manage My Profile";
}

<style>
    img {
        max-width: 100%; /* This rule is very important, please do not ignore this! */
    }

    input[type="file"] {
        display: none;
    }

    #img_container {
        position:relative;
        display:inline-block;
        text-align:center;
    }

    #btnChangePicture {
        position:absolute;
        top:0;
        right:0;
        display:none;
    }

    #img_container:hover button {
        display: block;
    }

    #profilepic {
        width: 200px;
    }
</style>

<h2 class="page-header">Manage My Profile
    @Html.ActionLink("View Public Page", "Home", new { id = User.Identity.Name }, new { @class = "small btn btn-link" })
</h2>

<div class="container-fluid">
    <div class="col-lg-6 col-md-6">
        <div class="panel panel-default">
            <div class="panel-body ">
                <div id="viewdiv">
                    <div class="text-right" style="padding-bottom: 10px;">
                        <input id="btnEdit" type="button" class="btn btn-primary" value="Edit" />
                    </div>
                    <div class="col-lg-12">
                        <div class="col-lg-6">
                            <div id="img_container">
                                <img id="profilepic" src="@Url.Content(Model.Dancer.PhotoUrl ?? "~/Content/images/NoProfilePic.gif")" />
                                <button id="btnChangePicture" type="button" class="btn btn-info" data-toggle="modal" data-target="#modalPic">
                                    Change
                                </button>
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="row">
                                <dl>
                                    <dt>
                                        @Html.Label("Name", htmlAttributes: new { @class = "control-label" })
                                    </dt>
                                    <dd>
                                        @Html.DisplayFor(model => model.Dancer.FullName)
                                    </dd>
                                </dl>
                            </div>
                            <div class="row">
                                <dl>
                                    <dt>
                                        @Html.LabelFor(model => model.Dancer.Experience, htmlAttributes: new { @class = "control-label" })
                                    </dt>
                                    <dd>
                                        @Html.DisplayFor(model => model.Dancer.Experience) Year(s)
                                    </dd>
                                </dl>
                            </div>
                            <div class="row">
                                <dl>
                                    <dt>
                                        @Html.LabelFor(model => model.Dancer.Location, htmlAttributes: new { @class = "control-label" })
                                    </dt>
                                    <dd>
                                        @Html.DisplayFor(model => model.Dancer.Location)
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12">
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.Label("Facebook Username", htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.Dancer.FacebookUsername)
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(model => model.Dancer.YouTubeUsername, htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.Dancer.YouTubeUsername)
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(model => model.Dancer.InstagramUsername, htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd>
                                @if (Model.Dancer.InstagramUsername == null)
                                {
                                    <a class="btn btn-primary" href=@Url.Action("AddInstagram", "SocialMedia", null) title="Link to your Instagram" style="width: 150px;">
                                        <img class="img-rounded" style="height: 30px;" src="@Url.Content("~/Content/images/instagram.png")" />
                                        Add Instagram
                                    </a>
                                }
                                else
                                {
                                    @Html.DisplayFor(m => m.Dancer.InstagramUsername)
                                }
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(model => model.Dancer.SpotifyId, htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd>
                                @if (Model.Dancer.SpotifyId == null)
                                {
                                    <a class="btn btn-primary btn-sm" href=@Url.Action("AddSpotify", "SocialMedia", null) title="Link to your Spotify">
                                        <img class="img-rounded" style="height: 30px;" src="@Url.Content("~/Content/images/spotify.png")" />
                                        Add Spotify
                                    </a>
                                }
                                else
                                {
                                    @Html.DisplayFor(m => m.Dancer.SpotifyId)
                                }
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.Label("Spotify Playlist Uri", htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd>
                                <a class="btn btn-primary" href=@Url.Action("ChangeSpotifyPlaylist", "Dancer", new { username = Model.Dancer.UserName }) title="Add Your Playlist">
                                    <img class="img-rounded" style="height: 20px;" src="@Url.Content("~/Content/images/spotify.png")" />
                                    Change Playlist
                                </a>
                                @*<div class="item-short">@Model.Dancer.SpotifyUri</div>*@
                            </dd>
                        </dl>
                    </div>
                </div>
                <div id="editdiv" style="display: none;">
                @Html.ValidationSummary("", new { @class = "text-danger" })
                @using (Html.BeginForm("Manage", "Dancer", FormMethod.Post, new { @id = "saveform", @class = "main" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(model => model.Dancer.Id)
                    @Html.HiddenFor(model => model.Dancer.UserName)
                    @Html.HiddenFor(model => model.Dancer.Email)
                    @Html.HiddenFor(model => model.Dancer.Latitude)
                    @Html.HiddenFor(model => model.Dancer.Longitude)
                    @Html.HiddenFor(model => model.Dancer.PhotoUrl)
                    <div class="text-right" style="padding-bottom: 10px;">
                        <input type="submit" id="btnsave" value="Save" class="btn btn-success" />
                        <input id="btncanceledit" type="button" class="btn btn-primary" value="Cancel" />
                    </div>

                    <div class="col-lg-12">
                        <div class="col-lg-6">
                            <div id="img_container">
                                <img id="profilepic" src="@Url.Content(Model.Dancer.PhotoUrl ?? "~/Content/images/NoProfilePic.gif")" />
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="row">
                                <div class="col-lg-6" style="padding: 0px !important;">
                                    <dl>
                                        <dt>
                                            @Html.Label("First Name", htmlAttributes: new { @class = "control-label" })
                                        </dt>
                                        <dd>
                                            @Html.EditorFor(model => model.Dancer.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Dancer.FirstName, "", new { @class = "text-danger" })
                                        </dd>
                                    </dl>
                                </div>
                                <div class="col-lg-6" style="padding: 0px !important;">
                                    <dl>
                                        <dt>
                                            @Html.Label("Last Name", htmlAttributes: new { @class = "control-label" })
                                        </dt>
                                        <dd>
                                            @Html.EditorFor(model => model.Dancer.LastName, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Dancer.LastName, "", new { @class = "text-danger" })
                                        </dd>
                                    </dl>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-12" style="padding: 0px !important;">
                                    <dl>
                                        <dt>
                                            @Html.LabelFor(model => model.Dancer.StartDate, htmlAttributes: new { @class = "control-label" })
                                        </dt>
                                        <dd>
                                            @Html.TextBoxFor(m => m.Dancer.StartDate, "{0:yyyy-MM-dd}", htmlAttributes: new { @type = "date", @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.Dancer.StartDate, "", new { @class = "text-danger" })
                                        </dd>
                                    </dl>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-12" style="padding: 0px !important;">
                                    <dl>
                                        <dt>
                                            @Html.LabelFor(model => model.Dancer.Location, htmlAttributes: new { @class = "control-label" })
                                        </dt>
                                        <dd>
                                            @Html.TextBoxFor(model => model.Dancer.Location, new { @class = "form-control", @placeholder = "Enter your Location" })
                                            @Html.ValidationMessageFor(model => model.Dancer.Location, "", new { @class = "text-danger" })
                                        </dd>
                                    </dl>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12">
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.Label("Facebook Username", htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd>
                                @Html.DisplayFor(m => m.Dancer.FacebookUsername)
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(model => model.Dancer.YouTubeUsername, htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd>
                                @Html.EditorFor(model => model.Dancer.YouTubeUsername, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Dancer.YouTubeUsername, "", new { @class = "text-danger" })
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(model => model.Dancer.InstagramUsername, htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.Dancer.InstagramUsername)
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(model => model.Dancer.SpotifyId, htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.Dancer.SpotifyId)
                            </dd>
                        </dl>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.Label("Spotify Playlist Uri", htmlAttributes: new { @class = "control-label col-md-2" })
                            </dt>
                            <dd>
                                <div class="item-short">@Model.Dancer.SpotifyUri</div>
                                @*@Html.EditorFor(model => model.Dancer.SpotifyUri, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Dancer.SpotifyUri, "", new { @class = "text-danger" })*@
                            </dd>
                        </dl>
                    </div>
                }
                </div>
            </div>
        </div>
        <div class="panel panel-default">
            <div class="panel-body ">
                <h3>Dance Styles</h3>
                <hr />
                @using (Ajax.BeginForm("AddStyle", new AjaxOptions()
                    {
                        UpdateTargetId = "styles",
                        OnSuccess = "done(this)"
                    }))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true)
                    @Html.HiddenFor(m => m.Dancer.Id)

                    <div class="form-inline">
                        <div class="form-group">
                            @Html.HiddenFor(s => s.NewStyleId, new { @class = "stylesearchid" })
                            <input type="text" placeholder="Dance Style" class="form-control stylesearch" />
                            <input class="btn btn-primary" type="submit" value="Add" />
                        </div>
                    </div>
                }
                <div id="styles">
                    @Html.Partial("~/Views/Shared/_DancerStylesPartial.cshtml", new EDR.Models.ViewModels.DancerStylesViewModel() { Id = Model.Dancer.Id, Styles = Model.Dancer.DanceStyles.ToList(), Controller = "Dancer" })
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-6 col-md-6">
        <div class="panel panel-default">
            <div class="panel-body ">
                <h3>Purchased Tickets</h3>
                <hr />
                <table class="table table-condensed">
                    <thead>
                        <tr>
                            <th>Ticket</th>
                            <th class="text-center">Purchased</th>
                            <th class="text-center">Qty</th>
                            <th class="text-center">Used/Total</th>
                        </tr>
                    </thead>
                    @foreach (var item in Model.Dancer.Tickets)
                    {
                        <tr>
                            <td class="text-left">
                                <p>
                                    <div class="item-short">
                                    @if (item.Ticket.EventId != null)
                                    {
                                        @Html.ActionLink(item.Ticket.Event.Name, "View", "Event", new { id = item.Ticket.EventId, eventType = item.Ticket.Event is EDR.Models.Class ? EDR.Enums.EventType.Class : EDR.Enums.EventType.Social }, null)
                                    }
                                    else
                                    {
                                        @Html.ActionLink(item.Ticket.School.Name, "View", "School", new { id = item.Ticket.SchoolId }, null)
                                    }
                                    </div>
                                </p>
                                @(String.Format("{0:N0}", item.Ticket.Quantity) + " tix for " + String.Format("{0:C}", item.Ticket.Price))
                            </td>
                            <td class="text-center" style="vertical-align: bottom;">
                                @item.DatePurchased.ToShortDateString()
                            </td>
                            <td class="text-right" style="vertical-align: bottom;">
                                @String.Format("{0:N0}", item.Quantity)
                            </td>
                            <td class="text-right" style="vertical-align: bottom;">
                                @String.Format("{0:N0}", item.EventRegistrations.Count())/<b>@String.Format("{0:N0}", item.Quantity * item.Ticket.Quantity)</b>
                            </td>
                        </tr>
                    }
                </table>
                @*<table class="table table-condensed table-bordered">
                    @foreach (var s in Model.Dancer.Tickets.Select(t => t.Ticket.School).Distinct().ToList())
                    {
                        <tr>
                            <td>
                                <h3>(@s.Id) @Html.ActionLink(s.Name, "View", "School", new { id = s.Id }, null)</h3>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <h4>Purchased</h4>
                                <hr />
                                <table class="table table-condensed table-hover">
                                    <thead>
                                        <tr>
                                            <th class="text-center">Ticket Type</th>
                                            <th class="text-center">Date Purchased</th>
                                            <th class="text-center">Quantity</th>
                                            <th class="text-center">Total</th>
                                            <th class="text-center">Used</th>
                                        </tr>
                                    </thead>
                                    @foreach (var item in Model.Dancer.Tickets.Where(t => t.Ticket.EventId == null && t.Ticket.SchoolId == s.Id))
                                    {
                                        <tr>
                                            <td class="text-left">
                                                @(String.Format("{0:N0}", item.Ticket.Quantity) + " @ " + String.Format("{0:C}", item.Ticket.Price))
                                            </td>
                                            <td class="text-center">
                                                @item.DatePurchased.ToShortDateString()
                                            </td>
                                            <td class="text-right">
                                                @String.Format("{0:N0}", item.Quantity)
                                            </td>
                                            <td class="text-right">
                                                @String.Format("{0:N0}", item.Quantity * item.Ticket.Quantity)
                                            </td>
                                            <td class="text-right">
                                                @String.Format("{0:N0}", item.EventRegistrations.Count())
                                            </td>
                                        </tr>
                                    }
                                    <tfoot>
                                        <tr style="font-weight: bold;">
                                            <td class="text-left">
                                                Total:
                                            </td>
                                            <td>
                                            </td>
                                            <td></td>
                                            <td class="text-right">
                                                @String.Format("{0:N0}", Model.Dancer.Tickets.Where(t => t.Ticket.EventId == null && t.Ticket.SchoolId == s.Id).Sum(t => t.Quantity * t.Ticket.Quantity))
                                            </td>
                                            <td class="text-right">
                                                @String.Format("{0:N0}", Model.Dancer.Tickets.Where(t => t.Ticket.EventId == null && t.Ticket.SchoolId == s.Id).Sum(t => t.EventRegistrations.Count()))
                                            </td>
                                        </tr>
                                    </tfoot>
                                </table>
                                <h4>Registrations</h4>
                                <hr />
                                <table class="table table-condensed table-hover">
                                    <thead>
                                        <tr>
                                            <th>Event</th>
                                            <th class="text-center">Date Registered</th>
                                        </tr>
                                    </thead>
                                    @foreach (var item in Model.Dancer.EventRegistrations.Where(r => r.UserTicket.Ticket.SchoolId == s.Id))
                                    {
                                        <tr>
                                            <td>
                                                @Html.ActionLink(item.Instance.Event.Name, "View", "Event", new { id = item.Instance.EventId, eventType = item.Instance.Event is EDR.Models.Class ? EDR.Enums.EventType.Class : EDR.Enums.EventType.Social }, null)
                                            </td>
                                            <td class="text-center">
                                                @item.Instance.DateTime.ToShortDateString()
                                            </td>
                                        </tr>
                                    }
                                </table>
                            </td>
                        </tr>
                    }
                </table>*@
            </div>
        </div>
        <div class="panel panel-default">
            <div class="panel-body ">
                <h3>Registrations</h3>
                <hr />
                <table class="table table-condensed table-hover">
                    <thead>
                        <tr>
                            <th>Class/Social</th>
                            <th>Date/Time</th>
                        </tr>
                    </thead>
                    @foreach (var item in Model.Dancer.EventRegistrations.OrderBy(r => r.Instance.DateTime))
                    {
                        <tr>
                            <td>
                                <a href=@Url.Action("View", "Event", new { id = item.Instance.EventId, eventType = item.Instance.Event is EDR.Models.Class ? EDR.Enums.EventType.Class : EDR.Enums.EventType.Social }) title="@item.Instance.Event.Name">
                                    <div class="item-short">@item.Instance.Event.Name</div>
                                </a>
                                @*@Html.ActionLink(item.Instance.Event.Name, "View", "Event", new { id = item.Instance.EventId, eventType = item.Instance.Event is EDR.Models.Class ? EDR.Enums.EventType.Class : EDR.Enums.EventType.Social }, null)*@
                            </td>
                            <td>
                                @item.Instance.DateTime.ToString("ddd, M/d")
                                @@ @Convert.ToDateTime(item.Instance.StartTime).ToShortTimeString()
                            </td>
                        </tr>
                    }
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Modal Picture Upload -->
<div class="modal fade" id="modalPic" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h3 class="picheader">Upload a New Picture</h3>
            </div>
            <div class="modal-body">
                <div id="divPick" class="text-center">
                    <p>
                        <button id="btnNewPicture" type="button" class="btn btn-primary">
                            Upload New Picture
                        </button>
                    </p>
                    <p>
                        <button id="btnPickFacebook" type="button" class="btn btn-warning">
                            Choose a Facebook Picture
                        </button>
                    </p>
                </div>
                <div id="divOptions" style="display: none;">
                    <div class="row text-center" style="padding: 5px;">
                        <div id="divUploadPic" style="display: none;">
                            <label for="imgInp" class="btn btn-primary btn-lg">
                                Choose File
                            </label>
                            <input id="imgInp" type="file" accept="image/*" />
                        </div>
                        <div id="divFacebookPic" style="display: none;">
                            @if (Model.FacebookPictures != null && Model.FacebookPictures.Count() > 0)
                            {
                                foreach (var photo in Model.FacebookPictures.OrderByDescending(photo => photo.PhotoDate))
                                {
                                    <div class="col-lg-3 thumbnail text-center" style="height: 150px;">
                                        <div style="height: 100px;">
                                            <img src="@photo.Source" style="max-height: 100px;" />
                                        </div>
                                        <div class="caption">
                                            <button class="pickfbpic btn btn-info" value="@photo.LargeSource">Pick</button>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                @:No Facebook pictures found.
                                        }
                        </div>
                    </div>
                    <div class="row" id="croppic">
                        <div>
                            <img class="img-responsive" id="image" alt="">
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <button id="btnupload" class="btn btn-danger" data-dismiss="modal" style="display: none;">Upload</button>
            </div>
        </div>
    </div>
</div>
<!-- Modal Picture Upload -->

@section Scripts
{
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css" />
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/foolproof")
    @Scripts.Render("~/bundles/jqueryUI")
    <script src="@Url.Content("~/Scripts/jquery.unobtrusive-ajax.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.form.js")" type="text/javascript"></script>
    @Scripts.Render("~/bundles/GeoComplete")
    <script src="https://maps.googleapis.com/maps/api/js?sensor=false&amp;libraries=places"></script>

    <script type="text/javascript">
    $.validator.setDefaults({
        ignore: ""
    })

    $('.stylesearch').autocomplete({
        source: function (request, response) {
            $.ajax({
                url: '../DanceStyle/Search',
                data: { searchString: request.term },
                dataType: 'json',
                type: 'GET',
                success: function (data) {
                    response($.map(data, function (item) {
                        return {
                            label: item.Name,
                            value: item.Id
                        }
                    }));
                }
            })
        },
        select: function (event, ui) {
            $('.stylesearch').val(ui.item.label);
            $('.stylesearchid').val(ui.item.value);
            return false;
        },
        minLength: 1
    });

    //var obj = {
    //    "flammable": "inflammable",
    //    "duh": "no duh"
    //};
    //$.each(obj, function (key, value) {
    //    alert(key + ": " + value);
    //});
    
    //    $.ajax({
    //    url: '../DanceStyle/Search',
    //    type: "GET",
    //    data: { searchString: "" },
    //    dataType: 'json',
    //    success: function (result) {
    //        $.each(result, function (key, value) {
    //            alert(value["Name"]);
    //            //$.each(value, function (x, y) {
    //            //    alert(x + ": " + y);
    //            //});
    //        });
    //    }
    //});

    //function addStyleResponse(result) {
    //    //  alert(JSON.stringify(result));
    //    //$.each(result, function (key, value) {
    //    //    alert(value.Id + ": " + value.Name);
    //    //});
    //    $("#styles").append("<a class='label label-info' style='margin-right: 5px !important;' href='/DanceStyle/Details?styleName=JuJu'>JuJu</a>");
    //    //alert($("#styles").html());
    //    //alert(result[0].Id);
    //    //alert(result[0].Name);
    //    //var o = JSON.parse(result)
    //    //for (var key in o)
    //    //{
    //    //    alert(o[key].Id);
    //    //    alert(o[key].Name);
    //    //}
    //}

    function done(form) {
        $('.stylesearch').prop('value', "");
        $('.stylesearchid').prop('value', "");
    }

    $(function () {
        $('#saveform.main').valid();

        $('#btnEdit').click(function () {
            $('#viewdiv').hide();
            $('#editdiv').show();
            try
            {
                var valid = $('#saveform.main').valid();
            }
            catch(err)
            {
                document.getElementById("demo").innerHTML = err.message;
            }
        });
        $('#btncanceledit').click(function () {
            $('#viewdiv').show();
            $('#editdiv').hide();
        });

        $('#saveform.main').submit(function () {
            var valid = $('#saveform.main').valid();
        });
    });
    </script>

    <script type="text/javascript">
    $(function () {
        $("#Dancer_Location").geocomplete({
            details: "form",
            types: ["geocode", "establishment"],
        })
        .bind("geocode:result", function (event, result) {
            $('#Dancer_Latitude').prop("value", result.geometry.location.lat());
            $('#Dancer_Longitude').prop("value", result.geometry.location.lng());
        });
    });

    </script>

//  Change Image
<link href="../../Content/cropper.css" rel="stylesheet">
<script src="../../Scripts/cropper.js"></script>

<script>
        function loadImage(input) {
            if (input.files && input.files[0]) {
                if (input.files[0].size < 1000000)
                {
                    var reader = new FileReader();

                    reader.onload = function (e) {
                        $('#image').cropper({
                            aspectRatio: 10 / 10,
                            zoomable: false,
                        });
                        $("#image").cropper('replace', e.target.result);
                        $("#btnupload").show();
                    }

                    reader.readAsDataURL(input.files[0]);
                }
                else
                {
                    alert("Pick a smaller file");
                }
            }
        }

        $("#imgInp").change(function () {
            loadImage(this);
            $("#croppic").show();
        });

        $(function () {
            $('#btnupload').click(function () {
                try {
                    var imageData = $("#image").cropper("getCroppedCanvas").toDataURL('png', 1);
                    $.ajax({
                        url: "../../Dancer/UploadImageAsync",
                        type: 'POST',
                        data: { 'imageData': imageData },
                        dataType: 'json',
                        timeout: 300000,
                        success: function (result) {
                            var status;
                            var filePath;
                            $.each(result, function (key, value) {
                                if (key == "UploadStatus")
                                {
                                    status = value;
                                }
                                else{
                                    filePath = value;
                                }
                            });
                            if (status == "Success")
                            {
                                $('#profilepic').attr('src', filePath);
                                $("#image").cropper('destroy');
                                $('#image').attr('src', "");
                                $("#btnupload").hide();
                            }
                            else
                            {
                                alert("Upload Failed");
                            }
                        }
                    });
                }
                catch (err) {
                    alert(err.message);
                }
            });

            $('#btnChangePicture').click(function () {
                $('#divPick').show();
                $('#divOptions').hide();
            });

            $('#btnNewPicture').click(function () {
                $('#divPick').hide();
                $('#divOptions').show();
                $('#divUploadPic').show();
                $('#divFacebookPic').hide();
                $('#croppic').hide();
                $('#image').attr('src', "");
            });

            $('#btnPickFacebook').click(function () {
                $('#divPick').hide();
                $('#divOptions').show();
                $('#divUploadPic').hide();
                $('#divFacebookPic').show();
                $('#croppic').hide();
                $('#image').attr('src', "");
                });

            $('.pickfbpic').click(function () {
                var src = $(this).prop('value');
                $('#image').attr('src', src);
                $('#croppic').show();
                $('#divFacebookPic').hide();
                $('#image').cropper({
                    aspectRatio: 10 / 10,
                    zoomable: false,
                });
                $("#image").cropper('replace', src);
                $("#btnupload").show();
            });
        });
</script>
}


@*<div class="panel panel-default">
        <div class="panel-body ">
            <h3>Event Tickets</h3>
            <h4>Tickets Purchased</h4>
            <hr />
            <table class="table">
                <thead>
                    <tr>
                        <th>Event</th>
                        <th class="text-center">Ticket Type</th>
                        <th class="text-center">Date Purchased</th>
                        <th class="text-center">Quantity</th>
                        <th class="text-center">Total</th>
                    </tr>
                </thead>
                @foreach (var item in Model.Dancer.Tickets.Where(t => t.Ticket.EventId != null))
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(member => item.Ticket.Event.Name)
                        </td>
                        <td class="text-center">
                            @(String.Format("{0:N0}", item.Ticket.Quantity) + " @ " + String.Format("{0:C}", item.Ticket.Price))
                        </td>
                        <td class="text-center">
                            @item.DatePurchased.ToShortDateString()
                        </td>
                        <td class="text-right">
                            @String.Format("{0:N0}", item.Quantity)
                        </td>
                        <td class="text-right">
                            @String.Format("{0:N0}", item.Quantity * item.Ticket.Quantity)
                        </td>
                    </tr>
                }
            </table>
        </div>
    </div>*@
