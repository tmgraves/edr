@model EDR.Models.ViewModels.DancerManageViewModel

@{
    ViewBag.Title = "Manage";
}

<h2>Manage</h2>
@Html.ActionLink("View Profile", "Home", new { id = User.Identity.Name })

<div class="container-fluid">
    <div class="col-lg-6 col-md-6">
        <div class="panel panel-default">
            <div class="panel-body ">
                <div id="viewdiv">
                    <div class="text-right" style="padding-bottom: 10px;">
                        <input id="btnEdit" type="button" class="btn btn-primary" value="Edit" />
                    </div>
                    <div class="form-group text-center">
                        <div class="helper" style="height: 150px !important;">
                            <span></span><img src='@Url.Content(Model.Dancer.PhotoUrl)' />
                            <p>
                                <a style="font-size: small;" href="@Url.Action("ChangePicture", "Dancer")">Change Picture</a>
                            </p>
                        </div>
                    </div>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Dancer.FirstName)
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.Dancer.FirstName)
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Dancer.LastName)
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.Dancer.LastName)
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Dancer.Address)
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.Dancer.Address)
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Dancer.City)
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.Dancer.City)
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Dancer.State)
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.Dancer.State)
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Dancer.ZipCode)
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.Dancer.ZipCode)
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Dancer.Country)
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.Dancer.Country)
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Dancer.Experience)
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.Dancer.Experience) Year(s)
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayName("Facebook Username")
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.Dancer.FacebookUsername)
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Dancer.InstagramUsername)
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.Dancer.InstagramUsername)
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Dancer.YouTubeUsername)
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.Dancer.YouTubeUsername)
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Dancer.SpotifyId)
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.Dancer.SpotifyId)
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Dancer.SpotifyUri)
                        </dt>
                        <dd>
                            <div class="item-short">@Model.Dancer.SpotifyUri</div>
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayName("Dance Styles")
                        </dt>
                        <dd>
                            <p>
                                <input type="text" placeholder="Dance Style" class="form-control" />
                            </p>
                            @if (Model.Dancer.DanceStyles.Count > 0)
                            {
                                @Html.Partial("~/Views/Shared/_DanceStyleLabelPartial.cshtml", Model.Dancer.DanceStyles)
                            }
                            else
                            {
                                @: <span class="text-warning">NO DANCE STYLES SELECTED</span>
                            }
                        </dd>
                    </dl>
                </div>
                <div id="editdiv" style="display: none;">
                @Html.ValidationSummary("", new { @class = "text-danger" })
                @using (Html.BeginForm("Manage", "Dancer", FormMethod.Post, new { @id = "saveform", @class = "main" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(model => model.Dancer.Id)
                    @Html.HiddenFor(model => model.Dancer.UserName)
                    @Html.HiddenFor(model => model.Dancer.Email)
                    @Html.HiddenFor(model => model.Dancer.Latitude)
                    @Html.HiddenFor(model => model.Dancer.Longitude)
                    @Html.HiddenFor(model => model.Dancer.PhotoUrl)
                    <div class="text-right" style="padding-bottom: 10px;">
                        <input type="submit" id="btnsave" value="Save" class="btn btn-primary" />
                        <input id="btncanceledit" type="button" class="btn btn-primary" value="Cancel" />
                    </div>
                    <div class="form-group text-center">
                        <div class="helper" style="height: 150px !important;">
                            <span></span><img src='@Url.Content(Model.Dancer.PhotoUrl)' />
                        </div>
                    </div>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.LabelFor(model => model.Dancer.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
                        </dt>
                        <dd>
                            @Html.EditorFor(model => model.Dancer.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Dancer.FirstName, "", new { @class = "text-danger" })
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.LabelFor(model => model.Dancer.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
                        </dt>
                        <dd>
                            @Html.EditorFor(model => model.Dancer.LastName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Dancer.LastName, "", new { @class = "text-danger" })
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.LabelFor(model => model.Dancer.Address, htmlAttributes: new { @class = "control-label col-md-2" })
                        </dt>
                        <dd>
                            @Html.EditorFor(model => model.Dancer.Address, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Dancer.Address, "", new { @class = "text-danger" })
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.LabelFor(model => model.Dancer.City, htmlAttributes: new { @class = "control-label col-md-2" })
                        </dt>
                        <dd>
                            @Html.EditorFor(model => model.Dancer.City, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Dancer.City, "", new { @class = "text-danger" })
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.LabelFor(model => model.Dancer.State, htmlAttributes: new { @class = "control-label col-md-2" })
                        </dt>
                        <dd>
                            @Html.EditorFor(model => model.Dancer.State, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Dancer.State, "", new { @class = "text-danger" })
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.LabelFor(model => model.Dancer.ZipCode, htmlAttributes: new { @class = "control-label col-md-2" })
                        </dt>
                        <dd>
                            @Html.EditorFor(model => model.Dancer.ZipCode, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Dancer.ZipCode, "", new { @class = "text-danger" })
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.LabelFor(model => model.Dancer.Country, htmlAttributes: new { @class = "control-label col-md-2" })
                        </dt>
                        <dd>
                            @Html.EditorFor(model => model.Dancer.Country, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Dancer.Country, "", new { @class = "text-danger" })
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.LabelFor(model => model.Dancer.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
                        </dt>
                        <dd>
                            @Html.TextBoxFor(m => m.Dancer.StartDate, "{0:yyyy-MM-dd}", htmlAttributes: new { @type = "date", @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Dancer.StartDate, "", new { @class = "text-danger" })
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayName("Facebook Username")
                        </dt>
                        <dd>
                            @Html.DisplayFor(m => m.Dancer.FacebookUsername)
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Dancer.InstagramUsername)
                        </dt>
                        <dd>
                            @Html.EditorFor(model => model.Dancer.InstagramUsername, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Dancer.InstagramUsername, "", new { @class = "text-danger" })
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Dancer.YouTubeUsername)
                        </dt>
                        <dd>
                            @Html.EditorFor(model => model.Dancer.YouTubeUsername, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Dancer.YouTubeUsername, "", new { @class = "text-danger" })
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Dancer.SpotifyId)
                        </dt>
                        <dd>
                            @Html.EditorFor(model => model.Dancer.SpotifyId, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Dancer.SpotifyId, "", new { @class = "text-danger" })
                        </dd>
                    </dl>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Dancer.SpotifyUri)
                        </dt>
                        <dd>
                            @Html.EditorFor(model => model.Dancer.SpotifyUri, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Dancer.SpotifyUri, "", new { @class = "text-danger" })
                        </dd>
                    </dl>
                }
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-6 col-md-6">
        <div class="panel panel-default">
            <div class="panel-body ">
                <h3>Tickets</h3>
                <table class="table table-condensed table-bordered">
                    <thead>
                        <tr>
                            <th class="text-center">Ticket Type</th>
                            <th class="text-center">School/Event</th>
                            <th class="text-center">Date Purchased</th>
                            <th class="text-center">Quantity</th>
                            <th class="text-center">Used/Total</th>
                        </tr>
                    </thead>
                    @foreach (var item in Model.Dancer.Tickets)
                    {
                        <tr>
                            <td class="text-left">
                                @(String.Format("{0:N0}", item.Ticket.Quantity) + " @ " + String.Format("{0:C}", item.Ticket.Price))
                            </td>
                            <td class="text-center">
                                @if(item.Ticket.EventId != null)
                                {
                                    @Html.ActionLink(item.Ticket.Event.Name, "View", "Event", new { id = item.Ticket.EventId, eventType = item.Ticket.Event is EDR.Models.Class ? EDR.Enums.EventType.Class : EDR.Enums.EventType.Social }, null)
                                }
                                else
                                {
                                    @Html.ActionLink(item.Ticket.School.Name, "View", "School", new { id = item.Ticket.SchoolId }, null)
                                }
                            </td>
                            <td class="text-center">
                                @item.DatePurchased.ToShortDateString()
                            </td>
                            <td class="text-right">
                                @String.Format("{0:N0}", item.Quantity)
                            </td>
                            <td class="text-right">
                                @String.Format("{0:N0}", item.EventRegistrations.Count())/@String.Format("{0:N0}", item.Quantity * item.Ticket.Quantity)
                            </td>
                        </tr>
                    }
                </table>
                @*<table class="table table-condensed table-bordered">
                    @foreach (var s in Model.Dancer.Tickets.Select(t => t.Ticket.School).Distinct().ToList())
                    {
                        <tr>
                            <td>
                                <h3>(@s.Id) @Html.ActionLink(s.Name, "View", "School", new { id = s.Id }, null)</h3>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <h4>Purchased</h4>
                                <hr />
                                <table class="table table-condensed table-hover">
                                    <thead>
                                        <tr>
                                            <th class="text-center">Ticket Type</th>
                                            <th class="text-center">Date Purchased</th>
                                            <th class="text-center">Quantity</th>
                                            <th class="text-center">Total</th>
                                            <th class="text-center">Used</th>
                                        </tr>
                                    </thead>
                                    @foreach (var item in Model.Dancer.Tickets.Where(t => t.Ticket.EventId == null && t.Ticket.SchoolId == s.Id))
                                    {
                                        <tr>
                                            <td class="text-left">
                                                @(String.Format("{0:N0}", item.Ticket.Quantity) + " @ " + String.Format("{0:C}", item.Ticket.Price))
                                            </td>
                                            <td class="text-center">
                                                @item.DatePurchased.ToShortDateString()
                                            </td>
                                            <td class="text-right">
                                                @String.Format("{0:N0}", item.Quantity)
                                            </td>
                                            <td class="text-right">
                                                @String.Format("{0:N0}", item.Quantity * item.Ticket.Quantity)
                                            </td>
                                            <td class="text-right">
                                                @String.Format("{0:N0}", item.EventRegistrations.Count())
                                            </td>
                                        </tr>
                                    }
                                    <tfoot>
                                        <tr style="font-weight: bold;">
                                            <td class="text-left">
                                                Total:
                                            </td>
                                            <td>
                                            </td>
                                            <td></td>
                                            <td class="text-right">
                                                @String.Format("{0:N0}", Model.Dancer.Tickets.Where(t => t.Ticket.EventId == null && t.Ticket.SchoolId == s.Id).Sum(t => t.Quantity * t.Ticket.Quantity))
                                            </td>
                                            <td class="text-right">
                                                @String.Format("{0:N0}", Model.Dancer.Tickets.Where(t => t.Ticket.EventId == null && t.Ticket.SchoolId == s.Id).Sum(t => t.EventRegistrations.Count()))
                                            </td>
                                        </tr>
                                    </tfoot>
                                </table>
                                <h4>Registrations</h4>
                                <hr />
                                <table class="table table-condensed table-hover">
                                    <thead>
                                        <tr>
                                            <th>Event</th>
                                            <th class="text-center">Date Registered</th>
                                        </tr>
                                    </thead>
                                    @foreach (var item in Model.Dancer.EventRegistrations.Where(r => r.UserTicket.Ticket.SchoolId == s.Id))
                                    {
                                        <tr>
                                            <td>
                                                @Html.ActionLink(item.Instance.Event.Name, "View", "Event", new { id = item.Instance.EventId, eventType = item.Instance.Event is EDR.Models.Class ? EDR.Enums.EventType.Class : EDR.Enums.EventType.Social }, null)
                                            </td>
                                            <td class="text-center">
                                                @item.Instance.DateTime.ToShortDateString()
                                            </td>
                                        </tr>
                                    }
                                </table>
                            </td>
                        </tr>
                    }
                </table>*@
            </div>
        </div>
        <div class="panel panel-default">
            <div class="panel-body ">
                <h3>Registrations</h3>
                <hr />
                <table class="table table-condensed table-hover">
                    <thead>
                        <tr>
                            <th>Class/Social</th>
                            <th class="text-center">Date Registered</th>
                        </tr>
                    </thead>
                    @foreach (var item in Model.Dancer.EventRegistrations.OrderByDescending(r => r.Instance.DateTime))
                    {
                        <tr>
                            <td>
                                @Html.ActionLink(item.Instance.Event.Name, "View", "Event", new { id = item.Instance.EventId, eventType = item.Instance.Event is EDR.Models.Class ? EDR.Enums.EventType.Class : EDR.Enums.EventType.Social }, null)
                            </td>
                            <td class="text-center">
                                @item.Instance.DateTime.ToShortDateString()
                            </td>
                        </tr>
                    }
                </table>
            </div>
        </div>
        @*<div class="panel panel-default">
            <div class="panel-body ">
                <h3>Event Tickets</h3>
                <h4>Tickets Purchased</h4>
                <hr />
                <table class="table">
                    <thead>
                        <tr>
                            <th>Event</th>
                            <th class="text-center">Ticket Type</th>
                            <th class="text-center">Date Purchased</th>
                            <th class="text-center">Quantity</th>
                            <th class="text-center">Total</th>
                        </tr>
                    </thead>
                    @foreach (var item in Model.Dancer.Tickets.Where(t => t.Ticket.EventId != null))
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(member => item.Ticket.Event.Name)
                            </td>
                            <td class="text-center">
                                @(String.Format("{0:N0}", item.Ticket.Quantity) + " @ " + String.Format("{0:C}", item.Ticket.Price))
                            </td>
                            <td class="text-center">
                                @item.DatePurchased.ToShortDateString()
                            </td>
                            <td class="text-right">
                                @String.Format("{0:N0}", item.Quantity)
                            </td>
                            <td class="text-right">
                                @String.Format("{0:N0}", item.Quantity * item.Ticket.Quantity)
                            </td>
                        </tr>
                    }
                </table>
            </div>
        </div>*@
    </div>
</div>

@section Scripts
{
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css" />
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/foolproof")
    @Scripts.Render("~/bundles/jqueryUI")
    <script src="@Url.Content("~/Scripts/jquery.unobtrusive-ajax.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.form.js")" type="text/javascript"></script>
    @Scripts.Render("~/bundles/GeoComplete")
    <script src="https://maps.googleapis.com/maps/api/js?sensor=false&amp;libraries=places"></script>

    <script type="text/javascript">
    $.validator.setDefaults({
        ignore: ""
    })

    $('#stylesearch').autocomplete({
        source: function (request, response) {
            $.ajax({
                url: '@Url.Action("Search", "DanceStyle")',
                data: { searchString: request.term },
                dataType: 'json',
                type: 'GET',
                success: function (data) {
                    response($.map(data, function (item) {
                        return {
                            label: item.Name,
                            value: item.Id
                        }
                    }));
                }
            })
        },
        select: function (event, ui) {
            $('#stylesearch').val(ui.item.label);
            $('#NewStyleId').val(ui.item.value);
            return false;
        },
        minLength: 1
    });

    $(function () {
        $('#saveform.main').valid();

        $('#btnEdit').click(function () {
            $('#viewdiv').hide();
            $('#editdiv').show();
            try
            {
                var valid = $('#saveform.main').valid();
            }
            catch(err)
            {
                document.getElementById("demo").innerHTML = err.message;
            }
        });
        $('#btncanceledit').click(function () {
            $('#viewdiv').show();
            $('#editdiv').hide();
        });

        $('#saveform.main').submit(function () {
            var valid = $('#saveform.main').valid();
        });
    });
    </script>

    <script type="text/javascript">
    $(function () {
        $("#Dancer_Address").geocomplete({
            details: "form",
            types: ["geocode", "establishment"],
        })
        .bind("geocode:result", function (event, result) {
            $('#Dancer_Latitude').prop("value", result.geometry.location.lat());
            $('#Dancer_Longitude').prop("value", result.geometry.location.lng());
            var street_num;
            var street_name;
            $.each(result.address_components, function (i, address_component) {
                //alert(address_component.types[0]);
                //alert(address_component.long_name);
                if (address_component.types[0] == "street_number") {
                    street_num = address_component.long_name;
                }
                else if (address_component.types[0] == "route") {
                    street_name = address_component.long_name;
                }
                else if (address_component.types[0] == "locality") {
                    $('#Dancer_City').prop("value", address_component.long_name);
                }
                else if (address_component.types[0] == "administrative_area_level_1") {
                    $('#Dancer_State').prop("value", address_component.long_name);
                }
                else if (address_component.types[0] == "postal_code") {
                    $('#Dancer_Zip').prop("value", address_component.long_name);
                }
                else if (address_component.types[0] == "country") {
                    $('#Dancer_Country').prop("value", address_component.long_name);
                }
            });
            //alert(street_num + " " + street_name);
            $('#Dancer_Address').prop("value", street_num + " " + street_name);
            //  console.log(result);
        });
    });

    </script>
}
